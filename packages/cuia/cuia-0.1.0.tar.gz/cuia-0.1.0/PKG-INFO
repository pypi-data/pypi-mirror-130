Metadata-Version: 2.1
Name: cuia
Version: 0.1.0
Summary: üßâüåø A delightful tiny framework for building reliable text-based applications
Home-page: https://github.com/getcuia/cuia
License: MIT
Keywords: ansi,cli,command-line,console,cuia,terminal,tui
Author: Felipe S. S. Schneider
Author-email: schneider.felipe@posgrad.ufsc.br
Requires-Python: >=3.8,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: User Interfaces
Classifier: Topic :: Terminals :: Terminal Emulators/X Terminals
Requires-Dist: cusser (>=0.1.0,<0.2.0)
Project-URL: Repository, https://github.com/getcuia/cuia
Description-Content-Type: text/markdown

[![PyPI](https://img.shields.io/pypi/v/cuia)](https://pypi.org/project/cuia/)
[![Python package](https://github.com/getcuia/cuia/actions/workflows/python-package.yml/badge.svg)](https://github.com/getcuia/cuia/actions/workflows/python-package.yml)
[![PyPI - License](https://img.shields.io/pypi/l/cuia)](https://github.com/getcuia/cuia/blob/main/LICENSE)

# [cuia](https://github.com/getcuia/cuia#readme) üßâ

<div align="center">
    <img class="hero" src="https://github.com/getcuia/cuia/raw/main/banner.svg" alt="cuia" width="33%" />
</div>

> A delightful tiny framework for building reliable text-based applications.

**cuia** is a tiny Python library for building interactive terminal user
interfaces that are easy to use, fast and have a small memory footprint.

cuia is inspired by [Bubble Tea](https://github.com/charmbracelet/bubbletea) (written in [Go](https://golang.org/)) and, in particular, employs [the Elm architecture](https://guide.elm-lang.org/architecture/) (TEA, named after the [Elm programming language](https://elm-lang.org/)). This means that **cuia applications are as dynamic and easy to write (and use) as they could be**.

## Features

-   üßµ Simple: your user interface is a string of characters
-   üí¨ Interaction-focused
-   ‚ôªÔ∏è Easily integrate with other libraries
-   üïπÔ∏è Use the same escape code sequences
    [as you would with Colorama](https://github.com/tartley/colorama#recognised-ansi-sequences)
-   üñ•Ô∏è Support for Unix variants out of the box:
    [curses](https://docs.python.org/3/library/curses.html) under the hood by
    default (and probably works on Windows and DOS if a compatible curses
    library is available)
-   ü§¨ Only one dependency: [cusser](https://github.com/getcuia/cusser) (for
    wrapping the curses library)
-   üêç Python 3.8+

## Installation

```console
$ pip install cuia
```

## Usage

```python
In [1]: import asyncio

In [2]: from dataclasses import dataclass

In [3]: from cuia import Program, Store

In [4]: @dataclass
   ...: class Hello(Store):
   ...:
   ...:     x: int = 0
   ...:     y: int = 0
   ...:
   ...:     def __str__(self):
   ...:         return f"\033[{self.x};{self.y}H\033[1mHello, üåç!"
   ...:

In [5]: program = Program(Hello(34, 12))

In [6]: asyncio.run(program.start())

```

![Screenshot](https://github.com/getcuia/cuia/raw/main/screenshot.png)

## How does it work

cuia is inspired by [Bubble Tea](https://github.com/charmbracelet/bubbletea)
(written in [Go](https://golang.org/)) and, on the surface, looks much like it.
In particular, cuia employs
[the Elm architecture](https://guide.elm-lang.org/architecture/) (TEA, named
after the [Elm programming language](https://elm-lang.org/)). What it means in
terms of output is that a cuia application creates a new screen representation
of the user interface (in fact, as a regular
[Python string](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str))
at each step. It might look as a serious memory overhead but, in fact, it will
never use more than 100kb to hold those string representations, even on large
screens[^how-big].

But, contrary to Bubble Tea, cuia is built on top of
[curses](https://docs.python.org/3/library/curses.html). curses is a standard
Python library (written in
[C](<https://en.wikipedia.org/wiki/C_(programming_language)>)) that wraps the
famous [ncurses](https://en.wikipedia.org/wiki/Ncurses) library (written in C as
well). ncurses does
[efficient screen updates](https://invisible-island.net/ncurses/hackguide.html#output)
and is thus quite fast. It works by comparing the contents of a screen buffer to
the contents of the actual screen and only updating where the contents have
changed. So, in general, cuia works in a similar way to
[virtual DOM](https://en.wikipedia.org/wiki/Virtual_DOM) tree updates (a
technique commonly used in
[JavaScript web frameworks](https://en.wikipedia.org/wiki/Comparison_of_JavaScript-based_web_frameworks)
such as [React](https://reactjs.org/)), except that it is a string buffer that
is updated, instead of a virtual DOM tree.

[^how-big]:
    My 22" desktop can't make a terminal larger than 211x55 characters. A single
    string representation would require a little over 10kb of storage in Python.
    It would then take **ten** string representations to be hold in memory at a
    single point in time for it to go beyond 100kb.

