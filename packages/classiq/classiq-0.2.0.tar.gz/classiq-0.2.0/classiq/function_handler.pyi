from typing import Optional, Dict

from classiq_interface.generator.function_param_list import *

import abc
from classiq.exceptions import ClassiqValueError as ClassiqValueError, ClassiqWiringError as ClassiqWiringError
from classiq.function_library import FunctionLibrary as FunctionLibrary
from classiq.wire import Wire as Wire
from typing import Dict, Optional

class FunctionHandler(abc.ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    def apply(self, function_name: str, in_wires: Optional[Dict[str, Wire]] = ...) -> Dict[str, Wire]: ...
    def __getattr__(self, item): ...
    def __dir__(self): ...
    def include_library(self, library: FunctionLibrary) -> None: ...
    def HypercubeEntangler(self, params: HypercubeEntangler, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CyclicShift(self, params: CyclicShift, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Multiplier(self, params: Multiplier, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def WeightedAdder(self, params: WeightedAdder, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def FinanceModels(self, params: FinanceModels, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def BitwiseAnd(self, params: BitwiseAnd, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Subtractor(self, params: Subtractor, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def StatePropagator(self, params: StatePropagator, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def QaoaAnsatz(self, params: QaoaAnsatz, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def StatePreparation(self, params: StatePreparation, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def VQEAnsatz(self, params: VQEAnsatz, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LShift(self, params: LShift, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def NotEqual(self, params: NotEqual, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def UnitaryGate(self, params: UnitaryGate, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def BitwiseOr(self, params: BitwiseOr, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Finance(self, params: Finance, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Mcx(self, params: Mcx, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LessEqual(self, params: LessEqual, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Equal(self, params: Equal, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def BitwiseXor(self, params: BitwiseXor, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def HardwareEfficientAnsatz(self, params: HardwareEfficientAnsatz, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Adder(self, params: Adder, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def AmplitudeEstimation(self, params: AmplitudeEstimation, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def GreaterThan(self, params: GreaterThan, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def RShift(self, params: RShift, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def GridEntangler(self, params: GridEntangler, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def GreaterEqual(self, params: GreaterEqual, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CDFComparator(self, params: CDFComparator, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LinearPauliRotations(self, params: LinearPauliRotations, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def GroverOperator(self, params: GroverOperator, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def SparseAmpLoad(self, params: SparseAmpLoad, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Negation(self, params: Negation, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def FinancePayoff(self, params: FinancePayoff, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def QFT(self, params: QFT, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LinearGCI(self, params: LinearGCI, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def CustomFunction(self, params: CustomFunction, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def LessThan(self, params: LessThan, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def HadamardAmpLoad(self, params: HadamardAmpLoad, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def TwoDimensionalEntangler(self, params: TwoDimensionalEntangler, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def Arithmetic(self, params: Arithmetic, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
    def ArithmeticOracle(self, params: ArithmeticOracle, in_wires: Optional[Dict[str, wire.Wire]] = None) -> Dict[str, wire.Wire]: ...
