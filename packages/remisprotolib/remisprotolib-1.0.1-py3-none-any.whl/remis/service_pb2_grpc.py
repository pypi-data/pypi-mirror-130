# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import health_facility_pb2 as health__facility__pb2
import service_pb2 as service__pb2
import user_pb2 as user__pb2


class IServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getServiceById = channel.unary_unary(
                '/remis.service.IService/getServiceById',
                request_serializer=service__pb2.ServiceRequest.SerializeToString,
                response_deserializer=service__pb2.ServiceResponse.FromString,
                )
        self.getCabinetsByServiceId = channel.unary_unary(
                '/remis.service.IService/getCabinetsByServiceId',
                request_serializer=service__pb2.ServiceRequestList.SerializeToString,
                response_deserializer=health__facility__pb2.CabinetResponseList.FromString,
                )
        self.getDoctorsByServiceId = channel.unary_unary(
                '/remis.service.IService/getDoctorsByServiceId',
                request_serializer=service__pb2.ServiceRequestList.SerializeToString,
                response_deserializer=user__pb2.UserListResponse.FromString,
                )
        self.getServiceCategoryList = channel.unary_unary(
                '/remis.service.IService/getServiceCategoryList',
                request_serializer=service__pb2.ServiceCategoryRequest.SerializeToString,
                response_deserializer=service__pb2.ServiceCategoryListResponse.FromString,
                )
        self.getServiceCategoryById = channel.unary_unary(
                '/remis.service.IService/getServiceCategoryById',
                request_serializer=service__pb2.ServiceCategoryRequest.SerializeToString,
                response_deserializer=service__pb2.ServiceCategoryResponse.FromString,
                )


class IServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getServiceById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCabinetsByServiceId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDoctorsByServiceId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getServiceCategoryList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getServiceCategoryById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getServiceById': grpc.unary_unary_rpc_method_handler(
                    servicer.getServiceById,
                    request_deserializer=service__pb2.ServiceRequest.FromString,
                    response_serializer=service__pb2.ServiceResponse.SerializeToString,
            ),
            'getCabinetsByServiceId': grpc.unary_unary_rpc_method_handler(
                    servicer.getCabinetsByServiceId,
                    request_deserializer=service__pb2.ServiceRequestList.FromString,
                    response_serializer=health__facility__pb2.CabinetResponseList.SerializeToString,
            ),
            'getDoctorsByServiceId': grpc.unary_unary_rpc_method_handler(
                    servicer.getDoctorsByServiceId,
                    request_deserializer=service__pb2.ServiceRequestList.FromString,
                    response_serializer=user__pb2.UserListResponse.SerializeToString,
            ),
            'getServiceCategoryList': grpc.unary_unary_rpc_method_handler(
                    servicer.getServiceCategoryList,
                    request_deserializer=service__pb2.ServiceCategoryRequest.FromString,
                    response_serializer=service__pb2.ServiceCategoryListResponse.SerializeToString,
            ),
            'getServiceCategoryById': grpc.unary_unary_rpc_method_handler(
                    servicer.getServiceCategoryById,
                    request_deserializer=service__pb2.ServiceCategoryRequest.FromString,
                    response_serializer=service__pb2.ServiceCategoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'remis.service.IService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getServiceById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remis.service.IService/getServiceById',
            service__pb2.ServiceRequest.SerializeToString,
            service__pb2.ServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCabinetsByServiceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remis.service.IService/getCabinetsByServiceId',
            service__pb2.ServiceRequestList.SerializeToString,
            health__facility__pb2.CabinetResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDoctorsByServiceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remis.service.IService/getDoctorsByServiceId',
            service__pb2.ServiceRequestList.SerializeToString,
            user__pb2.UserListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getServiceCategoryList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remis.service.IService/getServiceCategoryList',
            service__pb2.ServiceCategoryRequest.SerializeToString,
            service__pb2.ServiceCategoryListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getServiceCategoryById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remis.service.IService/getServiceCategoryById',
            service__pb2.ServiceCategoryRequest.SerializeToString,
            service__pb2.ServiceCategoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
