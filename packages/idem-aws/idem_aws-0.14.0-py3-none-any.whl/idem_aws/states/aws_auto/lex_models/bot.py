"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.lex_models.delete_bot
hub.exec.boto3.client.lex_models.get_bots
hub.exec.boto3.client.lex_models.put_bot
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, locale: Text, child_directed: bool, description: Text = None, intents: List = None, enable_model_improvements: bool = None, nlu_intent_confidence_threshold: float = None, clarification_prompt: Dict = None, abort_statement: Dict = None, idle_session_ttl_in_seconds: int = None, voice_id: Text = None, checksum: Text = None, process_behavior: Text = None, detect_sentiment: bool = None, create_version: bool = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or update a bot you are
    only required to specify a name, a locale, and whether the bot is directed toward children under age 13. You can
    use this to add intents later, or to remove intents from an existing bot. When you create a bot with the minimum
    information, the bot is created or updated but Amazon Lex returns the  response FAILED. You can build the bot
    after you add one or more intents. For more information about Amazon Lex bots, see how-it-works.  If you specify
    the name of an existing bot, the fields in the request replace the existing values in the $LATEST version of the
    bot. Amazon Lex removes any fields that you don't provide values for in the request, except for the
    idleTTLInSeconds and privacySettings fields, which are set to their default values. If you don't specify values
    for required fields, Amazon Lex throws an exception. This operation requires permissions for the lex:PutBot
    action. For more information, see security-iam.

    Args:
        name(Text): The name of the bot. The name is not case sensitive.
        description(Text, optional): A description of the bot. Defaults to None.
        intents(List, optional): An array of Intent objects. Each intent represents a command that a user can express. For
            example, a pizza ordering bot might support an OrderPizza intent. For more information, see how-
            it-works. Defaults to None.
        enable_model_improvements(bool, optional): Set to true to enable access to natural language understanding improvements.  When you set the
            enableModelImprovements parameter to true you can use the nluIntentConfidenceThreshold parameter
            to configure confidence scores. For more information, see Confidence Scores. You can only set
            the enableModelImprovements parameter in certain Regions. If you set the parameter to true, your
            bot has access to accuracy improvements. The Regions where you can set the
            enableModelImprovements parameter to true are:   US East (N. Virginia) (us-east-1)   US West
            (Oregon) (us-west-2)   Asia Pacific (Sydney) (ap-southeast-2)   EU (Ireland) (eu-west-1)   In
            other Regions, the enableModelImprovements parameter is set to true by default. In these Regions
            setting the parameter to false throws a ValidationException exception. Defaults to None.
        nlu_intent_confidence_threshold(float, optional): Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent,
            AMAZON.KendraSearchIntent, or both when returning alternative intents in a PostContent or
            PostText response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they
            are configured for the bot. You must set the enableModelImprovements parameter to true to use
            confidence scores in the following regions.   US East (N. Virginia) (us-east-1)   US West
            (Oregon) (us-west-2)   Asia Pacific (Sydney) (ap-southeast-2)   EU (Ireland) (eu-west-1)   In
            other Regions, the enableModelImprovements parameter is set to true by default. For example,
            suppose a bot is configured with the confidence threshold of 0.80 and the AMAZON.FallbackIntent.
            Amazon Lex returns three alternative intents with the following confidence scores: IntentA
            (0.70), IntentB (0.60), IntentC (0.50). The response from the PostText operation would be:
            AMAZON.FallbackIntent   IntentA   IntentB   IntentC. Defaults to None.
        clarification_prompt(Dict, optional): When Amazon Lex doesn't understand the user's intent, it uses this message to get clarification.
            To specify how many times Amazon Lex should repeat the clarification prompt, use the maxAttempts
            field. If Amazon Lex still doesn't understand, it sends the message in the abortStatement field.
            When you create a clarification prompt, make sure that it suggests the correct response from the
            user. for example, for a bot that orders pizza and drinks, you might create this clarification
            prompt: "What would you like to do? You can say 'Order a pizza' or 'Order a drink.'" If you have
            defined a fallback intent, it will be invoked if the clarification prompt is repeated the number
            of times defined in the maxAttempts field. For more information, see  AMAZON.FallbackIntent. If
            you don't define a clarification prompt, at runtime Amazon Lex will return a 400 Bad Request
            exception in three cases:    Follow-up prompt - When the user responds to a follow-up prompt but
            does not provide an intent. For example, in response to a follow-up prompt that says "Would you
            like anything else today?" the user says "Yes." Amazon Lex will return a 400 Bad Request
            exception because it does not have a clarification prompt to send to the user to get an intent.
            Lambda function - When using a Lambda function, you return an ElicitIntent dialog type. Since
            Amazon Lex does not have a clarification prompt to get an intent from the user, it returns a 400
            Bad Request exception.   PutSession operation - When using the PutSession operation, you send an
            ElicitIntent dialog type. Since Amazon Lex does not have a clarification prompt to get an intent
            from the user, it returns a 400 Bad Request exception. Defaults to None.
        abort_statement(Dict, optional): When Amazon Lex can't understand the user's input in context, it tries to elicit the information
            a few times. After that, Amazon Lex sends the message defined in abortStatement to the user, and
            then cancels the conversation. To set the number of retries, use the valueElicitationPrompt
            field for the slot type.  For example, in a pizza ordering bot, Amazon Lex might ask a user
            "What type of crust would you like?" If the user's response is not one of the expected responses
            (for example, "thin crust, "deep dish," etc.), Amazon Lex tries to elicit a correct response a
            few more times.  For example, in a pizza ordering application, OrderPizza might be one of the
            intents. This intent might require the CrustType slot. You specify the valueElicitationPrompt
            field when you create the CrustType slot. If you have defined a fallback intent the cancel
            statement will not be sent to the user, the fallback intent is used instead. For more
            information, see  AMAZON.FallbackIntent. Defaults to None.
        idle_session_ttl_in_seconds(int, optional): The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. A user
            interaction session remains active for the amount of time specified. If no conversation occurs
            during this time, the session expires and Amazon Lex deletes any data provided before the
            timeout. For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked
            halfway through placing an order. If the user doesn't complete the order within the specified
            time, Amazon Lex discards the slot information that it gathered, and the user must start over.
            If you don't include the idleSessionTTLInSeconds element in a PutBot operation request, Amazon
            Lex uses the default value. This is also true if the request replaces an existing bot. The
            default is 300 seconds (5 minutes). Defaults to None.
        voice_id(Text, optional): The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user.
            The locale configured for the voice must match the locale of the bot. For more information, see
            Voices in Amazon Polly in the Amazon Polly Developer Guide. Defaults to None.
        checksum(Text, optional): Identifies a specific revision of the $LATEST version. When you create a new bot, leave the
            checksum field blank. If you specify a checksum you get a BadRequestException exception. When
            you want to update a bot, set the checksum field to the checksum of the most recent revision of
            the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match
            the $LATEST version, you get a PreconditionFailedException exception. Defaults to None.
        process_behavior(Text, optional): If you set the processBehavior element to BUILD, Amazon Lex builds the bot so that it can be
            run. If you set the element to SAVE Amazon Lex saves the bot, but doesn't build it.  If you
            don't specify this value, the default value is BUILD. Defaults to None.
        locale(Text):  Specifies the target locale for the bot. Any intent used in the bot must be compatible with the
            locale of the bot.  The default is en-US.
        child_directed(bool): For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify
            whether your use of Amazon Lex is related to a website, program, or other application that is
            directed or targeted, in whole or in part, to children under age 13 and subject to the
            Children's Online Privacy Protection Act (COPPA) by specifying true or false in the
            childDirected field. By specifying true in the childDirected field, you confirm that your use of
            Amazon Lex is related to a website, program, or other application that is directed or targeted,
            in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the
            childDirected field, you confirm that your use of Amazon Lex is not related to a website,
            program, or other application that is directed or targeted, in whole or in part, to children
            under age 13 and subject to COPPA. You may not specify a default value for the childDirected
            field that does not accurately reflect whether your use of Amazon Lex is related to a website,
            program, or other application that is directed or targeted, in whole or in part, to children
            under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or
            other application that is directed in whole or in part, to children under age 13, you must
            obtain any required verifiable parental consent under COPPA. For information regarding the use
            of Amazon Lex in connection with websites, programs, or other applications that are directed or
            targeted, in whole or in part, to children under age 13, see the Amazon Lex FAQ.
        detect_sentiment(bool, optional): When set to true user utterances are sent to Amazon Comprehend for sentiment analysis. If you
            don't specify detectSentiment, the default is false. Defaults to None.
        create_version(bool, optional): When set to true a new numbered version of the bot is created. This is the same as calling the
            CreateBotVersion operation. If you don't specify createVersion, the default is false. Defaults to None.
        tags(List, optional): A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the
            PutBot operation to update the tags on a bot. To update tags, use the TagResource operation. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.lex_models.bot.present:
                - name: value
                - locale: value
                - child_directed: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lex_models.bot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.lex_models.get_bots(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.lex_models.put_bot(
                ctx,
                
                
                **{"Name": name, "description": description, "intents": intents, "enableModelImprovements": enable_model_improvements, "nluIntentConfidenceThreshold": nlu_intent_confidence_threshold, "clarificationPrompt": clarification_prompt, "abortStatement": abort_statement, "idleSessionTTLInSeconds": idle_session_ttl_in_seconds, "voiceId": voice_id, "checksum": checksum, "processBehavior": process_behavior, "locale": locale, "childDirected": child_directed, "detectSentiment": detect_sentiment, "createVersion": create_version, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.lex_models.get_bots(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes all versions of the bot, including the $LATEST version. To delete a specific version of the bot, use the
    DeleteBotVersion operation. The DeleteBot operation doesn't immediately remove the bot schema. Instead, it is
    marked for deletion and removed later. Amazon Lex stores utterances indefinitely for improving the ability of
    your bot to respond to user inputs. These utterances are not removed when the bot is deleted. To remove the
    utterances, use the DeleteUtterances operation. If a bot has an alias, you can't delete it. Instead, the
    DeleteBot operation returns a ResourceInUseException exception that includes a reference to the alias that
    refers to the bot. To remove the reference to the bot, delete the alias. If you get the same exception again,
    delete the referring alias until the DeleteBot operation is successful. This operation requires permissions for
    the lex:DeleteBot action.

    Args:
        name(Text): The name of the bot. The name is case sensitive.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.lex_models.bot.absent:
                - name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lex_models.bot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.lex_models.get_bots(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.lex_models.delete_bot(
                ctx,
                
                
                **{"Name": name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.lex_models.get_bots(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

