"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.appmesh.create_virtual_router
hub.exec.boto3.client.appmesh.delete_virtual_router
hub.exec.boto3.client.appmesh.describe_virtual_router
hub.exec.boto3.client.appmesh.list_virtual_routers
hub.exec.boto3.client.appmesh.update_virtual_router
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, mesh_name: Text, spec: Dict, virtual_router_name: Text, client_token: Text = None, mesh_owner: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a virtual router within a service mesh. Specify a listener for any inbound traffic that your virtual
    router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers
    handle traffic for one or more virtual services within your mesh. After you create your virtual router, create
    and associate routes for your virtual router that direct incoming requests to different virtual nodes. For more
    information about virtual routers, see Virtual routers.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        client_token(Text, optional): Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up
            to 36 letters, numbers, hyphens, and underscores are allowed. Defaults to None.
        mesh_name(Text): The name of the service mesh to create the virtual router in.
        mesh_owner(Text, optional): The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the
            account that you specify must share the mesh with your account before you can create the
            resource in the service mesh. For more information about mesh sharing, see Working with shared
            meshes. Defaults to None.
        spec(Dict): The virtual router specification to apply.
        tags(List, optional): Optional metadata that you can apply to the virtual router to assist with categorization and
            organization. Each tag consists of a key and an optional value, both of which you define. Tag
            keys can have a maximum character length of 128 characters, and tag values can have a maximum
            length of 256 characters. Defaults to None.
        virtual_router_name(Text): The name to use for the virtual router.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.appmesh.virtual_router.present:
                - name: value
                - mesh_name: value
                - spec: value
                - virtual_router_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.appmesh.virtual_router.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.appmesh.describe_virtual_router(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.appmesh.create_virtual_router(
                ctx,
                
                
                **{"clientToken": client_token, "meshName": mesh_name, "meshOwner": mesh_owner, "spec": spec, "tags": tags, "virtualRouterName": virtual_router_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.appmesh.describe_virtual_router(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, mesh_name: Text, virtual_router_name: Text, mesh_owner: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an existing virtual router. You must delete any routes associated with the virtual router before you can
    delete the router itself.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        mesh_name(Text): The name of the service mesh to delete the virtual router in.
        mesh_owner(Text, optional): The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
            the ID of the account that shared the mesh with your account. For more information about mesh
            sharing, see Working with shared meshes. Defaults to None.
        virtual_router_name(Text): The name of the virtual router to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.appmesh.virtual_router.absent:
                - name: value
                - mesh_name: value
                - virtual_router_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.appmesh.virtual_router.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.appmesh.describe_virtual_router(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.appmesh.delete_virtual_router(
                ctx,
                
                
                **{"meshName": mesh_name, "meshOwner": mesh_owner, "virtualRouterName": virtual_router_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.appmesh.describe_virtual_router(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

