"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.appmesh.create_gateway_route
hub.exec.boto3.client.appmesh.delete_gateway_route
hub.exec.boto3.client.appmesh.describe_gateway_route
hub.exec.boto3.client.appmesh.list_gateway_routes
hub.exec.boto3.client.appmesh.update_gateway_route
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, gateway_route_name: Text, mesh_name: Text, spec: Dict, virtual_gateway_name: Text, client_token: Text = None, mesh_owner: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a gateway route. A gateway route is attached to a virtual gateway and routes traffic to an existing
    virtual service. If a route matches a request, it can distribute traffic to a target virtual service. For more
    information about gateway routes, see Gateway routes.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        client_token(Text, optional): Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up
            to 36 letters, numbers, hyphens, and underscores are allowed. Defaults to None.
        gateway_route_name(Text): The name to use for the gateway route.
        mesh_name(Text): The name of the service mesh to create the gateway route in.
        mesh_owner(Text, optional): The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the
            account that you specify must share the mesh with your account before you can create the
            resource in the service mesh. For more information about mesh sharing, see Working with shared
            meshes. Defaults to None.
        spec(Dict): The gateway route specification to apply.
        tags(List, optional): Optional metadata that you can apply to the gateway route to assist with categorization and
            organization. Each tag consists of a key and an optional value, both of which you define. Tag
            keys can have a maximum character length of 128 characters, and tag values can have a maximum
            length of 256 characters. Defaults to None.
        virtual_gateway_name(Text): The name of the virtual gateway to associate the gateway route with. If the virtual gateway is
            in a shared mesh, then you must be the owner of the virtual gateway resource.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.appmesh.gateway_route.present:
                - name: value
                - gateway_route_name: value
                - mesh_name: value
                - spec: value
                - virtual_gateway_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.appmesh.gateway_route.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.appmesh.describe_gateway_route(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.appmesh.create_gateway_route(
                ctx,
                
                
                **{"clientToken": client_token, "gatewayRouteName": gateway_route_name, "meshName": mesh_name, "meshOwner": mesh_owner, "spec": spec, "tags": tags, "virtualGatewayName": virtual_gateway_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.appmesh.describe_gateway_route(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, gateway_route_name: Text, mesh_name: Text, virtual_gateway_name: Text, mesh_owner: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an existing gateway route.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        gateway_route_name(Text): The name of the gateway route to delete.
        mesh_name(Text): The name of the service mesh to delete the gateway route from.
        mesh_owner(Text, optional): The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
            the ID of the account that shared the mesh with your account. For more information about mesh
            sharing, see Working with shared meshes. Defaults to None.
        virtual_gateway_name(Text): The name of the virtual gateway to delete the route from.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.appmesh.gateway_route.absent:
                - name: value
                - gateway_route_name: value
                - mesh_name: value
                - virtual_gateway_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.appmesh.gateway_route.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.appmesh.describe_gateway_route(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.appmesh.delete_gateway_route(
                ctx,
                
                
                **{"gatewayRouteName": gateway_route_name, "meshName": mesh_name, "meshOwner": mesh_owner, "virtualGatewayName": virtual_gateway_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.appmesh.describe_gateway_route(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

