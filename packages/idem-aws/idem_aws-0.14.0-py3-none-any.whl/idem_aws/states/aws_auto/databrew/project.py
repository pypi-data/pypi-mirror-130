"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.databrew.create_project
hub.exec.boto3.client.databrew.delete_project
hub.exec.boto3.client.databrew.describe_project
hub.exec.boto3.client.databrew.list_projects
hub.exec.boto3.client.databrew.update_project
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, dataset_name: Text, recipe_name: Text, role_arn: Text, sample: Dict = None, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new DataBrew project.

    Args:
        name(Text): A unique name for the new project. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen
            (-), period (.), and space.
        dataset_name(Text): The name of an existing dataset to associate this project with.
        recipe_name(Text): The name of an existing recipe to associate with the project.
        sample(Dict, optional): Represents the sample size and sampling type for DataBrew to use for interactive data analysis. Defaults to None.
        role_arn(Text): The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed
            for this request.
        tags(Dict, optional): Metadata tags to apply to this project. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.databrew.project.present:
                - name: value
                - dataset_name: value
                - recipe_name: value
                - role_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.databrew.project.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.databrew.describe_project(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.databrew.create_project(
                ctx,
                
                
                **{"Name": name, "DatasetName": dataset_name, "RecipeName": recipe_name, "Sample": sample, "RoleArn": role_arn, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.databrew.describe_project(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an existing DataBrew project.

    Args:
        name(Text): The name of the project to be deleted.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.databrew.project.absent:
                - name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.databrew.project.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.databrew.describe_project(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.databrew.delete_project(
                ctx,
                
                
                **{"Name": name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.databrew.describe_project(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

