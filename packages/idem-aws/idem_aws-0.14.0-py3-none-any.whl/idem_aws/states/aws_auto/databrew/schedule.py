"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.databrew.create_schedule
hub.exec.boto3.client.databrew.delete_schedule
hub.exec.boto3.client.databrew.describe_schedule
hub.exec.boto3.client.databrew.list_schedules
hub.exec.boto3.client.databrew.update_schedule
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, cron_expression: Text, job_names: List = None, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new schedule for one or more DataBrew jobs. Jobs can be run at a specific date and time, or at regular
    intervals.

    Args:
        name(Text): A unique name for the schedule. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-),
            period (.), and space.
        job_names(List, optional): The name or names of one or more jobs to be run. Defaults to None.
        cron_expression(Text): The date or dates and time or times when the jobs are to be run. For more information, see Cron
            expressions in the Glue DataBrew Developer Guide.
        tags(Dict, optional): Metadata tags to apply to this schedule. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.databrew.schedule.present:
                - name: value
                - cron_expression: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.databrew.schedule.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.databrew.describe_schedule(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.databrew.create_schedule(
                ctx,
                
                
                **{"Name": name, "JobNames": job_names, "CronExpression": cron_expression, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.databrew.describe_schedule(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified DataBrew schedule.

    Args:
        name(Text): The name of the schedule to be deleted.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.databrew.schedule.absent:
                - name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.databrew.schedule.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.databrew.describe_schedule(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.databrew.delete_schedule(
                ctx,
                
                
                **{"Name": name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.databrew.describe_schedule(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

