"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.ecs.create_task_set
hub.exec.boto3.client.ecs.delete_task_set
hub.exec.boto3.client.ecs.describe_task_sets
hub.exec.boto3.client.ecs.update_task_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, service: Text, cluster: Text, task_definition: Text, external_id: Text = None, network_configuration: Dict = None, load_balancers: List = None, service_registries: List = None, launch_type: Text = None, capacity_provider_strategy: List = None, platform_version: Text = None, scale: Dict = None, client_token: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Create a task set in the specified cluster and service. This is used when a service uses the EXTERNAL deployment
    controller type. For more information, see Amazon ECS Deployment Types in the Amazon Elastic Container Service
    Developer Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        service(Text): The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
        cluster(Text): The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to
            create the task set in.
        external_id(Text, optional): An optional non-unique tag that identifies this task set in external systems. If the task set is
            associated with a service discovery registry, the tasks in this task set will have the
            ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute set to the provided value. Defaults to None.
        task_definition(Text): The task definition for the tasks in the task set to use.
        network_configuration(Dict, optional): An object representing the network configuration for a task set. Defaults to None.
        load_balancers(List, optional): A load balancer object representing the load balancer to use with the task set. The supported
            load balancer types are either an Application Load Balancer or a Network Load Balancer. Defaults to None.
        service_registries(List, optional): The details of the service discovery registries to assign to this task set. For more
            information, see Service Discovery. Defaults to None.
        launch_type(Text, optional): The launch type that new tasks in the task set will use. For more information, see Amazon ECS
            Launch Types in the Amazon Elastic Container Service Developer Guide. If a launchType is
            specified, the capacityProviderStrategy parameter must be omitted. Defaults to None.
        capacity_provider_strategy(List, optional): The capacity provider strategy to use for the task set. A capacity provider strategy consists of
            one or more capacity providers along with the base and weight to assign to them. A capacity
            provider must be associated with the cluster to be used in a capacity provider strategy. The
            PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only
            capacity providers with an ACTIVE or UPDATING status can be used. If a capacityProviderStrategy
            is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or
            launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. If
            specifying a capacity provider that uses an Auto Scaling group, the capacity provider must
            already be created. New capacity providers can be created with the CreateCapacityProvider API
            operation. To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
            capacity providers. The Fargate capacity providers are available to all accounts and only need
            to be associated with a cluster to be used. The PutClusterCapacityProviders API operation is
            used to update the list of available capacity providers for a cluster after the cluster is
            created. Defaults to None.
        platform_version(Text, optional): The platform version that the tasks in the task set should use. A platform version is specified
            only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform
            version is used by default. Defaults to None.
        scale(Dict, optional): A floating-point percentage of the desired number of tasks to place and keep running in the task
            set. Defaults to None.
        client_token(Text, optional): Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up
            to 32 ASCII characters are allowed. Defaults to None.
        tags(List, optional): The metadata that you apply to the task set to help you categorize and organize them. Each tag
            consists of a key and an optional value, both of which you define. When a service is deleted,
            the tags are deleted as well. The following basic restrictions apply to tags:   Maximum number
            of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can
            have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value
            length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple
            services and resources, remember that other services may have restrictions on allowed
            characters. Generally allowed characters are: letters, numbers, and spaces representable in
            UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.
            Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys
            or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or
            values with this prefix. Tags with this prefix do not count against your tags per resource
            limit. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.ecs.task_set.present:
                - name: value
                - service: value
                - cluster: value
                - task_definition: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ecs.task_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.ecs.describe_task_sets(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.ecs.create_task_set(
                ctx,
                
                
                **{"service": service, "cluster": cluster, "externalId": external_id, "taskDefinition": task_definition, "networkConfiguration": network_configuration, "loadBalancers": load_balancers, "serviceRegistries": service_registries, "launchType": launch_type, "capacityProviderStrategy": capacity_provider_strategy, "platformVersion": platform_version, "scale": scale, "clientToken": client_token, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.ecs.describe_task_sets(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, cluster: Text, service: Text, task_set: Text, force: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a specified task set within a service. This is used when a service uses the EXTERNAL deployment
    controller type. For more information, see Amazon ECS Deployment Types in the Amazon Elastic Container Service
    Developer Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        cluster(Text): The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the
            task set exists in to delete.
        service(Text): The short name or full Amazon Resource Name (ARN) of the service that hosts the task set to
            delete.
        task_set(Text): The task set ID or full Amazon Resource Name (ARN) of the task set to delete.
        force(bool, optional): If true, this allows you to delete a task set even if it hasn't been scaled down to zero. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.ecs.task_set.absent:
                - name: value
                - cluster: value
                - service: value
                - task_set: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ecs.task_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.ecs.describe_task_sets(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.ecs.delete_task_set(
                ctx,
                
                
                **{"cluster": cluster, "service": service, "taskSet": task_set, "force": force}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.ecs.describe_task_sets(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

