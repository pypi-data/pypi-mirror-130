"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.neptune.create_db_cluster
hub.exec.boto3.client.neptune.delete_db_cluster
hub.exec.boto3.client.neptune.describe_db_clusters
hub.exec.boto3.client.neptune.failover_db_cluster
hub.exec.boto3.client.neptune.modify_db_cluster
hub.exec.boto3.client.neptune.start_db_cluster
hub.exec.boto3.client.neptune.stop_db_cluster
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, db_cluster_identifier: Text, engine: Text, availability_zones: List = None, backup_retention_period: int = None, character_set_name: Text = None, copy_tags_to_snapshot: bool = None, database_name: Text = None, db_cluster_parameter_group_name: Text = None, vpc_security_group_ids: List = None, db_subnet_group_name: Text = None, engine_version: Text = None, port: int = None, master_username: Text = None, master_user_password: Text = None, option_group_name: Text = None, preferred_backup_window: Text = None, preferred_maintenance_window: Text = None, replication_source_identifier: Text = None, tags: List = None, storage_encrypted: bool = None, kms_key_id: Text = None, pre_signed_url: Text = None, enable_iam_database_authentication: bool = None, enable_cloudwatch_logs_exports: List = None, deletion_protection: bool = None, source_region: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new Amazon Neptune DB cluster. You can use the ReplicationSourceIdentifier parameter to create the DB
    cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance. Note that when you create a new
    cluster using CreateDBCluster directly, deletion protection is disabled by default (when you create a new
    production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster
    if its DeletionProtection field is set to false.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        availability_zones(List, optional): A list of EC2 Availability Zones that instances in the DB cluster can be created in. Defaults to None.
        backup_retention_period(int, optional): The number of days for which automated backups are retained. You must specify a minimum value of
            1. Default: 1 Constraints:   Must be a value from 1 to 35. Defaults to None.
        character_set_name(Text, optional):  (Not supported by Neptune). Defaults to None.
        copy_tags_to_snapshot(bool, optional):  If set to true, tags are copied to any snapshot of the DB cluster that is created. Defaults to None.
        database_name(Text, optional): The name for your database of up to 64 alpha-numeric characters. If you do not provide a name,
            Amazon Neptune will not create a database in the DB cluster you are creating. Defaults to None.
        db_cluster_identifier(Text): The DB cluster identifier. This parameter is stored as a lowercase string. Constraints:   Must
            contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Cannot
            end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1.
        db_cluster_parameter_group_name(Text, optional):  The name of the DB cluster parameter group to associate with this DB cluster. If this argument
            is omitted, the default is used. Constraints:   If supplied, must match the name of an existing
            DBClusterParameterGroup. Defaults to None.
        vpc_security_group_ids(List, optional): A list of EC2 VPC security groups to associate with this DB cluster. Defaults to None.
        db_subnet_group_name(Text, optional): A DB subnet group to associate with this DB cluster. Constraints: Must match the name of an
            existing DBSubnetGroup. Must not be default. Example: mySubnetgroup. Defaults to None.
        engine(Text): The name of the database engine to be used for this DB cluster. Valid Values: neptune.
        engine_version(Text, optional): The version number of the database engine to use for the new DB cluster. Example: 1.0.2.1. Defaults to None.
        port(int, optional): The port number on which the instances in the DB cluster accept connections.  Default: 8182. Defaults to None.
        master_username(Text, optional): Not supported by Neptune. Defaults to None.
        master_user_password(Text, optional): Not supported by Neptune. Defaults to None.
        option_group_name(Text, optional):  (Not supported by Neptune). Defaults to None.
        preferred_backup_window(Text, optional): The daily time range during which automated backups are created if automated backups are enabled
            using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random
            from an 8-hour block of time for each Amazon Region. To see the time blocks available, see
            Adjusting the Preferred Maintenance Window in the Amazon Neptune User Guide.  Constraints:
            Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not
            conflict with the preferred maintenance window.   Must be at least 30 minutes. Defaults to None.
        preferred_maintenance_window(Text, optional): The weekly time range during which system maintenance can occur, in Universal Coordinated Time
            (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random
            from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. To
            see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon
            Neptune User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum
            30-minute window. Defaults to None.
        replication_source_identifier(Text, optional): The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is
            created as a Read Replica. Defaults to None.
        tags(List, optional): The tags to assign to the new DB cluster. Defaults to None.
        storage_encrypted(bool, optional): Specifies whether the DB cluster is encrypted. Defaults to None.
        kms_key_id(Text, optional): The Amazon KMS key identifier for an encrypted DB cluster. The KMS key identifier is the Amazon
            Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same
            Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can
            use the KMS key alias instead of the ARN for the KMS encryption key. If an encryption key is not
            specified in KmsKeyId:   If ReplicationSourceIdentifier identifies an encrypted source, then
            Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune
            will use your default encryption key.   If the StorageEncrypted parameter is true and
            ReplicationSourceIdentifier is not specified, then Amazon Neptune will use your default
            encryption key.   Amazon KMS creates the default encryption key for your Amazon account. Your
            Amazon account has a different default encryption key for each Amazon Region. If you create a
            Read Replica of an encrypted DB cluster in another Amazon Region, you must set KmsKeyId to a KMS
            key ID that is valid in the destination Amazon Region. This key is used to encrypt the Read
            Replica in that Amazon Region. Defaults to None.
        pre_signed_url(Text, optional): This parameter is not currently supported. Defaults to None.
        enable_iam_database_authentication(bool, optional): If set to true, enables Amazon Identity and Access Management (IAM) authentication for the
            entire DB cluster (this cannot be set at an instance level). Default: false. Defaults to None.
        enable_cloudwatch_logs_exports(List, optional): The list of log types that need to be enabled for exporting to CloudWatch Logs. Defaults to None.
        deletion_protection(bool, optional): A value that indicates whether the DB cluster has deletion protection enabled. The database
            can't be deleted when deletion protection is enabled. By default, deletion protection is
            enabled. Defaults to None.
        source_region(Text, optional): The ID of the region that contains the source for the db cluster. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.neptune.db_cluster.present:
                - name: value
                - db_cluster_identifier: value
                - engine: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.neptune.db_cluster.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.neptune.describe_db_clusters(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.neptune.create_db_cluster(
                ctx,
                
                
                **{"AvailabilityZones": availability_zones, "BackupRetentionPeriod": backup_retention_period, "CharacterSetName": character_set_name, "CopyTagsToSnapshot": copy_tags_to_snapshot, "DatabaseName": database_name, "DBClusterIdentifier": db_cluster_identifier, "DBClusterParameterGroupName": db_cluster_parameter_group_name, "VpcSecurityGroupIds": vpc_security_group_ids, "DBSubnetGroupName": db_subnet_group_name, "Engine": engine, "EngineVersion": engine_version, "Port": port, "MasterUsername": master_username, "MasterUserPassword": master_user_password, "OptionGroupName": option_group_name, "PreferredBackupWindow": preferred_backup_window, "PreferredMaintenanceWindow": preferred_maintenance_window, "ReplicationSourceIdentifier": replication_source_identifier, "Tags": tags, "StorageEncrypted": storage_encrypted, "KmsKeyId": kms_key_id, "PreSignedUrl": pre_signed_url, "EnableIAMDatabaseAuthentication": enable_iam_database_authentication, "EnableCloudwatchLogsExports": enable_cloudwatch_logs_exports, "DeletionProtection": deletion_protection, "SourceRegion": source_region}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.neptune.describe_db_clusters(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, db_cluster_identifier: Text, skip_final_snapshot: bool = None, final_db_snapshot_identifier: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all
    automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the
    specified DB cluster are not deleted. Note that the DB Cluster cannot be deleted if deletion protection is
    enabled. To delete it, you must first set its DeletionProtection field to False.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        db_cluster_identifier(Text): The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.
            Constraints:   Must match an existing DBClusterIdentifier.
        skip_final_snapshot(bool, optional):  Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If
            true is specified, no DB cluster snapshot is created. If false is specified, a DB cluster
            snapshot is created before the DB cluster is deleted.  You must specify a
            FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot is false.  Default: false. Defaults to None.
        final_db_snapshot_identifier(Text, optional):  The DB cluster snapshot identifier of the new DB cluster snapshot created when
            SkipFinalSnapshot is set to false.   Specifying this parameter and also setting the
            SkipFinalShapshot parameter to true results in an error.  Constraints:   Must be 1 to 255
            letters, numbers, or hyphens.   First character must be a letter   Cannot end with a hyphen or
            contain two consecutive hyphens. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.neptune.db_cluster.absent:
                - name: value
                - db_cluster_identifier: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.neptune.db_cluster.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.neptune.describe_db_clusters(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.neptune.delete_db_cluster(
                ctx,
                
                
                **{"DBClusterIdentifier": db_cluster_identifier, "SkipFinalSnapshot": skip_final_snapshot, "FinalDBSnapshotIdentifier": final_db_snapshot_identifier}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.neptune.describe_db_clusters(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

