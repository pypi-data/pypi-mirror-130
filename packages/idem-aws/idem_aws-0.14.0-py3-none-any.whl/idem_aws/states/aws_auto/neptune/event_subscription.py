"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.neptune.create_event_subscription
hub.exec.boto3.client.neptune.delete_event_subscription
hub.exec.boto3.client.neptune.describe_event_subscriptions
hub.exec.boto3.client.neptune.modify_event_subscription
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, subscription_name: Text, sns_topic_arn: Text, source_type: Text = None, event_categories: List = None, source_ids: List = None, enabled: bool = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by
    either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic
    in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console. You can specify the type of
    source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the
    events, and provide a list of event categories (EventCategories) for events you want to be notified of. For
    example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories
    = Availability, Backup. If you specify both the SourceType and SourceIds, such as SourceType = db-instance and
    SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If
    you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source
    type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are
    notified of events generated from all Neptune sources belonging to your customer account.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        subscription_name(Text): The name of the subscription. Constraints: The name must be less than 255 characters.
        sns_topic_arn(Text): The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is
            created by Amazon SNS when you create a topic and subscribe to it.
        source_type(Text, optional): The type of source that is generating the events. For example, if you want to be notified of
            events generated by a DB instance, you would set this parameter to db-instance. if this value is
            not specified, all events are returned. Valid values: db-instance | db-cluster | db-parameter-
            group | db-security-group | db-snapshot | db-cluster-snapshot. Defaults to None.
        event_categories(List, optional):  A list of event categories for a SourceType that you want to subscribe to. You can see a list
            of the categories for a given SourceType by using the DescribeEventCategories action. Defaults to None.
        source_ids(List, optional): The list of identifiers of the event sources for which events are returned. If not specified,
            then all sources are included in the response. An identifier must begin with a letter and must
            contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two
            consecutive hyphens. Constraints:   If SourceIds are supplied, SourceType must also be provided.
            If the source type is a DB instance, then a DBInstanceIdentifier must be supplied.   If the
            source type is a DB security group, a DBSecurityGroupName must be supplied.   If the source type
            is a DB parameter group, a DBParameterGroupName must be supplied.   If the source type is a DB
            snapshot, a DBSnapshotIdentifier must be supplied. Defaults to None.
        enabled(bool, optional):  A Boolean value; set to true to activate the subscription, set to false to create the
            subscription but not active it. Defaults to None.
        tags(List, optional): The tags to be applied to the new event subscription. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.neptune.event_subscription.present:
                - name: value
                - subscription_name: value
                - sns_topic_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.neptune.event_subscription.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.neptune.describe_event_subscriptions(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.neptune.create_event_subscription(
                ctx,
                
                
                **{"SubscriptionName": subscription_name, "SnsTopicArn": sns_topic_arn, "SourceType": source_type, "EventCategories": event_categories, "SourceIds": source_ids, "Enabled": enabled, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.neptune.describe_event_subscriptions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, subscription_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an event notification subscription.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        subscription_name(Text): The name of the event notification subscription you want to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.neptune.event_subscription.absent:
                - name: value
                - subscription_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.neptune.event_subscription.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.neptune.describe_event_subscriptions(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.neptune.delete_event_subscription(
                ctx,
                
                
                **{"SubscriptionName": subscription_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.neptune.describe_event_subscriptions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

