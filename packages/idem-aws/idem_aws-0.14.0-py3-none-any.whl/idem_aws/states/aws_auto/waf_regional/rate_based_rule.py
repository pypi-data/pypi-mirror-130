"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.waf_regional.create_rate_based_rule
hub.exec.boto3.client.waf_regional.delete_rate_based_rule
hub.exec.boto3.client.waf_regional.get_rate_based_rule
hub.exec.boto3.client.waf_regional.list_rate_based_rules
hub.exec.boto3.client.waf_regional.update_rate_based_rule
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, metric_name: Text, rate_key: Text, rate_limit: int, change_token: Text, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Creates a RateBasedRule. The
    RateBasedRule contains a RateLimit, which specifies the maximum number of requests that AWS WAF allows from a
    specified IP address in a five-minute period. The RateBasedRule also contains the IPSet objects, ByteMatchSet
    objects, and other predicates that identify the requests that you want to count or block if these requests
    exceed the RateLimit. If you add more than one predicate to a RateBasedRule, a request not only must exceed the
    RateLimit, but it also must match all the conditions to be counted or blocked. For example, suppose you add the
    following to a RateBasedRule:   An IPSet that matches the IP address 192.0.2.44/32    A ByteMatchSet that
    matches BadBot in the User-Agent header   Further, you specify a RateLimit of 1,000. You then add the
    RateBasedRule to a WebACL and specify that you want to block requests that meet the conditions in the rule. For
    a request to be blocked, it must come from the IP address 192.0.2.44 and the User-Agent header in the request
    must contain the value BadBot. Further, requests that match these two conditions must be received at a rate of
    more than 1,000 requests every five minutes. If both conditions are met and the rate is exceeded, AWS WAF blocks
    the requests. If the rate drops below 1,000 for a five-minute period, AWS WAF no longer blocks the requests. As
    a second example, suppose you want to limit requests to a particular page on your site. To do this, you could
    add the following to a RateBasedRule:   A ByteMatchSet with FieldToMatch of URI    A PositionalConstraint of
    STARTS_WITH    A TargetString of login    Further, you specify a RateLimit of 1,000. By adding this
    RateBasedRule to a WebACL, you could limit requests to your login page without affecting the rest of your site.
    To create and configure a RateBasedRule, perform the following steps:   Create and update the predicates that
    you want to include in the rule. For more information, see CreateByteMatchSet, CreateIPSet, and
    CreateSqlInjectionMatchSet.   Use GetChangeToken to get the change token that you provide in the ChangeToken
    parameter of a CreateRule request.   Submit a CreateRateBasedRule request.   Use GetChangeToken to get the
    change token that you provide in the ChangeToken parameter of an UpdateRule request.   Submit an
    UpdateRateBasedRule request to specify the predicates that you want to include in the rule.   Create and update
    a WebACL that contains the RateBasedRule. For more information, see CreateWebACL.   For more information about
    how to use the AWS WAF API to allow or block HTTP requests, see the AWS WAF Developer Guide.

    Args:
        name(Text): A friendly name or description of the RateBasedRule. You can't change the name of a
            RateBasedRule after you create it.
        metric_name(Text): A friendly name or description for the metrics for this RateBasedRule. The name can contain only
            alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It
            can't contain whitespace or metric names reserved for AWS WAF, including "All" and
            "Default_Action." You can't change the name of the metric after you create the RateBasedRule.
        rate_key(Text): The field that AWS WAF uses to determine if requests are likely arriving from a single source
            and thus subject to rate monitoring. The only valid value for RateKey is IP. IP indicates that
            requests that arrive from the same IP address are subject to the RateLimit that is specified in
            the RateBasedRule.
        rate_limit(int): The maximum number of requests, which have an identical value in the field that is specified by
            RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and
            the other predicates specified in the rule are also met, AWS WAF triggers the action that is
            specified for this rule.
        change_token(Text): The ChangeToken that you used to submit the CreateRateBasedRule request. You can also use this
            value to query the status of the request. For more information, see GetChangeTokenStatus.
        tags(List, optional): . Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.waf_regional.rate_based_rule.present:
                - name: value
                - metric_name: value
                - rate_key: value
                - rate_limit: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf_regional.rate_based_rule.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.waf_regional.get_rate_based_rule(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.waf_regional.create_rate_based_rule(
                ctx,
                
                
                **{"Name": name, "MetricName": metric_name, "RateKey": rate_key, "RateLimit": rate_limit, "ChangeToken": change_token, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.waf_regional.get_rate_based_rule(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, rule_id: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Permanently deletes a
    RateBasedRule. You can't delete a rule if it's still used in any WebACL objects or if it still includes any
    predicates, such as ByteMatchSet objects. If you just want to remove a rule from a WebACL, use UpdateWebACL. To
    permanently delete a RateBasedRule from AWS WAF, perform the following steps:   Update the RateBasedRule to
    remove predicates, if any. For more information, see UpdateRateBasedRule.   Use GetChangeToken to get the change
    token that you provide in the ChangeToken parameter of a DeleteRateBasedRule request.   Submit a
    DeleteRateBasedRule request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        rule_id(Text): The RuleId of the RateBasedRule that you want to delete. RuleId is returned by
            CreateRateBasedRule and by ListRateBasedRules.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.waf_regional.rate_based_rule.absent:
                - name: value
                - rule_id: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf_regional.rate_based_rule.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.waf_regional.get_rate_based_rule(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.waf_regional.delete_rate_based_rule(
                ctx,
                
                
                **{"RuleId": rule_id, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.waf_regional.get_rate_based_rule(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

