"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.waf_regional.create_geo_match_set
hub.exec.boto3.client.waf_regional.delete_geo_match_set
hub.exec.boto3.client.waf_regional.get_geo_match_set
hub.exec.boto3.client.waf_regional.list_geo_match_sets
hub.exec.boto3.client.waf_regional.update_geo_match_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Creates an GeoMatchSet, which you
    use to specify which web requests you want to allow or block based on the country that the requests originate
    from. For example, if you're receiving a lot of requests from one or more countries and you want to block the
    requests, you can create an GeoMatchSet that contains those countries and then configure AWS WAF to block the
    requests.  To create and configure a GeoMatchSet, perform the following steps:   Use GetChangeToken to get the
    change token that you provide in the ChangeToken parameter of a CreateGeoMatchSet request.   Submit a
    CreateGeoMatchSet request.   Use GetChangeToken to get the change token that you provide in the ChangeToken
    parameter of an UpdateGeoMatchSet request.   Submit an UpdateGeoMatchSetSet request to specify the countries
    that you want AWS WAF to watch for.   For more information about how to use the AWS WAF API to allow or block
    HTTP requests, see the AWS WAF Developer Guide.

    Args:
        name(Text): A friendly name or description of the GeoMatchSet. You can't change Name after you create the
            GeoMatchSet.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.waf_regional.geo_match_set.present:
                - name: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf_regional.geo_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.waf_regional.get_geo_match_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.waf_regional.create_geo_match_set(
                ctx,
                
                
                **{"Name": name, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.waf_regional.get_geo_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, geo_match_set_id: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Permanently deletes a GeoMatchSet.
    You can't delete a GeoMatchSet if it's still used in any Rules or if it still includes any countries. If you
    just want to remove a GeoMatchSet from a Rule, use UpdateRule. To permanently delete a GeoMatchSet from AWS WAF,
    perform the following steps:   Update the GeoMatchSet to remove any countries. For more information, see
    UpdateGeoMatchSet.   Use GetChangeToken to get the change token that you provide in the ChangeToken parameter of
    a DeleteGeoMatchSet request.   Submit a DeleteGeoMatchSet request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        geo_match_set_id(Text): The GeoMatchSetID of the GeoMatchSet that you want to delete. GeoMatchSetId is returned by
            CreateGeoMatchSet and by ListGeoMatchSets.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.waf_regional.geo_match_set.absent:
                - name: value
                - geo_match_set_id: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf_regional.geo_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.waf_regional.get_geo_match_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.waf_regional.delete_geo_match_set(
                ctx,
                
                
                **{"GeoMatchSetId": geo_match_set_id, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.waf_regional.get_geo_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

