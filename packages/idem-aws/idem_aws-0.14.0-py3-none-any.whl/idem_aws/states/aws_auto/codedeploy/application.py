"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.codedeploy.create_application
hub.exec.boto3.client.codedeploy.delete_application
hub.exec.boto3.client.codedeploy.get_application
hub.exec.boto3.client.codedeploy.list_applications
hub.exec.boto3.client.codedeploy.update_application
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, application_name: Text, compute_platform: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an application.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        application_name(Text): The name of the application. This name must be unique with the applicable IAM user or AWS
            account.
        compute_platform(Text, optional):  The destination platform type for the deployment (Lambda, Server, or ECS). Defaults to None.
        tags(List, optional):  The metadata that you apply to CodeDeploy applications to help you organize and categorize
            them. Each tag consists of a key and an optional value, both of which you define. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.codedeploy.application.present:
                - name: value
                - application_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.codedeploy.application.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.codedeploy.get_application(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.codedeploy.create_application(
                ctx,
                
                
                **{"applicationName": application_name, "computePlatform": compute_platform, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.codedeploy.get_application(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, application_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an application.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        application_name(Text): The name of an AWS CodeDeploy application associated with the IAM user or AWS account.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.codedeploy.application.absent:
                - name: value
                - application_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.codedeploy.application.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.codedeploy.get_application(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.codedeploy.delete_application(
                ctx,
                
                
                **{"applicationName": application_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.codedeploy.get_application(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

