"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.sns.create_topic
hub.exec.boto3.client.sns.delete_topic
hub.exec.boto3.client.sns.list_topics
resource = hub.tool.boto3.resource.create(ctx, "sns", "Topic", name)
hub.tool.boto3.resource.exec(resource, add_permission, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, confirm_subscription, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, publish, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, remove_permission, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, set_attributes, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, subscribe, *args, **kwargs)
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, attributes: Dict = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at
    most 1,000 FIFO topics). For more information, see Creating an Amazon SNS topic in the Amazon SNS Developer
    Guide. This action is idempotent, so if the requester already owns a topic with the specified name, that topic's
    ARN is returned without creating a new topic.

    Args:
        name(Text): The name of the topic you want to create. Constraints: Topic names must be made up of only
            uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1
            and 256 characters long. For a FIFO (first-in-first-out) topic, the name must end with the .fifo
            suffix.
        attributes(Dict, optional): A map of attributes with their corresponding values. The following lists the names,
            descriptions, and values of the special request parameters that the CreateTopic action uses:
            DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S
            endpoints.    DisplayName – The display name to use for a topic with SMS subscriptions.
            FifoTopic – Set to true to create a FIFO topic.    Policy – The policy that defines who can
            access your topic. By default, only the topic owner can publish or subscribe to the topic.   The
            following attribute applies only to server-side encryption:    KmsMasterKeyId – The ID of an
            Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more
            information, see Key Terms. For more examples, see KeyId in the Key Management Service API
            Reference.    The following attributes apply only to FIFO topics:    FifoTopic – When this is
            set to true, a FIFO topic is created.    ContentBasedDeduplication – Enables content-based
            deduplication for FIFO topics.   By default, ContentBasedDeduplication is set to false. If you
            create a FIFO topic and this attribute is false, you must specify a value for the
            MessageDeduplicationId parameter for the Publish action.    When you set
            ContentBasedDeduplication to true, Amazon SNS uses a SHA-256 hash to generate the
            MessageDeduplicationId using the body of the message (but not the attributes of the message).
            (Optional) To override the generated value, you can specify a value for the
            MessageDeduplicationId parameter for the Publish action. Defaults to None.
        tags(List, optional): The list of tags to add to a new topic.  To be able to tag a topic on creation, you must have
            the sns:CreateTopic and sns:TagResource permissions. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.sns.topic.present:
                - name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)

    resource = hub.tool.boto3.resource.create(ctx, "sns", "Topic", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.sns.create_topic(
                ctx,
                
                
                **{"Name": name, "Attributes": attributes, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, topic_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the
    topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist
    does not result in an error.

    Args:
        name(Text): The name of the state.
        topic_arn(Text): The ARN of the topic you want to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.sns.topic.absent:
                - name: value
                - topic_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)

    resource = hub.tool.boto3.resource.create(ctx, "sns", "Topic", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.sns.delete_topic(
                ctx,
                
                
                **{"TopicArn": topic_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

