"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.clouddirectory.create_directory
hub.exec.boto3.client.clouddirectory.delete_directory
hub.exec.boto3.client.clouddirectory.disable_directory
hub.exec.boto3.client.clouddirectory.enable_directory
hub.exec.boto3.client.clouddirectory.get_directory
hub.exec.boto3.client.clouddirectory.list_directories
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, schema_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a Directory by copying the published schema into the directory. A directory cannot be created without a
    schema. You can also quickly create a directory using a managed schema, called the QuickStartSchema. For more
    information, see Managed Schema in the Amazon Cloud Directory Developer Guide.

    Args:
        name(Text): The name of the Directory. Should be unique per account, per region.
        schema_arn(Text): The Amazon Resource Name (ARN) of the published schema that will be copied into the data
            Directory. For more information, see arns.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.clouddirectory.directory.present:
                - name: value
                - schema_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.clouddirectory.directory.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.clouddirectory.get_directory(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.clouddirectory.create_directory(
                ctx,
                
                
                **{"Name": name, "SchemaArn": schema_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.clouddirectory.get_directory(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, directory_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise
    extreme caution when deleting directories.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        directory_arn(Text): The ARN of the directory to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.clouddirectory.directory.absent:
                - name: value
                - directory_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.clouddirectory.directory.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.clouddirectory.get_directory(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.clouddirectory.delete_directory(
                ctx,
                
                
                **{"DirectoryArn": directory_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.clouddirectory.get_directory(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

