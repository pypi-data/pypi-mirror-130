"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.sdb.delete_attributes
hub.exec.boto3.client.sdb.get_attributes
hub.exec.boto3.client.sdb.put_attributes
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, domain_name: Text, item_name: Text, attributes: List, expected: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes
    using a combination of the Attribute.X.Name and Attribute.X.Value parameters. The client specifies the first
    attribute by the parameters Attribute.0.Name and Attribute.0.Value, the second attribute by the parameters
    Attribute.1.Name and Attribute.1.Value, and so on.   Attributes are uniquely identified in an item by their
    name/value combination. For example, a single item can have the attributes { "first_name", "first_value" } and {
    "first_name", second_value" }. However, it cannot have two attribute instances where both the Attribute.X.Name
    and Attribute.X.Value are the same.   Optionally, the requestor can supply the Replace parameter for each
    individual attribute. Setting this value to true causes the new attribute value to replace the existing
    attribute value(s). For example, if an item has the attributes { 'a', '1' }, { 'b', '2'} and { 'b', '3' } and
    the requestor calls PutAttributes using the attributes { 'b', '4' } with the Replace parameter set to true, the
    final attributes of the item are changed to { 'a', '1' } and { 'b', '4' }, which replaces the previous values of
    the 'b' attribute with the new value.   You cannot specify an empty string as an attribute name.   Because
    Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate
    GetAttributes or Select operation (read) immediately after a PutAttributes or DeleteAttributes operation (write)
    might not return the updated data.   The following limitations are enforced for this operation:  256 total
    attribute name-value pairs per item One billion attributes per domain 10 GB of total user data storage per
    domain

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        domain_name(Text): The name of the domain in which to perform the operation.
        item_name(Text): The name of the item.
        attributes(List): The list of attributes.
        expected(Dict, optional): The update condition which, if specified, determines whether the specified attributes will be
            updated or not. The update condition must be satisfied in order for this request to be processed
            and the attributes to be updated. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.sdb.attribute.present:
                - name: value
                - domain_name: value
                - item_name: value
                - attributes: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sdb.attribute.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.sdb.get_attributes(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.sdb.put_attributes(
                ctx,
                
                
                **{"DomainName": domain_name, "ItemName": item_name, "Attributes": attributes, "Expected": expected}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.sdb.get_attributes(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, domain_name: Text, item_name: Text, attributes: List = None, expected: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is
    deleted.   DeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute
    does not result in an error response.   Because Amazon SimpleDB makes multiple copies of item data and uses an
    eventual consistency update model, performing a GetAttributes or Select operation (read) immediately after a
    DeleteAttributes or PutAttributes operation (write) might not return updated item data.

    Args:
        name(Text): The name of the state.
        domain_name(Text): The name of the domain in which to perform the operation.
        item_name(Text): The name of the item. Similar to rows on a spreadsheet, items represent individual objects that
            contain one or more value-attribute pairs.
        attributes(List, optional): A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of
            data that can be assigned to items. Defaults to None.
        expected(Dict, optional): The update condition which, if specified, determines whether the specified attributes will be
            deleted or not. The update condition must be satisfied in order for this request to be processed
            and the attributes to be deleted. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.sdb.attribute.absent:
                - name: value
                - domain_name: value
                - item_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)

    

    before = await hub.exec.boto3.client.sdb.get_attributes(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.sdb.delete_attributes(
                ctx,
                
                
                **{"DomainName": domain_name, "ItemName": item_name, "Attributes": attributes, "Expected": expected}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.sdb.get_attributes(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

