"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.ec2.create_transit_gateway_route
hub.exec.boto3.client.ec2.delete_transit_gateway_route
hub.exec.boto3.client.ec2.export_transit_gateway_routes
hub.exec.boto3.client.ec2.replace_transit_gateway_route
hub.exec.boto3.client.ec2.search_transit_gateway_routes
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, destination_cidr_block: Text, transit_gateway_route_table_id: Text, transit_gateway_attachment_id: Text = None, blackhole: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a static route for the specified transit gateway route table.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        destination_cidr_block(Text): The CIDR range used for destination matches. Routing decisions are based on the most specific
            match.
        transit_gateway_route_table_id(Text): The ID of the transit gateway route table.
        transit_gateway_attachment_id(Text, optional): The ID of the attachment. Defaults to None.
        blackhole(bool, optional): Indicates whether to drop traffic that matches this route. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.ec2.transit_gateway_route.present:
                - name: value
                - destination_cidr_block: value
                - transit_gateway_route_table_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.transit_gateway_route.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.ec2.search_transit_gateway_routes(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.create_transit_gateway_route(
                ctx,
                DryRun=ctx.test,
                
                **{"DestinationCidrBlock": destination_cidr_block, "TransitGatewayRouteTableId": transit_gateway_route_table_id, "TransitGatewayAttachmentId": transit_gateway_attachment_id, "Blackhole": blackhole}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.ec2.search_transit_gateway_routes(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, transit_gateway_route_table_id: Text, destination_cidr_block: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified route from the specified transit gateway route table.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        transit_gateway_route_table_id(Text): The ID of the transit gateway route table.
        destination_cidr_block(Text): The CIDR range for the route. This must match the CIDR for the route exactly.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.ec2.transit_gateway_route.absent:
                - name: value
                - transit_gateway_route_table_id: value
                - destination_cidr_block: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.transit_gateway_route.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.ec2.search_transit_gateway_routes(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.delete_transit_gateway_route(
                ctx,
                DryRun=ctx.test,
                
                **{"TransitGatewayRouteTableId": transit_gateway_route_table_id, "DestinationCidrBlock": destination_cidr_block}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.ec2.search_transit_gateway_routes(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

