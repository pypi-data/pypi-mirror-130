"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.ec2.accept_transit_gateway_multicast_domain_associations
hub.exec.boto3.client.ec2.get_transit_gateway_multicast_domain_associations
hub.exec.boto3.client.ec2.reject_transit_gateway_multicast_domain_associations
"""



import copy
from typing import *
import dict_tools.differ as differ

async def present(hub, ctx, name: Text, transit_gateway_multicast_domain_id: Text = None, transit_gateway_attachment_id: Text = None, subnet_ids: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Accepts a request to associate subnets with a transit gateway multicast domain.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        transit_gateway_multicast_domain_id(Text, optional): The ID of the transit gateway multicast domain. Defaults to None.
        transit_gateway_attachment_id(Text, optional): The ID of the transit gateway attachment. Defaults to None.
        subnet_ids(List, optional): The IDs of the subnets to associate with the transit gateway multicast domain. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.ec2.transit_gateway_multicast_domain_association.present:
                - name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.transit_gateway_multicast_domain_association.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.ec2.get_transit_gateway_multicast_domain_associations(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.accept_transit_gateway_multicast_domain_associations(
                ctx,
                DryRun=ctx.test,
                
                **{"TransitGatewayMulticastDomainId": transit_gateway_multicast_domain_id, "TransitGatewayAttachmentId": transit_gateway_attachment_id, "SubnetIds": subnet_ids}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.ec2.get_transit_gateway_multicast_domain_associations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def absent(hub, ctx, name: Text, transit_gateway_multicast_domain_id: Text = None, transit_gateway_attachment_id: Text = None, subnet_ids: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Rejects a request to associate cross-account subnets with a transit gateway multicast domain.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        transit_gateway_multicast_domain_id(Text, optional): The ID of the transit gateway multicast domain. Defaults to None.
        transit_gateway_attachment_id(Text, optional): The ID of the transit gateway attachment. Defaults to None.
        subnet_ids(List, optional): The IDs of the subnets to associate with the transit gateway multicast domain. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.ec2.transit_gateway_multicast_domain_association.absent:
                - name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.transit_gateway_multicast_domain_association.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.ec2.get_transit_gateway_multicast_domain_associations(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.reject_transit_gateway_multicast_domain_associations(
                ctx,
                DryRun=ctx.test,
                
                **{"TransitGatewayMulticastDomainId": transit_gateway_multicast_domain_id, "TransitGatewayAttachmentId": transit_gateway_attachment_id, "SubnetIds": subnet_ids}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.ec2.get_transit_gateway_multicast_domain_associations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def describe(hub, ctx)  -> Dict[str, Dict[str, Any]]:
    r'''
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function

    
    Gets information about the associations for the transit gateway multicast domain.


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe aws_auto.ec2.transit_gateway_multicast_domain_association
    '''

    
    result = {}

    ret = await hub.exec.boto3.client.ec2.get_transit_gateway_multicast_domain_associations(ctx)
    if not ret["status"]:
        hub.log.debug(f"Could not describe transit_gateway_multicast_domain_association {ret['comment']}")
        return result

    for transit_gateway_multicast_domain_association in ret["ret"]["TODO"]:
        new_transit_gateway_multicast_domain_association = [
                {"TransitGatewayMulticastDomainId": transit_gateway_multicast_domain_id, "Filters": filters, "MaxResults": max_results, "NextToken": next_token}
        ]
        result[transit_gateway_multicast_domain_association["transit_gateway_multicast_domain_associationId"]] = {"aws_auto.ec2.transit_gateway_multicast_domain_association.present": new_transit_gateway_multicast_domain_association}

        for i, data in enumerate(transit_gateway_multicast_domain_association.get("", ())):
            sub_transit_gateway_multicast_domain_association = copy.deepcopy(new_transit_gateway_multicast_domain_association)

            # TODO check for subresouruces
            sub_transit_gateway_multicast_domain_association.append({})
            sub_transit_gateway_multicast_domain_association.append({"name": "TODOs"})
            result[f"TODOs-{i}"] = {"aws_auto.ec2.transit_gateway_multicast_domain_association.present": sub_transit_gateway_multicast_domain_association}

    return result


