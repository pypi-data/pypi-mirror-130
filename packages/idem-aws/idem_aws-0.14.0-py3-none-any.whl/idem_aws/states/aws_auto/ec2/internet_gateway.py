"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.ec2.attach_internet_gateway
hub.exec.boto3.client.ec2.create_internet_gateway
hub.exec.boto3.client.ec2.delete_internet_gateway
hub.exec.boto3.client.ec2.describe_internet_gateways
hub.exec.boto3.client.ec2.detach_internet_gateway
resource = hub.tool.boto3.resource.create(ctx, "ec2", "InternetGateway", name)
hub.tool.boto3.resource.exec(resource, attach_to_vpc, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, create_tags, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, detach_from_vpc, *args, **kwargs)
"""



import copy
from typing import *
import dict_tools.differ as differ

async def present(hub, ctx, name: Text, tag_specifications: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC
    using AttachInternetGateway. For more information about your VPC and internet gateway, see the Amazon Virtual
    Private Cloud User Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        tag_specifications(List, optional): The tags to assign to the internet gateway. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.ec2.internet_gateway.present:
                - name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.internet_gateway.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "ec2", "InternetGateway", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.create_internet_gateway(
                ctx,
                DryRun=ctx.test,
                
                **{"TagSpecifications": tag_specifications}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def absent(hub, ctx, name: Text, internet_gateway_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete
    it.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        internet_gateway_id(Text): The ID of the internet gateway.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.ec2.internet_gateway.absent:
                - name: value
                - internet_gateway_id: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.internet_gateway.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "ec2", "InternetGateway", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.delete_internet_gateway(
                ctx,
                DryRun=ctx.test,
                
                **{"InternetGatewayId": internet_gateway_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def describe(hub, ctx)  -> Dict[str, Dict[str, Any]]:
    r'''
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function

    
    Describes one or more of your internet gateways.


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe aws_auto.ec2.internet_gateway
    '''

    
    result = {}

    ret = await hub.exec.boto3.client.ec2.describe_internet_gateways(ctx)
    if not ret["status"]:
        hub.log.debug(f"Could not describe internet_gateway {ret['comment']}")
        return result

    for internet_gateway in ret["ret"]["TODO"]:
        new_internet_gateway = [
                {"Filters": filters, "InternetGatewayIds": internet_gateway_ids, "NextToken": next_token, "MaxResults": max_results}
        ]
        result[internet_gateway["internet_gatewayId"]] = {"aws_auto.ec2.internet_gateway.present": new_internet_gateway}

        for i, data in enumerate(internet_gateway.get("", ())):
            sub_internet_gateway = copy.deepcopy(new_internet_gateway)

            # TODO check for subresouruces
            sub_internet_gateway.append({})
            sub_internet_gateway.append({"name": "TODOs"})
            result[f"TODOs-{i}"] = {"aws_auto.ec2.internet_gateway.present": sub_internet_gateway}

    return result


