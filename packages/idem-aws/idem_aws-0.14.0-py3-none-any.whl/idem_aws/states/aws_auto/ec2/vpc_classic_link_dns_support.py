"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.ec2.describe_vpc_classic_link_dns_support
hub.exec.boto3.client.ec2.disable_vpc_classic_link_dns_support
hub.exec.boto3.client.ec2.enable_vpc_classic_link_dns_support
"""



import copy
from typing import *
import dict_tools.differ as differ

async def present(hub, ctx, name: Text, vpc_id: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked
    EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's
    linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed
    from a linked EC2-Classic instance. For more information, see ClassicLink in the Amazon Elastic Compute Cloud
    User Guide. You must specify a VPC ID in the request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        vpc_id(Text, optional): The ID of the VPC. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.ec2.vpc_classic_link_dns_support.present:
                - name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.vpc_classic_link_dns_support.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.ec2.describe_vpc_classic_link_dns_support(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.enable_vpc_classic_link_dns_support(
                ctx,
                
                
                **{"VpcId": vpc_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.ec2.describe_vpc_classic_link_dns_support(name)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def absent(hub, ctx, name: Text, vpc_id: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when
    addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more
    information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide. You must specify a VPC ID in the
    request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        vpc_id(Text, optional): The ID of the VPC. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.ec2.vpc_classic_link_dns_support.absent:
                - name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.vpc_classic_link_dns_support.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.ec2.describe_vpc_classic_link_dns_support(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.disable_vpc_classic_link_dns_support(
                ctx,
                
                
                **{"VpcId": vpc_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.ec2.describe_vpc_classic_link_dns_support(name)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def describe(hub, ctx)  -> Dict[str, Dict[str, Any]]:
    r'''
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function

    
    Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked
    EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's
    linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed
    from a linked EC2-Classic instance. For more information, see ClassicLink in the Amazon Elastic Compute Cloud
    User Guide.


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe aws_auto.ec2.vpc_classic_link_dns_support
    '''

    
    result = {}

    ret = await hub.exec.boto3.client.ec2.describe_vpc_classic_link_dns_support(ctx)
    if not ret["status"]:
        hub.log.debug(f"Could not describe vpc_classic_link_dns_support {ret['comment']}")
        return result

    for vpc_classic_link_dns_support in ret["ret"]["TODO"]:
        new_vpc_classic_link_dns_support = [
                {"MaxResults": max_results, "NextToken": next_token, "VpcIds": vpc_ids}
        ]
        result[vpc_classic_link_dns_support["vpc_classic_link_dns_supportId"]] = {"aws_auto.ec2.vpc_classic_link_dns_support.present": new_vpc_classic_link_dns_support}

        for i, data in enumerate(vpc_classic_link_dns_support.get("", ())):
            sub_vpc_classic_link_dns_support = copy.deepcopy(new_vpc_classic_link_dns_support)

            # TODO check for subresouruces
            sub_vpc_classic_link_dns_support.append({})
            sub_vpc_classic_link_dns_support.append({"name": "TODOs"})
            result[f"TODOs-{i}"] = {"aws_auto.ec2.vpc_classic_link_dns_support.present": sub_vpc_classic_link_dns_support}

    return result


