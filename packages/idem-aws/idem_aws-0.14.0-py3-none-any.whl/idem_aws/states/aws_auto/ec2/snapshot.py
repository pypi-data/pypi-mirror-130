"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.ec2.copy_snapshot
hub.exec.boto3.client.ec2.create_snapshots
hub.exec.boto3.client.ec2.delete_snapshot
hub.exec.boto3.client.ec2.describe_snapshots
hub.exec.boto3.client.ec2.import_snapshot
resource = hub.tool.boto3.resource.create(ctx, "ec2", "Snapshot", name)
hub.tool.boto3.resource.exec(resource, copy, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, create_tags, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, describe_attribute, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, modify_attribute, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, reset_attribute, *args, **kwargs)
"""



import copy
from typing import *
import dict_tools.differ as differ

async def present(hub, ctx, name: Text, instance_specification: Dict, description: Text = None, outpost_arn: Text = None, tag_specifications: List = None, copy_tags_from_source: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by
    specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the
    instance. Boot volumes can be excluded by changing the parameters.  You can create multi-volume snapshots of
    instances in a Region and instances on an Outpost. If you create snapshots from an instance in a Region, the
    snapshots must be stored in the same Region as the instance. If you create snapshots from an instance on an
    Outpost, the snapshots can be stored on the same Outpost as the instance, or in the Region for that Outpost.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        description(Text, optional):  A description propagated to every snapshot specified by the instance. Defaults to None.
        instance_specification(Dict): The instance to specify which volumes should be included in the snapshots.
        outpost_arn(Text, optional): The Amazon Resource Name (ARN) of the Outpost on which to create the local snapshots.   To
            create snapshots from an instance in a Region, omit this parameter. The snapshots are created in
            the same Region as the instance.   To create snapshots from an instance on an Outpost and store
            the snapshots in the Region, omit this parameter. The snapshots are created in the Region for
            the Outpost.   To create snapshots from an instance on an Outpost and store the snapshots on an
            Outpost, specify the ARN of the destination Outpost. The snapshots must be created on the same
            Outpost as the instance.   For more information, see  Create multi-volume local snapshots from
            instances on an Outpost in the Amazon Elastic Compute Cloud User Guide. Defaults to None.
        tag_specifications(List, optional): Tags to apply to every snapshot specified by the instance. Defaults to None.
        copy_tags_from_source(Text, optional): Copies the tags from the specified volume to corresponding snapshot. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.ec2.snapshot.present:
                - name: value
                - instance_specification: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.snapshot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "ec2", "Snapshot", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.create_snapshots(
                ctx,
                DryRun=ctx.test,
                
                **{"Description": description, "InstanceSpecification": instance_specification, "OutpostArn": outpost_arn, "TagSpecifications": tag_specifications, "CopyTagsFromSource": copy_tags_from_source}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def absent(hub, ctx, name: Text, snapshot_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified snapshot. When you make periodic snapshots of a volume, the snapshots are incremental, and
    only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you
    delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior
    snapshots have been deleted, all active snapshots will have access to all the information needed to restore the
    volume. You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must
    first de-register the AMI before you can delete the snapshot. For more information, see Delete an Amazon EBS
    snapshot in the Amazon Elastic Compute Cloud User Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        snapshot_id(Text): The ID of the EBS snapshot.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.ec2.snapshot.absent:
                - name: value
                - snapshot_id: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.ec2.snapshot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "ec2", "Snapshot", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.ec2.delete_snapshot(
                ctx,
                DryRun=ctx.test,
                
                **{"SnapshotId": snapshot_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def describe(hub, ctx)  -> Dict[str, Dict[str, Any]]:
    r'''
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function

    
    Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you. The
    snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned
    by other Amazon Web Services accounts for which you have explicit create volume permissions. The create volume
    permissions fall into the following categories:    public: The owner of the snapshot granted create volume
    permissions for the snapshot to the all group. All Amazon Web Services accounts have create volume permissions
    for these snapshots.    explicit: The owner of the snapshot granted create volume permissions to a specific
    Amazon Web Services account.    implicit: An Amazon Web Services account has implicit create volume permissions
    for all snapshots it owns.   The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot
    owners, or Amazon Web Services accounts with create volume permissions. If no options are specified, Amazon EC2
    returns all snapshots for which you have create volume permissions. If you specify one or more snapshot IDs,
    only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is
    returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned
    results. If you specify one or more snapshot owners using the OwnerIds option, only snapshots from the specified
    owners and for which you have access are returned. The results can include the Amazon Web Services account IDs
    of the specified owners, amazon for snapshots owned by Amazon, or self for snapshots that you own. If you
    specify a list of restorable users, only snapshots with create snapshot permissions for those users are
    returned. You can specify Amazon Web Services account IDs (if you own the snapshots), self for snapshots for
    which you own or have explicit permissions, or all for public snapshots. If you are describing a long list of
    snapshots, we recommend that you paginate the output to make the list more manageable. The MaxResults parameter
    sets the maximum number of results returned in a single page. If the list of results exceeds your MaxResults
    value, then that number of results is returned along with a NextToken value that can be passed to a subsequent
    DescribeSnapshots request to retrieve the remaining results. To get the state of fast snapshot restores for a
    snapshot, use DescribeFastSnapshotRestores. For more information about EBS snapshots, see Amazon EBS snapshots
    in the Amazon Elastic Compute Cloud User Guide.


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe aws_auto.ec2.snapshot
    '''

    
    result = {}

    ret = await hub.exec.boto3.client.ec2.describe_snapshots(ctx)
    if not ret["status"]:
        hub.log.debug(f"Could not describe snapshot {ret['comment']}")
        return result

    for snapshot in ret["ret"]["TODO"]:
        new_snapshot = [
                {"Filters": filters, "MaxResults": max_results, "NextToken": next_token, "OwnerIds": owner_ids, "RestorableByUserIds": restorable_by_user_ids, "SnapshotIds": snapshot_ids}
        ]
        result[snapshot["snapshotId"]] = {"aws_auto.ec2.snapshot.present": new_snapshot}

        for i, data in enumerate(snapshot.get("", ())):
            sub_snapshot = copy.deepcopy(new_snapshot)

            # TODO check for subresouruces
            sub_snapshot.append({})
            sub_snapshot.append({"name": "TODOs"})
            result[f"TODOs-{i}"] = {"aws_auto.ec2.snapshot.present": sub_snapshot}

    return result


