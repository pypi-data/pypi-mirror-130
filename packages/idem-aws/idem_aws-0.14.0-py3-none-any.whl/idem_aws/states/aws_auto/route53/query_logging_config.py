"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.route53.create_query_logging_config
hub.exec.boto3.client.route53.delete_query_logging_config
hub.exec.boto3.client.route53.get_query_logging_config
hub.exec.boto3.client.route53.list_query_logging_configs
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, hosted_zone_id: Text, cloud_watch_logs_log_group_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a configuration for DNS query logging. After you create a query logging configuration, Amazon Route 53
    begins to publish log data to an Amazon CloudWatch Logs log group. DNS query logs contain information about the
    queries that Route 53 receives for a specified public hosted zone, such as the following:   Route 53 edge
    location that responded to the DNS query   Domain or subdomain that was requested   DNS record type, such as A
    or AAAA   DNS response code, such as NoError or ServFail     Log Group and Resource Policy  Before you create a
    query logging configuration, perform the following operations.  If you create a query logging configuration
    using the Route 53 console, Route 53 performs these operations automatically.    Create a CloudWatch Logs log
    group, and make note of the ARN, which you specify when you create a query logging configuration. Note the
    following:   You must create the log group in the us-east-1 region.   You must use the same Amazon Web Services
    account to create the log group and the hosted zone that you want to configure query logging for.   When you
    create log groups for query logging, we recommend that you use a consistent prefix, for example:
    /aws/route53/hosted zone name   In the next step, you'll create a resource policy, which controls access to one
    or more log groups and the associated Amazon Web Services resources, such as Route 53 hosted zones. There's a
    limit on the number of resource policies that you can create, so we recommend that you use a consistent prefix
    so you can use the same resource policy for all the log groups that you create for query logging.     Create a
    CloudWatch Logs resource policy, and give it the permissions that Route 53 needs to create log streams and to
    send query logs to log streams. For the value of Resource, specify the ARN for the log group that you created in
    the previous step. To use the same resource policy for all the CloudWatch Logs log groups that you created for
    query logging configurations, replace the hosted zone name with *, for example:  arn:aws:logs:us-
    east-1:123412341234:log-group:/aws/route53/*   You can't use the CloudWatch console to create or edit a resource
    policy. You must use the CloudWatch API, one of the Amazon Web Services SDKs, or the CLI.     Log Streams and
    Edge Locations  When Route 53 finishes creating the configuration for DNS query logging, it does the following:
    Creates a log stream for an edge location the first time that the edge location responds to DNS queries for the
    specified hosted zone. That log stream is used to log all queries that Route 53 responds to for that edge
    location.   Begins to send query logs to the applicable log stream.   The name of each log stream is in the
    following format:   hosted zone ID/edge location code   The edge location code is a three-letter code and an
    arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the
    International Air Transport Association airport code for an airport near the edge location. (These abbreviations
    might change in the future.) For a list of edge locations, see "The Route 53 Global Network" on the Route 53
    Product Details page.  Queries That Are Logged  Query logs contain only the queries that DNS resolvers forward
    to Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load
    balancer for example.com), the resolver will continue to return the cached response. It doesn't forward another
    query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS
    queries are submitted for a resource record set, and depending on the TTL for that resource record set, query
    logs might contain information about only one query out of every several thousand queries that are submitted to
    DNS. For more information about how DNS works, see Routing Internet Traffic to Your Website or Web Application
    in the Amazon Route 53 Developer Guide.  Log File Format  For a list of the values in each query log and the
    format of each value, see Logging DNS Queries in the Amazon Route 53 Developer Guide.  Pricing  For information
    about charges for query logs, see Amazon CloudWatch Pricing.  How to Stop Logging  If you want Route 53 to stop
    sending query logs to CloudWatch Logs, delete the query logging configuration. For more information, see
    DeleteQueryLoggingConfig.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        hosted_zone_id(Text): The ID of the hosted zone that you want to log queries for. You can log queries only for public
            hosted zones.
        cloud_watch_logs_log_group_arn(Text): The Amazon Resource Name (ARN) for the log group that you want to Amazon Route 53 to send query
            logs to. This is the format of the ARN: arn:aws:logs:region:account-id:log-group:log_group_name
            To get the ARN for a log group, you can use the CloudWatch console, the DescribeLogGroups API
            action, the describe-log-groups command, or the applicable command in one of the Amazon Web
            Services SDKs.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.route53.query_logging_config.present:
                - name: value
                - hosted_zone_id: value
                - cloud_watch_logs_log_group_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.route53.query_logging_config.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.route53.get_query_logging_config(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.route53.create_query_logging_config(
                ctx,
                
                
                **{"HostedZoneId": hosted_zone_id, "CloudWatchLogsLogGroupArn": cloud_watch_logs_log_group_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.route53.get_query_logging_config(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, id_: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a configuration for DNS query logging. If you delete a configuration, Amazon Route 53 stops sending
    query logs to CloudWatch Logs. Route 53 doesn't delete any logs that are already in CloudWatch Logs. For more
    information about DNS query logs, see CreateQueryLoggingConfig.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        id_(Text): The ID of the configuration that you want to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.route53.query_logging_config.absent:
                - name: value
                - id_: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.route53.query_logging_config.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.route53.get_query_logging_config(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.route53.delete_query_logging_config(
                ctx,
                
                
                **{"Id": id_}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.route53.get_query_logging_config(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

