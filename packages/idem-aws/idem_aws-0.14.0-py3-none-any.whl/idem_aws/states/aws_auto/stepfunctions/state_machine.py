"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.stepfunctions.create_state_machine
hub.exec.boto3.client.stepfunctions.delete_state_machine
hub.exec.boto3.client.stepfunctions.describe_state_machine
hub.exec.boto3.client.stepfunctions.list_state_machines
hub.exec.boto3.client.stepfunctions.update_state_machine
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, definition: Text, role_arn: Text, type_: Text = None, logging_configuration: Dict = None, tags: List = None, tracing_configuration: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a state machine. A state machine consists of a collection of states that can do work (Task states),
    determine to which states to transition next (Choice states), stop an execution with an error (Fail states), and
    so on. State machines are specified using a JSON-based, structured language. For more information, see Amazon
    States Language in the AWS Step Functions User Guide.  This operation is eventually consistent. The results are
    best effort and may not reflect very recent updates and changes.    CreateStateMachine is an idempotent API.
    Subsequent requests wonâ€™t create a duplicate resource if it was already created. CreateStateMachine's
    idempotency check is based on the state machine name, definition, type, LoggingConfiguration and
    TracingConfiguration. If a following request has a different roleArn or tags, Step Functions will ignore these
    differences and treat it as an idempotent request of the previous. In this case, roleArn and tags will not be
    updated, even if they are different.

    Args:
        name(Text): The name of the state machine.  A name must not contain:   white space   brackets < > { } [ ]
            wildcard characters ? *    special characters " # % \ ^ | ~ ` $ & , ; : /    control characters
            (U+0000-001F, U+007F-009F)   To enable logging with CloudWatch Logs, the name should only
            contain 0-9, A-Z, a-z, - and _.
        definition(Text): The Amazon States Language definition of the state machine. See Amazon States Language.
        role_arn(Text): The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
        type_(Text, optional): Determines whether a Standard or Express state machine is created. The default is STANDARD. You
            cannot update the type of a state machine once it has been created. Defaults to None.
        logging_configuration(Dict, optional): Defines what execution history events are logged and where they are logged.  By default, the
            level is set to OFF. For more information see Log Levels in the AWS Step Functions User Guide. Defaults to None.
        tags(List, optional): Tags to be added when creating a state machine. An array of key-value pairs. For more
            information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide,
            and Controlling Access Using IAM Tags. Tags may only contain Unicode letters, digits, white
            space, or these symbols: _ . : / = + - @. Defaults to None.
        tracing_configuration(Dict, optional): Selects whether AWS X-Ray tracing is enabled. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.stepfunctions.state_machine.present:
                - name: value
                - definition: value
                - role_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)

    
    before = await hub.exec.boto3.client.stepfunctions.describe_state_machine(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.stepfunctions.create_state_machine(
                ctx,
                
                
                **{"Name": name, "definition": definition, "roleArn": role_arn, "type": type_, "loggingConfiguration": logging_configuration, "tags": tags, "tracingConfiguration": tracing_configuration}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.stepfunctions.describe_state_machine(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, state_machine_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a state machine. This is an asynchronous operation: It sets the state machine's status to DELETING and
    begins the deletion process.   For EXPRESSstate machines, the deletion will happen eventually (usually less than
    a minute). Running executions may emit logs after DeleteStateMachine API is called.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        state_machine_arn(Text): The Amazon Resource Name (ARN) of the state machine to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.stepfunctions.state_machine.absent:
                - name: value
                - state_machine_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.stepfunctions.state_machine.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.stepfunctions.describe_state_machine(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.stepfunctions.delete_state_machine(
                ctx,
                
                
                **{"stateMachineArn": state_machine_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.stepfunctions.describe_state_machine(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

