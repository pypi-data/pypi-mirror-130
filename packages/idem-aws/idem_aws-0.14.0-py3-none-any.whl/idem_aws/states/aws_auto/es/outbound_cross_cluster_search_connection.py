"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.es.create_outbound_cross_cluster_search_connection
hub.exec.boto3.client.es.delete_outbound_cross_cluster_search_connection
hub.exec.boto3.client.es.describe_outbound_cross_cluster_search_connections
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, source_domain_info: Dict, destination_domain_info: Dict, connection_alias: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new cross-cluster search connection from a source domain to a destination domain.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        source_domain_info(Dict): Specifies the DomainInformation for the source Elasticsearch domain.
        destination_domain_info(Dict): Specifies the DomainInformation for the destination Elasticsearch domain.
        connection_alias(Text): Specifies the connection alias that will be used by the customer for this connection.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.es.outbound_cross_cluster_search_connection.present:
                - name: value
                - source_domain_info: value
                - destination_domain_info: value
                - connection_alias: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.es.outbound_cross_cluster_search_connection.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.es.describe_outbound_cross_cluster_search_connections(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.es.create_outbound_cross_cluster_search_connection(
                ctx,
                
                
                **{"SourceDomainInfo": source_domain_info, "DestinationDomainInfo": destination_domain_info, "ConnectionAlias": connection_alias}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.es.describe_outbound_cross_cluster_search_connections(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, cross_cluster_search_connection_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Allows the source domain owner to delete an existing outbound cross-cluster search connection.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        cross_cluster_search_connection_id(Text): The id of the outbound connection that you want to permanently delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.es.outbound_cross_cluster_search_connection.absent:
                - name: value
                - cross_cluster_search_connection_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.es.outbound_cross_cluster_search_connection.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.es.describe_outbound_cross_cluster_search_connections(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.es.delete_outbound_cross_cluster_search_connection(
                ctx,
                
                
                **{"CrossClusterSearchConnectionId": cross_cluster_search_connection_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.es.describe_outbound_cross_cluster_search_connections(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

