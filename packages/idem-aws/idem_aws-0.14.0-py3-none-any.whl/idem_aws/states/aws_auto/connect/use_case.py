"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.connect.create_use_case
hub.exec.boto3.client.connect.delete_use_case
hub.exec.boto3.client.connect.list_use_cases
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, instance_id: Text, integration_association_id: Text, use_case_type: Text, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a use case for an AppIntegration association.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        instance_id(Text): The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the
            instance.
        integration_association_id(Text): The identifier for the AppIntegration association.
        use_case_type(Text): The type of use case to associate to the AppIntegration association. Each AppIntegration
            association can have only one of each use case type.
        tags(Dict, optional): One or more tags. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.connect.use_case.present:
                - name: value
                - instance_id: value
                - integration_association_id: value
                - use_case_type: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.connect.use_case.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.connect.list_use_cases(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.connect.create_use_case(
                ctx,
                
                
                **{"InstanceId": instance_id, "IntegrationAssociationId": integration_association_id, "UseCaseType": use_case_type, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.connect.list_use_cases(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, instance_id: Text, integration_association_id: Text, use_case_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a use case from an AppIntegration association.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        instance_id(Text): The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the
            instance.
        integration_association_id(Text): The identifier for the AppIntegration association.
        use_case_id(Text): The identifier for the use case.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.connect.use_case.absent:
                - name: value
                - instance_id: value
                - integration_association_id: value
                - use_case_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.connect.use_case.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.connect.list_use_cases(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.connect.delete_use_case(
                ctx,
                
                
                **{"InstanceId": instance_id, "IntegrationAssociationId": integration_association_id, "UseCaseId": use_case_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.connect.list_use_cases(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

