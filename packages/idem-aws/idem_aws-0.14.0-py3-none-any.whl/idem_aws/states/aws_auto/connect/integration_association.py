"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.connect.create_integration_association
hub.exec.boto3.client.connect.delete_integration_association
hub.exec.boto3.client.connect.list_integration_associations
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, instance_id: Text, integration_type: Text, integration_arn: Text, source_application_url: Text, source_application_name: Text, source_type: Text, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Create an AppIntegration association with an Amazon Connect instance.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        instance_id(Text): The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the
            instance.
        integration_type(Text): The type of information to be ingested.
        integration_arn(Text): The Amazon Resource Name (ARN) of the integration.
        source_application_url(Text): The URL for the external application.
        source_application_name(Text): The name of the external application.
        source_type(Text): The type of the data source.
        tags(Dict, optional): One or more tags. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.connect.integration_association.present:
                - name: value
                - instance_id: value
                - integration_type: value
                - integration_arn: value
                - source_application_url: value
                - source_application_name: value
                - source_type: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.connect.integration_association.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.connect.list_integration_associations(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.connect.create_integration_association(
                ctx,
                
                
                **{"InstanceId": instance_id, "IntegrationType": integration_type, "IntegrationArn": integration_arn, "SourceApplicationUrl": source_application_url, "SourceApplicationName": source_application_name, "SourceType": source_type, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.connect.list_integration_associations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, instance_id: Text, integration_association_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an AppIntegration association from an Amazon Connect instance. The association must not have any use
    cases associated with it.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        instance_id(Text): The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the
            instance.
        integration_association_id(Text): The identifier for the AppIntegration association.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.connect.integration_association.absent:
                - name: value
                - instance_id: value
                - integration_association_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.connect.integration_association.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.connect.list_integration_associations(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.connect.delete_integration_association(
                ctx,
                
                
                **{"InstanceId": instance_id, "IntegrationAssociationId": integration_association_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.connect.list_integration_associations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

