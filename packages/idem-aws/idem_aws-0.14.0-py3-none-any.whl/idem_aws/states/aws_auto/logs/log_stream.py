"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.logs.create_log_stream
hub.exec.boto3.client.logs.delete_log_stream
hub.exec.boto3.client.logs.describe_log_streams
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, log_group_name: Text, log_stream_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a log stream for the specified log group. A log stream is a sequence of log events that originate from a
    single source, such as an application instance or a resource that is being monitored. There is no limit on the
    number of log streams that you can create for a log group. There is a limit of 50 TPS on CreateLogStream
    operations, after which transactions are throttled. You must use the following guidelines when naming a log
    stream:   Log stream names must be unique within the log group.   Log stream names can be between 1 and 512
    characters long.   The ':' (colon) and '*' (asterisk) characters are not allowed.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        log_group_name(Text): The name of the log group.
        log_stream_name(Text): The name of the log stream.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.logs.log_stream.present:
                - name: value
                - log_group_name: value
                - log_stream_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.logs.log_stream.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.logs.describe_log_streams(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.logs.create_log_stream(
                ctx,
                
                
                **{"logGroupName": log_group_name, "logStreamName": log_stream_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.logs.describe_log_streams(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, log_group_name: Text, log_stream_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified log stream and permanently deletes all the archived log events associated with the log
    stream.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        log_group_name(Text): The name of the log group.
        log_stream_name(Text): The name of the log stream.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.logs.log_stream.absent:
                - name: value
                - log_group_name: value
                - log_stream_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.logs.log_stream.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.logs.describe_log_streams(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.logs.delete_log_stream(
                ctx,
                
                
                **{"logGroupName": log_group_name, "logStreamName": log_stream_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.logs.describe_log_streams(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

