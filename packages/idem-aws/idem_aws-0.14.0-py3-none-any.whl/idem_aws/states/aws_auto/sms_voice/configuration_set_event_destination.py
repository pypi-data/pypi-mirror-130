"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.sms_voice.create_configuration_set_event_destination
hub.exec.boto3.client.sms_voice.delete_configuration_set_event_destination
hub.exec.boto3.client.sms_voice.get_configuration_set_event_destinations
hub.exec.boto3.client.sms_voice.update_configuration_set_event_destination
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, configuration_set_name: Text, event_destination: Dict = None, event_destination_name: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Create a new event destination in a configuration set.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        configuration_set_name(Text): ConfigurationSetName.
        event_destination(Dict, optional): An object that defines a single event destination. Defaults to None.
        event_destination_name(Text, optional): A name that identifies the event destination. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.sms_voice.configuration_set_event_destination.present:
                - name: value
                - configuration_set_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sms_voice.configuration_set_event_destination.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.sms_voice.get_configuration_set_event_destinations(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.sms_voice.create_configuration_set_event_destination(
                ctx,
                
                
                **{"ConfigurationSetName": configuration_set_name, "EventDestination": event_destination, "EventDestinationName": event_destination_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.sms_voice.get_configuration_set_event_destinations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, configuration_set_name: Text, event_destination_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an event destination in a configuration set.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        configuration_set_name(Text): ConfigurationSetName.
        event_destination_name(Text): EventDestinationName.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.sms_voice.configuration_set_event_destination.absent:
                - name: value
                - configuration_set_name: value
                - event_destination_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sms_voice.configuration_set_event_destination.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.sms_voice.get_configuration_set_event_destinations(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.sms_voice.delete_configuration_set_event_destination(
                ctx,
                
                
                **{"ConfigurationSetName": configuration_set_name, "EventDestinationName": event_destination_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.sms_voice.get_configuration_set_event_destinations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

