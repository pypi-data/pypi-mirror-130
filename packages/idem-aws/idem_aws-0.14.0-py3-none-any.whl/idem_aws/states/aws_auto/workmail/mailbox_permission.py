"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.workmail.delete_mailbox_permissions
hub.exec.boto3.client.workmail.list_mailbox_permissions
hub.exec.boto3.client.workmail.put_mailbox_permissions
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, organization_id: Text, entity_id: Text, grantee_id: Text, permission_values: List)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Sets permissions for a user, group, or resource. This replaces any pre-existing permissions.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        organization_id(Text): The identifier of the organization under which the user, group, or resource exists.
        entity_id(Text): The identifier of the user, group, or resource for which to update mailbox permissions.
        grantee_id(Text): The identifier of the user, group, or resource to which to grant the permissions.
        permission_values(List): The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of
            the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to
            send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical
            sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective
            of other folder-level permissions set on the mailbox.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.workmail.mailbox_permission.present:
                - name: value
                - organization_id: value
                - entity_id: value
                - grantee_id: value
                - permission_values: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.workmail.mailbox_permission.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.workmail.list_mailbox_permissions(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.workmail.put_mailbox_permissions(
                ctx,
                
                
                **{"OrganizationId": organization_id, "EntityId": entity_id, "GranteeId": grantee_id, "PermissionValues": permission_values}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.workmail.list_mailbox_permissions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, organization_id: Text, entity_id: Text, grantee_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes permissions granted to a member (user or group).

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        organization_id(Text): The identifier of the organization under which the member (user or group) exists.
        entity_id(Text): The identifier of the member (user or group) that owns the mailbox.
        grantee_id(Text): The identifier of the member (user or group) for which to delete granted permissions.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.workmail.mailbox_permission.absent:
                - name: value
                - organization_id: value
                - entity_id: value
                - grantee_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.workmail.mailbox_permission.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.workmail.list_mailbox_permissions(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.workmail.delete_mailbox_permissions(
                ctx,
                
                
                **{"OrganizationId": organization_id, "EntityId": entity_id, "GranteeId": grantee_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.workmail.list_mailbox_permissions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

