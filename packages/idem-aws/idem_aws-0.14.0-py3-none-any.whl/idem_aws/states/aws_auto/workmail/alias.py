"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.workmail.create_alias
hub.exec.boto3.client.workmail.delete_alias
hub.exec.boto3.client.workmail.list_aliases
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, organization_id: Text, entity_id: Text, alias: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Adds an alias to the set of a given member (user or group) of Amazon WorkMail.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        organization_id(Text): The organization under which the member (user or group) exists.
        entity_id(Text): The member (user or group) to which this alias is added.
        alias(Text): The alias to add to the member set.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.workmail.alias.present:
                - name: value
                - organization_id: value
                - entity_id: value
                - alias: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.workmail.alias.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.workmail.list_aliases(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.workmail.create_alias(
                ctx,
                
                
                **{"OrganizationId": organization_id, "EntityId": entity_id, "Alias": alias}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.workmail.list_aliases(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, organization_id: Text, entity_id: Text, alias: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Remove one or more specified aliases from a set of aliases for a given user.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        organization_id(Text): The identifier for the organization under which the user exists.
        entity_id(Text): The identifier for the member (user or group) from which to have the aliases removed.
        alias(Text): The aliases to be removed from the user's set of aliases. Duplicate entries in the list are
            collapsed into single entries (the list is transformed into a set).

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.workmail.alias.absent:
                - name: value
                - organization_id: value
                - entity_id: value
                - alias: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.workmail.alias.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.workmail.list_aliases(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.workmail.delete_alias(
                ctx,
                
                
                **{"OrganizationId": organization_id, "EntityId": entity_id, "Alias": alias}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.workmail.list_aliases(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

