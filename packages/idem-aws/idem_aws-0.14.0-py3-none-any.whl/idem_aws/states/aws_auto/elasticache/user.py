"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.elasticache.create_user
hub.exec.boto3.client.elasticache.delete_user
hub.exec.boto3.client.elasticache.describe_users
hub.exec.boto3.client.elasticache.modify_user
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, user_id: Text, user_name: Text, engine: Text, access_string: Text, passwords: List = None, no_password_required: bool = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    For Redis engine version 6.x onwards: Creates a Redis user. For more information, see Using Role Based Access
    Control (RBAC).

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        user_id(Text): The ID of the user.
        user_name(Text): The username of the user.
        engine(Text): The current supported value is Redis.
        passwords(List, optional): Passwords used for this user. You can create up to two passwords for each user. Defaults to None.
        access_string(Text): Access permissions string used for this user.
        no_password_required(bool, optional): Indicates a password is not required for this user. Defaults to None.
        tags(List, optional): A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be
            accompanied by a tag value, although null is accepted. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.elasticache.user.present:
                - name: value
                - user_id: value
                - user_name: value
                - engine: value
                - access_string: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.elasticache.user.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.elasticache.describe_users(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.elasticache.create_user(
                ctx,
                
                
                **{"UserId": user_id, "UserName": user_name, "Engine": engine, "Passwords": passwords, "AccessString": access_string, "NoPasswordRequired": no_password_required, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.elasticache.describe_users(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, user_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    For Redis engine version 6.x onwards: Deletes a user. The user will be removed from all user groups and in turn
    removed from all replication groups. For more information, see Using Role Based Access Control (RBAC).

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        user_id(Text): The ID of the user.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.elasticache.user.absent:
                - name: value
                - user_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.elasticache.user.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.elasticache.describe_users(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.elasticache.delete_user(
                ctx,
                
                
                **{"UserId": user_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.elasticache.describe_users(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

