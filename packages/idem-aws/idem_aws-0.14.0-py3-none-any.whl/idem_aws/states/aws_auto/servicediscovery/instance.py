"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.servicediscovery.deregister_instance
hub.exec.boto3.client.servicediscovery.discover_instances
hub.exec.boto3.client.servicediscovery.get_instance
hub.exec.boto3.client.servicediscovery.list_instances
hub.exec.boto3.client.servicediscovery.register_instance
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, service_id: Text, instance_id: Text, attributes: Dict, creator_request_id: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates or updates one or more records and, optionally, creates a health check based on the settings in a
    specified service. When you submit a RegisterInstance request, the following occurs:   For each DNS record that
    you define in the service that's specified by ServiceId, a record is created or updated in the hosted zone
    that's associated with the corresponding namespace.   If the service includes HealthCheckConfig, a health check
    is created based on the settings in the health check configuration.   The health check, if any, is associated
    with each of the new or updated records.    One RegisterInstance request must complete before you can submit
    another request and specify the same service ID and instance ID.  For more information, see CreateService. When
    Cloud Map receives a DNS query for the specified DNS name, it returns the applicable value:    If the health
    check is healthy: returns all the records    If the health check is unhealthy: returns the applicable value for
    the last healthy instance    If you didn't specify a health check configuration: returns all the records   For
    the current quota on the number of instances that you can register using the same namespace and using the same
    service, see Cloud Map quotas in the Cloud Map Developer Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        service_id(Text): The ID of the service that you want to use for settings for the instance.
        instance_id(Text): An identifier that you want to associate with the instance. Note the following:   If the service
            that's specified by ServiceId includes settings for an SRV record, the value of InstanceId is
            automatically included as part of the value for the SRV record. For more information, see
            DnsRecord > Type.   You can use this value to update an existing instance.   To register a new
            instance, you must specify a value that's unique among instances that you register by using the
            same service.    If you specify an existing InstanceId and ServiceId, Cloud Map updates the
            existing DNS records, if any. If there's also an existing health check, Cloud Map deletes the
            old health check and creates a new one.   The health check isn't deleted immediately, so it will
            still appear for a while if you submit a ListHealthChecks request, for example.
        creator_request_id(Text, optional): A unique string that identifies the request and that allows failed RegisterInstance requests to
            be retried without the risk of executing the operation twice. You must use a unique
            CreatorRequestId string every time you submit a RegisterInstance request if you're registering
            additional instances for the same namespace and service. CreatorRequestId can be any unique
            string (for example, a date/time stamp). Defaults to None.
        attributes(Dict): A string map that contains the following information for the service that you specify in
            ServiceId:   The attributes that apply to the records that are defined in the service.    For
            each attribute, the applicable value.   Supported attribute keys include the following:
            AWS_ALIAS_DNS_NAME  If you want Cloud Map to create an Amazon Route 53 alias record that routes
            traffic to an Elastic Load Balancing load balancer, specify the DNS name that's associated with
            the load balancer. For information about how to get the DNS name, see "DNSName" in the topic
            AliasTarget in the Route 53 API Reference. Note the following:   The configuration for the
            service that's specified by ServiceId must include settings for an A record, an AAAA record, or
            both.   In the service that's specified by ServiceId, the value of RoutingPolicy must be
            WEIGHTED.   If the service that's specified by ServiceId includes HealthCheckConfig settings,
            Cloud Map will create the Route 53 health check, but it doesn't associate the health check with
            the alias record.   Auto naming currently doesn't support creating alias records that route
            traffic to Amazon Web Services resources other than Elastic Load Balancing load balancers.   If
            you specify a value for AWS_ALIAS_DNS_NAME, don't specify values for any of the AWS_INSTANCE
            attributes.    AWS_EC2_INSTANCE_ID   HTTP namespaces only. The Amazon EC2 instance ID for the
            instance. If the AWS_EC2_INSTANCE_ID attribute is specified, then the only other attribute that
            can be specified is AWS_INIT_HEALTH_STATUS. When the AWS_EC2_INSTANCE_ID attribute is specified,
            then the AWS_INSTANCE_IPV4 attribute will be filled out with the primary private IPv4 address.
            AWS_INIT_HEALTH_STATUS  If the service configuration includes HealthCheckCustomConfig, you can
            optionally use AWS_INIT_HEALTH_STATUS to specify the initial status of the custom health check,
            HEALTHY or UNHEALTHY. If you don't specify a value for AWS_INIT_HEALTH_STATUS, the initial
            status is HEALTHY.  AWS_INSTANCE_CNAME  If the service configuration includes a CNAME record,
            the domain name that you want Route 53 to return in response to DNS queries (for example,
            example.com). This value is required if the service specified by ServiceId includes settings for
            an CNAME record.  AWS_INSTANCE_IPV4  If the service configuration includes an A record, the IPv4
            address that you want Route 53 to return in response to DNS queries (for example, 192.0.2.44).
            This value is required if the service specified by ServiceId includes settings for an A record.
            If the service includes settings for an SRV record, you must specify a value for
            AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_IPV6  If the service configuration
            includes an AAAA record, the IPv6 address that you want Route 53 to return in response to DNS
            queries (for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345). This value is required if the
            service specified by ServiceId includes settings for an AAAA record. If the service includes
            settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6,
            or both.  AWS_INSTANCE_PORT  If the service includes an SRV record, the value that you want
            Route 53 to return for the port. If the service includes HealthCheckConfig, the port on the
            endpoint that you want Route 53 to send requests to.  This value is required if you specified
            settings for an SRV record or a Route 53 health check when you created the service.  Custom
            attributes  You can add up to 30 custom attributes. For each key-value pair, the maximum length
            of the attribute name is 255 characters, and the maximum length of the attribute value is 1,024
            characters. The total size of all provided attributes (sum of all keys and values) must not
            exceed 5,000 characters.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.servicediscovery.instance.present:
                - name: value
                - service_id: value
                - instance_id: value
                - attributes: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.servicediscovery.instance.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.servicediscovery.get_instance(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.servicediscovery.register_instance(
                ctx,
                
                
                **{"ServiceId": service_id, "InstanceId": instance_id, "CreatorRequestId": creator_request_id, "Attributes": attributes}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.servicediscovery.get_instance(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, service_id: Text, instance_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the Amazon Route 53 DNS records and health check, if any, that Cloud Map created for the specified
    instance.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        service_id(Text): The ID of the service that the instance is associated with.
        instance_id(Text): The value that you specified for Id in the RegisterInstance request.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.servicediscovery.instance.absent:
                - name: value
                - service_id: value
                - instance_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.servicediscovery.instance.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.servicediscovery.get_instance(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.servicediscovery.deregister_instance(
                ctx,
                
                
                **{"ServiceId": service_id, "InstanceId": instance_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.servicediscovery.get_instance(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

