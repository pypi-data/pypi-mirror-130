"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.quicksight.create_folder
hub.exec.boto3.client.quicksight.delete_folder
hub.exec.boto3.client.quicksight.describe_folder
hub.exec.boto3.client.quicksight.list_folders
hub.exec.boto3.client.quicksight.search_folders
hub.exec.boto3.client.quicksight.update_folder
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, aws_account_id: Text, folder_id: Text, name: Text = None, folder_type: Text = None, parent_folder_arn: Text = None, permissions: List = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an empty shared folder.

    Args:
        name(Text, optional): The name of the folder. Defaults to None.
        aws_account_id(Text): The AWS Account ID.
        folder_id(Text): The folder ID.
        folder_type(Text, optional): The type of folder. By default, folderType is SHARED. Defaults to None.
        parent_folder_arn(Text, optional): The Amazon Resource Name (ARN) for the parent folder.  ParentFolderArn can be null. An empty
            parentFolderArn creates a root-level folder. Defaults to None.
        permissions(List, optional): A structure that describes the principals and the resource-level permissions of a folder. To
            specify no permissions, omit Permissions. Defaults to None.
        tags(List, optional): Tags for the folder. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.quicksight.folder.present:
                - aws_account_id: value
                - folder_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.quicksight.folder.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.quicksight.describe_folder(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.quicksight.create_folder(
                ctx,
                
                
                **{"Name": name, "AwsAccountId": aws_account_id, "FolderId": folder_id, "FolderType": folder_type, "ParentFolderArn": parent_folder_arn, "Permissions": permissions, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.quicksight.describe_folder(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, aws_account_id: Text, folder_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an empty folder.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        aws_account_id(Text): The AWS Account ID for the folder.
        folder_id(Text): The folder ID.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.quicksight.folder.absent:
                - name: value
                - aws_account_id: value
                - folder_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.quicksight.folder.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.quicksight.describe_folder(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.quicksight.delete_folder(
                ctx,
                
                
                **{"AwsAccountId": aws_account_id, "FolderId": folder_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.quicksight.describe_folder(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

