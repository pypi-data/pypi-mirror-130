"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.quicksight.create_group
hub.exec.boto3.client.quicksight.delete_group
hub.exec.boto3.client.quicksight.describe_group
hub.exec.boto3.client.quicksight.list_groups
hub.exec.boto3.client.quicksight.update_group
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, group_name: Text, aws_account_id: Text, namespace: Text, description: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an Amazon QuickSight group. The permissions resource is arn:aws:quicksight:us-east-1:<relevant-aws-
    account-id>:group/default/<group-name> . The response is a group object.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        group_name(Text): A name for the group that you want to create.
        description(Text, optional): A description for the group that you want to create. Defaults to None.
        aws_account_id(Text): The ID for the Amazon Web Services account; that the group is in. Currently, you use the ID for
            the Amazon Web Services account; that contains your Amazon QuickSight account.
        namespace(Text): The namespace. Currently, you should set this to default.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.quicksight.group.present:
                - name: value
                - group_name: value
                - aws_account_id: value
                - namespace: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.quicksight.group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.quicksight.describe_group(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.quicksight.create_group(
                ctx,
                
                
                **{"GroupName": group_name, "Description": description, "AwsAccountId": aws_account_id, "Namespace": namespace}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.quicksight.describe_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, group_name: Text, aws_account_id: Text, namespace: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Removes a user group from Amazon QuickSight.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        group_name(Text): The name of the group that you want to delete.
        aws_account_id(Text): The ID for the Amazon Web Services account; that the group is in. Currently, you use the ID for
            the Amazon Web Services account; that contains your Amazon QuickSight account.
        namespace(Text): The namespace. Currently, you should set this to default.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.quicksight.group.absent:
                - name: value
                - group_name: value
                - aws_account_id: value
                - namespace: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.quicksight.group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.quicksight.describe_group(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.quicksight.delete_group(
                ctx,
                
                
                **{"GroupName": group_name, "AwsAccountId": aws_account_id, "Namespace": namespace}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.quicksight.describe_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

