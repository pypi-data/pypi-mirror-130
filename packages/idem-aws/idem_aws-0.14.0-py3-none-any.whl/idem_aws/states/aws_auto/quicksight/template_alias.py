"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.quicksight.create_template_alias
hub.exec.boto3.client.quicksight.delete_template_alias
hub.exec.boto3.client.quicksight.describe_template_alias
hub.exec.boto3.client.quicksight.update_template_alias
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, aws_account_id: Text, template_id: Text, alias_name: Text, template_version_number: int)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a template alias for a template.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        aws_account_id(Text): The ID of the Amazon Web Services account; that contains the template that you creating an alias
            for.
        template_id(Text): An ID for the template.
        alias_name(Text): The name that you want to give to the template alias that you're creating. Don't start the alias
            name with the $ character. Alias names that start with $ are reserved by Amazon QuickSight.
        template_version_number(int): The version number of the template.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.quicksight.template_alias.present:
                - name: value
                - aws_account_id: value
                - template_id: value
                - alias_name: value
                - template_version_number: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.quicksight.template_alias.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.quicksight.describe_template_alias(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.quicksight.create_template_alias(
                ctx,
                
                
                **{"AwsAccountId": aws_account_id, "TemplateId": template_id, "AliasName": alias_name, "TemplateVersionNumber": template_version_number}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.quicksight.describe_template_alias(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, aws_account_id: Text, template_id: Text, alias_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the item that the specified template alias points to. If you provide a specific alias, you delete the
    version of the template that the alias points to.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        aws_account_id(Text): The ID of the Amazon Web Services account; that contains the item to delete.
        template_id(Text): The ID for the template that the specified alias is for.
        alias_name(Text): The name for the template alias. To delete a specific alias, you delete the version that the
            alias points to. You can specify the alias name, or specify the latest version of the template
            by providing the keyword $LATEST in the AliasName parameter.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.quicksight.template_alias.absent:
                - name: value
                - aws_account_id: value
                - template_id: value
                - alias_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.quicksight.template_alias.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.quicksight.describe_template_alias(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.quicksight.delete_template_alias(
                ctx,
                
                
                **{"AwsAccountId": aws_account_id, "TemplateId": template_id, "AliasName": alias_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.quicksight.describe_template_alias(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

