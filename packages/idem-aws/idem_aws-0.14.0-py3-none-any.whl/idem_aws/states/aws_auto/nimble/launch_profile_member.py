"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.nimble.delete_launch_profile_member
hub.exec.boto3.client.nimble.get_launch_profile_member
hub.exec.boto3.client.nimble.list_launch_profile_members
hub.exec.boto3.client.nimble.put_launch_profile_members
hub.exec.boto3.client.nimble.update_launch_profile_member
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, identity_store_id: Text, launch_profile_id: Text, members: List, studio_id: Text, client_token: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Add/update users with given persona to launch profile membership.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        client_token(Text, optional): To make an idempotent API request using one of these actions, specify a client token in the
            request. You should not reuse the same client token for other API requests. If you retry a
            request that completed successfully using the same client token and the same parameters, the
            retry succeeds without performing any further actions. If you retry a successful request using
            the same client token, but one or more of the parameters are different, the retry fails with a
            ValidationException error. Defaults to None.
        identity_store_id(Text): The ID of the identity store.
        launch_profile_id(Text): The launch profile ID.
        members(List): A list of members.
        studio_id(Text): The studio ID.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.nimble.launch_profile_member.present:
                - name: value
                - identity_store_id: value
                - launch_profile_id: value
                - members: value
                - studio_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.nimble.launch_profile_member.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.nimble.get_launch_profile_member(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.nimble.put_launch_profile_members(
                ctx,
                
                
                **{"clientToken": client_token, "identityStoreId": identity_store_id, "launchProfileId": launch_profile_id, "members": members, "studioId": studio_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.nimble.get_launch_profile_member(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, launch_profile_id: Text, principal_id: Text, studio_id: Text, client_token: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Delete a user from launch profile membership.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        client_token(Text, optional): To make an idempotent API request using one of these actions, specify a client token in the
            request. You should not reuse the same client token for other API requests. If you retry a
            request that completed successfully using the same client token and the same parameters, the
            retry succeeds without performing any further actions. If you retry a successful request using
            the same client token, but one or more of the parameters are different, the retry fails with a
            ValidationException error. Defaults to None.
        launch_profile_id(Text): The launch profile ID.
        principal_id(Text): The principal ID.
        studio_id(Text): The studio ID.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.nimble.launch_profile_member.absent:
                - name: value
                - launch_profile_id: value
                - principal_id: value
                - studio_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.nimble.launch_profile_member.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.nimble.get_launch_profile_member(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.nimble.delete_launch_profile_member(
                ctx,
                
                
                **{"clientToken": client_token, "launchProfileId": launch_profile_id, "principalId": principal_id, "studioId": studio_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.nimble.get_launch_profile_member(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

