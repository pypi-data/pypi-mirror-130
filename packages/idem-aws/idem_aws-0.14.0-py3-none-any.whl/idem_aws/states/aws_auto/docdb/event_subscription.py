"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.docdb.create_event_subscription
hub.exec.boto3.client.docdb.delete_event_subscription
hub.exec.boto3.client.docdb.describe_event_subscriptions
hub.exec.boto3.client.docdb.modify_event_subscription
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, subscription_name: Text, sns_topic_arn: Text, source_type: Text = None, event_categories: List = None, source_ids: List = None, enabled: bool = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name
    (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain
    an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed
    in the Amazon SNS console. You can specify the type of source (SourceType) that you want to be notified of. You
    can also provide a list of Amazon DocumentDB sources (SourceIds) that trigger the events, and you can provide a
    list of event categories (EventCategories) for events that you want to be notified of. For example, you can
    specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability,
    Backup. If you specify both the SourceType and SourceIds (such as SourceType = db-instance and SourceIdentifier
    = myDBInstance1), you are notified of all the db-instance events for the specified source. If you specify a
    SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all
    your Amazon DocumentDB sources. If you do not specify either the SourceType or the SourceIdentifier, you are
    notified of events generated from all Amazon DocumentDB sources belonging to your customer account.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        subscription_name(Text): The name of the subscription. Constraints: The name must be fewer than 255 characters.
        sns_topic_arn(Text): The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS
            creates the ARN when you create a topic and subscribe to it.
        source_type(Text, optional): The type of source that is generating the events. For example, if you want to be notified of
            events generated by an instance, you would set this parameter to db-instance. If this value is
            not specified, all events are returned. Valid values: db-instance, db-cluster, db-parameter-
            group, db-security-group, db-cluster-snapshot. Defaults to None.
        event_categories(List, optional):  A list of event categories for a SourceType that you want to subscribe to. Defaults to None.
        source_ids(List, optional): The list of identifiers of the event sources for which events are returned. If not specified,
            then all sources are included in the response. An identifier must begin with a letter and must
            contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two
            consecutive hyphens. Constraints:   If SourceIds are provided, SourceType must also be provided.
            If the source type is an instance, a DBInstanceIdentifier must be provided.   If the source type
            is a security group, a DBSecurityGroupName must be provided.   If the source type is a parameter
            group, a DBParameterGroupName must be provided.   If the source type is a snapshot, a
            DBSnapshotIdentifier must be provided. Defaults to None.
        enabled(bool, optional):  A Boolean value; set to true to activate the subscription, set to false to create the
            subscription but not active it. Defaults to None.
        tags(List, optional): The tags to be assigned to the event subscription. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.docdb.event_subscription.present:
                - name: value
                - subscription_name: value
                - sns_topic_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.docdb.event_subscription.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.docdb.describe_event_subscriptions(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.docdb.create_event_subscription(
                ctx,
                
                
                **{"SubscriptionName": subscription_name, "SnsTopicArn": sns_topic_arn, "SourceType": source_type, "EventCategories": event_categories, "SourceIds": source_ids, "Enabled": enabled, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.docdb.describe_event_subscriptions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, subscription_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an Amazon DocumentDB event notification subscription.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        subscription_name(Text): The name of the Amazon DocumentDB event notification subscription that you want to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.docdb.event_subscription.absent:
                - name: value
                - subscription_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.docdb.event_subscription.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.docdb.describe_event_subscriptions(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.docdb.delete_event_subscription(
                ctx,
                
                
                **{"SubscriptionName": subscription_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.docdb.describe_event_subscriptions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

