"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.mediaconvert.create_preset
hub.exec.boto3.client.mediaconvert.delete_preset
hub.exec.boto3.client.mediaconvert.get_preset
hub.exec.boto3.client.mediaconvert.list_presets
hub.exec.boto3.client.mediaconvert.update_preset
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, settings: Dict, category: Text = None, description: Text = None, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Create a new preset. For information about job templates see the User Guide at
    http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html

    Args:
        name(Text): The name of the preset you are creating.
        category(Text, optional): Optional. A category for the preset you are creating. Defaults to None.
        description(Text, optional): Optional. A description of the preset you are creating. Defaults to None.
        settings(Dict): Settings for preset.
        tags(Dict, optional): The tags that you want to add to the resource. You can tag resources with a key-value pair or
            with only a key. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.mediaconvert.preset.present:
                - name: value
                - settings: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediaconvert.preset.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.mediaconvert.get_preset(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.mediaconvert.create_preset(
                ctx,
                
                
                **{"Name": name, "Category": category, "Description": description, "Settings": settings, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.mediaconvert.get_preset(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Permanently delete a preset you have created.

    Args:
        name(Text): The name of the preset to be deleted.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.mediaconvert.preset.absent:
                - name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediaconvert.preset.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.mediaconvert.get_preset(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.mediaconvert.delete_preset(
                ctx,
                
                
                **{"Name": name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.mediaconvert.get_preset(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

