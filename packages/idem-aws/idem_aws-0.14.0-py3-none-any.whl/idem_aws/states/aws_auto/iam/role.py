"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.iam.create_role
hub.exec.boto3.client.iam.delete_role
hub.exec.boto3.client.iam.get_role
hub.exec.boto3.client.iam.list_roles
hub.exec.boto3.client.iam.tag_role
hub.exec.boto3.client.iam.untag_role
hub.exec.boto3.client.iam.update_role
resource = hub.tool.boto3.resource.create(ctx, "iam", "Role", name)
hub.tool.boto3.resource.exec(resource, attach_policy, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, detach_policy, *args, **kwargs)
"""



import copy
from typing import *
import dict_tools.differ as differ

async def present(hub, ctx, name: Text, role_name: Text, assume_role_policy_document: Text, path: Text = None, description: Text = None, max_session_duration: int = None, permissions_boundary: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new role for your account. For more information about roles, see IAM roles. For information about
    quotas for role names and the number of roles you can create, see IAM and STS quotas in the IAM User Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        path(Text, optional):  The path to the role. For more information about paths, see IAM Identifiers in the IAM User
            Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This
            parameter allows (through its regex pattern) a string of characters consisting of either a
            forward slash (/) by itself or a string that must begin and end with forward slashes. In
            addition, it can contain any ASCII character from the ! (\u0021) through the DEL character
            (\u007F), including most punctuation characters, digits, and upper and lowercased letters. Defaults to None.
        role_name(Text): The name of the role to create. IAM user, group, role, and policy names must be unique within
            the account. Names are not distinguished by case. For example, you cannot create resources named
            both "MyResource" and "myresource".
        assume_role_policy_document(Text): The trust relationship policy document that grants an entity permission to assume the role. In
            IAM, you must provide a JSON policy that has been converted to a string. However, for
            CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format.
            CloudFormation always converts a YAML policy to JSON format before submitting it to IAM. The
            regex pattern used to validate this parameter is a string of characters consisting of the
            following:   Any printable ASCII character ranging from the space character (\u0020) through the
            end of the ASCII character range   The printable characters in the Basic Latin and Latin-1
            Supplement character set (through \u00FF)   The special characters tab (\u0009), line feed
            (\u000A), and carriage return (\u000D)    Upon success, the response includes the same trust
            policy in JSON format.
        description(Text, optional): A description of the role. Defaults to None.
        max_session_duration(int, optional): The maximum session duration (in seconds) that you want to set for the specified role. If you do
            not specify a value for this setting, the default maximum of one hour is applied. This setting
            can have a value from 1 hour to 12 hours. Anyone who assumes the role from the or API can use
            the DurationSeconds API parameter or the duration-seconds CLI parameter to request a longer
            session. The MaxSessionDuration setting determines the maximum duration that can be requested
            using the DurationSeconds parameter. If users don't specify a value for the DurationSeconds
            parameter, their security credentials are valid for one hour by default. This applies when you
            use the AssumeRole* API operations or the assume-role* CLI operations but does not apply when
            you use those operations to create a console URL. For more information, see Using IAM roles in
            the IAM User Guide. Defaults to None.
        permissions_boundary(Text, optional): The ARN of the policy that is used to set the permissions boundary for the role. Defaults to None.
        tags(List, optional): A list of tags that you want to attach to the new role. Each tag consists of a key name and an
            associated value. For more information about tagging, see Tagging IAM resources in the IAM User
            Guide.  If any one of the tags is invalid or if you exceed the allowed maximum number of tags,
            then the entire request fails and the resource is not created. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.iam.role.present:
                - name: value
                - role_name: value
                - assume_role_policy_document: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.iam.role.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "iam", "Role", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.iam.create_role(
                ctx,
                
                
                **{"Path": path, "RoleName": role_name, "AssumeRolePolicyDocument": assume_role_policy_document, "Description": description, "MaxSessionDuration": max_session_duration, "PermissionsBoundary": permissions_boundary, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def absent(hub, ctx, name: Text, role_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified role. The role must not have any policies attached. For more information about roles, see
    Working with roles.  Make sure that you do not have any Amazon EC2 instances running with the role you are about
    to delete. Deleting a role or instance profile that is associated with a running instance will break any
    applications running on the instance.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        role_name(Text): The name of the role to delete. This parameter allows (through its regex pattern) a string of
            characters consisting of upper and lowercase alphanumeric characters with no spaces. You can
            also include any of the following characters: _+=,.@-.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.iam.role.absent:
                - name: value
                - role_name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.iam.role.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "iam", "Role", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.iam.delete_role(
                ctx,
                
                
                **{"RoleName": role_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def describe(hub, ctx)  -> Dict[str, Dict[str, Any]]:
    r'''
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function

    
    Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list.
    For more information about roles, see Working with roles.  IAM resource-listing operations return a subset of
    the available attributes for the resource. For example, this operation does not return tags, even though they
    are an attribute of the returned object. To view all of the information for a role, see GetRole.  You can
    paginate the results using the MaxItems and Marker parameters.


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe aws_auto.iam.role
    '''

    
    result = {}

    ret = await hub.exec.boto3.client.iam.list_roles(ctx)
    if not ret["status"]:
        hub.log.debug(f"Could not describe role {ret['comment']}")
        return result

    for role in ret["ret"]["TODO"]:
        new_role = [
                {"PathPrefix": path_prefix, "Marker": marker, "MaxItems": max_items}
        ]
        result[role["roleId"]] = {"aws_auto.iam.role.present": new_role}

        for i, data in enumerate(role.get("", ())):
            sub_role = copy.deepcopy(new_role)

            # TODO check for subresouruces
            sub_role.append({})
            sub_role.append({"name": "TODOs"})
            result[f"TODOs-{i}"] = {"aws_auto.iam.role.present": sub_role}

    return result


