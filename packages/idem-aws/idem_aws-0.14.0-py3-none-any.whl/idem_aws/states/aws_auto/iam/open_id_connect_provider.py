"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.iam.create_open_id_connect_provider
hub.exec.boto3.client.iam.delete_open_id_connect_provider
hub.exec.boto3.client.iam.get_open_id_connect_provider
hub.exec.boto3.client.iam.list_open_id_connect_providers
hub.exec.boto3.client.iam.tag_open_id_connect_provider
hub.exec.boto3.client.iam.untag_open_id_connect_provider
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, url: Text, thumbprint_list: List, client_id_list: List = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an IAM entity to describe an identity provider (IdP) that supports OpenID Connect (OIDC). The OIDC
    provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy
    establishes a trust relationship between Amazon Web Services and the OIDC provider. If you are using an OIDC
    identity provider from Google, Facebook, or Amazon Cognito, you don't need to create a separate IAM identity
    provider. These OIDC identity providers are already built-in to Amazon Web Services and are available for your
    use. Instead, you can move directly to creating new roles using your identity provider. To learn more, see
    Creating a role for web identity or OpenID connect federation in the IAM User Guide. When you create the IAM
    OIDC provider, you specify the following:   The URL of the OIDC identity provider (IdP) to trust   A list of
    client IDs (also known as audiences) that identify the application or applications allowed to authenticate using
    the OIDC provider   A list of thumbprints of one or more server certificates that the IdP uses   You get all of
    this information from the OIDC IdP that you want to use to access Amazon Web Services.  Amazon Web Services
    secures communication with some OIDC identity providers (IdPs) through our library of trusted certificate
    authorities (CAs) instead of using a certificate thumbprint to verify your IdP server certificate. These OIDC
    IdPs include Google, and those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these
    cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.   The trust
    for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to
    limit access to the CreateOpenIDConnectProvider operation to highly privileged users.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        url(Text): The URL of the identity provider. The URL must begin with https:// and should correspond to the
            iss claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are
            allowed but query parameters are not. Typically the URL consists of only a hostname, like
            https://server.example.org or https://example.com. You cannot register the same provider
            multiple times in a single account. If you try to submit a URL that has already been used for an
            OpenID Connect provider in the account, you will get an error.
        client_id_list(List, optional): A list of client IDs (also known as audiences). When a mobile or web app registers with an
            OpenID Connect provider, they establish a value that identifies the application. (This is the
            value that's sent as the client_id parameter on OAuth requests.) You can register multiple
            client IDs with the same provider. For example, you might have multiple applications that use
            the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC
            provider. There is no defined format for a client ID. The CreateOpenIDConnectProviderRequest
            operation accepts client IDs up to 255 characters long. Defaults to None.
        thumbprint_list(List): A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's
            server certificates. Typically this list includes only one entry. However, IAM lets you have up
            to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the
            identity provider is rotating certificates. The server certificate thumbprint is the hex-encoded
            SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider
            makes its keys available. It is always a 40-character string. You must provide at least one
            thumbprint when creating an IAM OIDC provider. For example, assume that the OIDC provider is
            server.example.com and the provider stores its keys at https://keys.server.example.com/openid-
            connect. In that case, the thumbprint string would be the hex-encoded SHA-1 hash value of the
            certificate used by https://keys.server.example.com. For more information about obtaining the
            OIDC provider's thumbprint, see Obtaining the thumbprint for an OpenID Connect provider in the
            IAM User Guide.
        tags(List, optional): A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider. Each tag
            consists of a key name and an associated value. For more information about tagging, see Tagging
            IAM resources in the IAM User Guide.  If any one of the tags is invalid or if you exceed the
            allowed maximum number of tags, then the entire request fails and the resource is not created. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.iam.open_id_connect_provider.present:
                - name: value
                - url: value
                - thumbprint_list: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.iam.open_id_connect_provider.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.iam.get_open_id_connect_provider(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.iam.create_open_id_connect_provider(
                ctx,
                
                
                **{"Url": url, "ClientIDList": client_id_list, "ThumbprintList": thumbprint_list, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.iam.get_open_id_connect_provider(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, open_id_connect_provider_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an OpenID Connect identity provider (IdP) resource object in IAM. Deleting an IAM OIDC provider resource
    does not update any roles that reference the provider as a principal in their trust policies. Any attempt to
    assume a role that references a deleted provider fails. This operation is idempotent; it does not fail or return
    an error if you call the operation for a provider that does not exist.

    Args:
        name(Text): The name of the state.
        open_id_connect_provider_arn(Text): The Amazon Resource Name (ARN) of the IAM OpenID Connect provider resource object to delete. You
            can get a list of OpenID Connect provider resource ARNs by using the ListOpenIDConnectProviders
            operation.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.iam.open_id_connect_provider.absent:
                - name: value
                - open_id_connect_provider_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)

    

    before = await hub.exec.boto3.client.iam.get_open_id_connect_provider(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.iam.delete_open_id_connect_provider(
                ctx,
                
                
                **{"OpenIDConnectProviderArn": open_id_connect_provider_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.iam.get_open_id_connect_provider(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

