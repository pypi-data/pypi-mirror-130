"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.iam.create_user
hub.exec.boto3.client.iam.delete_user
hub.exec.boto3.client.iam.get_user
hub.exec.boto3.client.iam.list_users
hub.exec.boto3.client.iam.tag_user
hub.exec.boto3.client.iam.untag_user
hub.exec.boto3.client.iam.update_user
resource = hub.tool.boto3.resource.create(ctx, "iam", "User", name)
hub.tool.boto3.resource.exec(resource, add_group, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, attach_policy, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, create, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, create_access_key_pair, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, create_login_profile, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, create_policy, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, detach_policy, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, enable_mfa, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, remove_group, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, update, *args, **kwargs)
"""



import copy
from typing import *
import dict_tools.differ as differ

async def present(hub, ctx, name: Text, user_name: Text, path: Text = None, permissions_boundary: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new IAM user for your account.  For information about quotas for the number of IAM users you can
    create, see IAM and STS quotas in the IAM User Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        path(Text, optional):  The path for the user name. For more information about paths, see IAM identifiers in the IAM
            User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This
            parameter allows (through its regex pattern) a string of characters consisting of either a
            forward slash (/) by itself or a string that must begin and end with forward slashes. In
            addition, it can contain any ASCII character from the ! (\u0021) through the DEL character
            (\u007F), including most punctuation characters, digits, and upper and lowercased letters. Defaults to None.
        user_name(Text): The name of the user to create. IAM user, group, role, and policy names must be unique within
            the account. Names are not distinguished by case. For example, you cannot create resources named
            both "MyResource" and "myresource".
        permissions_boundary(Text, optional): The ARN of the policy that is used to set the permissions boundary for the user. Defaults to None.
        tags(List, optional): A list of tags that you want to attach to the new user. Each tag consists of a key name and an
            associated value. For more information about tagging, see Tagging IAM resources in the IAM User
            Guide.  If any one of the tags is invalid or if you exceed the allowed maximum number of tags,
            then the entire request fails and the resource is not created. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.iam.user.present:
                - name: value
                - user_name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.iam.user.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "iam", "User", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.iam.create_user(
                ctx,
                
                
                **{"Path": path, "UserName": user_name, "PermissionsBoundary": permissions_boundary, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def absent(hub, ctx, name: Text, user_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified IAM user. Unlike the Management Console, when you delete a user programmatically, you must
    delete the items attached to the user manually, or the deletion fails. For more information, see Deleting an IAM
    user. Before attempting to delete a user, remove the following items:   Password (DeleteLoginProfile)   Access
    keys (DeleteAccessKey)   Signing certificate (DeleteSigningCertificate)   SSH public key (DeleteSSHPublicKey)
    Git credentials (DeleteServiceSpecificCredential)   Multi-factor authentication (MFA) device
    (DeactivateMFADevice, DeleteVirtualMFADevice)   Inline policies (DeleteUserPolicy)   Attached managed policies
    (DetachUserPolicy)   Group memberships (RemoveUserFromGroup)

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        user_name(Text): The name of the user to delete. This parameter allows (through its regex pattern) a string of
            characters consisting of upper and lowercase alphanumeric characters with no spaces. You can
            also include any of the following characters: _+=,.@-.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.iam.user.absent:
                - name: value
                - user_name: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.iam.user.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "iam", "User", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.iam.delete_user(
                ctx,
                
                
                **{"UserName": user_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def describe(hub, ctx)  -> Dict[str, Dict[str, Any]]:
    r'''
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function

    
    Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns
    all users in the account. If there are none, the operation returns an empty list.  IAM resource-listing
    operations return a subset of the available attributes for the resource. For example, this operation does not
    return tags, even though they are an attribute of the returned object. To view all of the information for a
    user, see GetUser.  You can paginate the results using the MaxItems and Marker parameters.


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe aws_auto.iam.user
    '''

    
    result = {}

    ret = await hub.exec.boto3.client.iam.list_users(ctx)
    if not ret["status"]:
        hub.log.debug(f"Could not describe user {ret['comment']}")
        return result

    for user in ret["ret"]["TODO"]:
        new_user = [
                {"PathPrefix": path_prefix, "Marker": marker, "MaxItems": max_items}
        ]
        result[user["userId"]] = {"aws_auto.iam.user.present": new_user}

        for i, data in enumerate(user.get("", ())):
            sub_user = copy.deepcopy(new_user)

            # TODO check for subresouruces
            sub_user.append({})
            sub_user.append({"name": "TODOs"})
            result[f"TODOs-{i}"] = {"aws_auto.iam.user.present": sub_user}

    return result


