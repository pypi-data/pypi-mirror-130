"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.robomaker.cancel_deployment_job
hub.exec.boto3.client.robomaker.create_deployment_job
hub.exec.boto3.client.robomaker.describe_deployment_job
hub.exec.boto3.client.robomaker.list_deployment_jobs
hub.exec.boto3.client.robomaker.sync_deployment_job
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, client_request_token: Text, fleet: Text, deployment_application_configs: List, deployment_config: Dict = None, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deploys a specific version of a robot application to robots in a fleet. The robot application must have a
    numbered applicationVersion for consistency reasons. To create a new version, use CreateRobotApplicationVersion
    or see Creating a Robot Application Version.   After 90 days, deployment jobs expire and will be deleted. They
    will no longer be accessible.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        deployment_config(Dict, optional): The requested deployment configuration. Defaults to None.
        client_request_token(Text): Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        fleet(Text): The Amazon Resource Name (ARN) of the fleet to deploy.
        deployment_application_configs(List): The deployment application configuration.
        tags(Dict, optional): A map that contains tag keys and tag values that are attached to the deployment job. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.robomaker.deployment_job.present:
                - name: value
                - client_request_token: value
                - fleet: value
                - deployment_application_configs: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.robomaker.deployment_job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.robomaker.describe_deployment_job(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.robomaker.create_deployment_job(
                ctx,
                
                
                **{"deploymentConfig": deployment_config, "clientRequestToken": client_request_token, "fleet": fleet, "deploymentApplicationConfigs": deployment_application_configs, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.robomaker.describe_deployment_job(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, job: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Cancels the specified deployment job.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        job(Text): The deployment job ARN to cancel.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.robomaker.deployment_job.absent:
                - name: value
                - job: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.robomaker.deployment_job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.robomaker.describe_deployment_job(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.robomaker.cancel_deployment_job(
                ctx,
                
                
                **{"job": job}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.robomaker.describe_deployment_job(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

