"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.robomaker.create_robot_application
hub.exec.boto3.client.robomaker.delete_robot_application
hub.exec.boto3.client.robomaker.describe_robot_application
hub.exec.boto3.client.robomaker.list_robot_applications
hub.exec.boto3.client.robomaker.update_robot_application
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, sources: List, robot_software_suite: Dict, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a robot application.

    Args:
        name(Text): The name of the robot application.
        sources(List): The sources of the robot application.
        robot_software_suite(Dict): The robot software suite (ROS distribuition) used by the robot application.
        tags(Dict, optional): A map that contains tag keys and tag values that are attached to the robot application. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.robomaker.robot_application.present:
                - name: value
                - sources: value
                - robot_software_suite: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.robomaker.robot_application.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.robomaker.describe_robot_application(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.robomaker.create_robot_application(
                ctx,
                
                
                **{"Name": name, "sources": sources, "robotSoftwareSuite": robot_software_suite, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.robomaker.describe_robot_application(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, application: Text, application_version: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a robot application.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        application(Text): The Amazon Resource Name (ARN) of the the robot application.
        application_version(Text, optional): The version of the robot application to delete. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.robomaker.robot_application.absent:
                - name: value
                - application: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.robomaker.robot_application.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.robomaker.describe_robot_application(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.robomaker.delete_robot_application(
                ctx,
                
                
                **{"application": application, "applicationVersion": application_version}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.robomaker.describe_robot_application(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

