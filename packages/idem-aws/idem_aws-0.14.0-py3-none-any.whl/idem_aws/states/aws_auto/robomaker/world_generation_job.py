"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.robomaker.cancel_world_generation_job
hub.exec.boto3.client.robomaker.create_world_generation_job
hub.exec.boto3.client.robomaker.describe_world_generation_job
hub.exec.boto3.client.robomaker.list_world_generation_jobs
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, template: Text, world_count: Dict, client_request_token: Text = None, tags: Dict = None, world_tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates worlds using the specified template.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        client_request_token(Text, optional): Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Defaults to None.
        template(Text): The Amazon Resource Name (arn) of the world template describing the worlds you want to create.
        world_count(Dict): Information about the world count.
        tags(Dict, optional): A map that contains tag keys and tag values that are attached to the world generator job. Defaults to None.
        world_tags(Dict, optional): A map that contains tag keys and tag values that are attached to the generated worlds. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.robomaker.world_generation_job.present:
                - name: value
                - template: value
                - world_count: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.robomaker.world_generation_job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.robomaker.describe_world_generation_job(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.robomaker.create_world_generation_job(
                ctx,
                
                
                **{"clientRequestToken": client_request_token, "template": template, "worldCount": world_count, "tags": tags, "worldTags": world_tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.robomaker.describe_world_generation_job(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, job: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Cancels the specified world generator job.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        job(Text): The Amazon Resource Name (arn) of the world generator job to cancel.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.robomaker.world_generation_job.absent:
                - name: value
                - job: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.robomaker.world_generation_job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.robomaker.describe_world_generation_job(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.robomaker.cancel_world_generation_job(
                ctx,
                
                
                **{"job": job}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.robomaker.describe_world_generation_job(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

