"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.s3control.delete_bucket_lifecycle_configuration
hub.exec.boto3.client.s3control.get_bucket_lifecycle_configuration
hub.exec.boto3.client.s3control.put_bucket_lifecycle_configuration
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, account_id: Text, bucket: Text, lifecycle_configuration: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This action puts a lifecycle configuration to an Amazon S3 on Outposts bucket. To put a lifecycle configuration
    to an S3 bucket, see PutBucketLifecycleConfiguration in the Amazon S3 API Reference.   Creates a new lifecycle
    configuration for the S3 on Outposts bucket or replaces an existing lifecycle configuration. Outposts buckets
    only support lifecycle configurations that delete/expire objects after a certain period of time and abort
    incomplete multipart uploads.  All Amazon S3 on Outposts REST API requests for this action require an additional
    parameter of x-amz-outpost-id to be passed with the request and an S3 on Outposts endpoint hostname prefix
    instead of s3-control. For an example of the request syntax for Amazon S3 on Outposts that uses the S3 on
    Outposts endpoint hostname prefix and the x-amz-outpost-id derived using the access point ARN, see the Examples
    section. The following actions are related to PutBucketLifecycleConfiguration:
    GetBucketLifecycleConfiguration     DeleteBucketLifecycleConfiguration

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        account_id(Text): The account ID of the Outposts bucket.
        bucket(Text): The name of the bucket for which to set the configuration.
        lifecycle_configuration(Dict, optional): Container for lifecycle rules. You can add as many as 1,000 rules. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.s3control.bucket_lifecycle_configuration.present:
                - name: value
                - account_id: value
                - bucket: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3control.bucket_lifecycle_configuration.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.s3control.get_bucket_lifecycle_configuration(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.s3control.put_bucket_lifecycle_configuration(
                ctx,
                
                
                **{"AccountId": account_id, "Bucket": bucket, "LifecycleConfiguration": lifecycle_configuration}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.s3control.get_bucket_lifecycle_configuration(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, account_id: Text, bucket: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This action deletes an Amazon S3 on Outposts bucket's lifecycle configuration. To delete an S3 bucket's
    lifecycle configuration, see DeleteBucketLifecycle in the Amazon S3 API Reference.   Deletes the lifecycle
    configuration from the specified Outposts bucket. Amazon S3 on Outposts removes all the lifecycle configuration
    rules in the lifecycle subresource associated with the bucket. Your objects never expire, and Amazon S3 on
    Outposts no longer automatically deletes any objects on the basis of rules contained in the deleted lifecycle
    configuration. For more information, see Using Amazon S3 on Outposts in Amazon S3 User Guide. To use this
    action, you must have permission to perform the s3-outposts:DeleteLifecycleConfiguration action. By default, the
    bucket owner has this permission and the Outposts bucket owner can grant this permission to others. All Amazon
    S3 on Outposts REST API requests for this action require an additional parameter of x-amz-outpost-id to be
    passed with the request and an S3 on Outposts endpoint hostname prefix instead of s3-control. For an example of
    the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
    x-amz-outpost-id derived using the access point ARN, see the Examples section. For more information about object
    expiration, see Elements to Describe Lifecycle Actions. Related actions include:
    PutBucketLifecycleConfiguration     GetBucketLifecycleConfiguration

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        account_id(Text): The account ID of the lifecycle configuration to delete.
        bucket(Text): Specifies the bucket. For using this parameter with Amazon S3 on Outposts with the REST API, you
            must specify the name and the x-amz-outpost-id as well. For using this parameter with S3 on
            Outposts with the Amazon Web Services SDK and CLI, you must specify the ARN of the bucket
            accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-
            id>/bucket/<my-bucket-name>. For example, to access the bucket reports through outpost my-
            outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of
            arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value must be
            URL encoded.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.s3control.bucket_lifecycle_configuration.absent:
                - name: value
                - account_id: value
                - bucket: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3control.bucket_lifecycle_configuration.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.s3control.get_bucket_lifecycle_configuration(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.s3control.delete_bucket_lifecycle_configuration(
                ctx,
                
                
                **{"AccountId": account_id, "Bucket": bucket}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.s3control.get_bucket_lifecycle_configuration(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

