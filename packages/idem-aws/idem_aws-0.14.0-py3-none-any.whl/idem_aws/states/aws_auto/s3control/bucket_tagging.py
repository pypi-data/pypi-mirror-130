"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.s3control.delete_bucket_tagging
hub.exec.boto3.client.s3control.get_bucket_tagging
hub.exec.boto3.client.s3control.put_bucket_tagging
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, account_id: Text, bucket: Text, tagging: Dict)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This action puts tags on an Amazon S3 on Outposts bucket. To put tags on an S3 bucket, see PutBucketTagging in
    the Amazon S3 API Reference.   Sets the tags for an S3 on Outposts bucket. For more information, see Using
    Amazon S3 on Outposts in the Amazon S3 User Guide. Use tags to organize your Amazon Web Services bill to reflect
    your own cost structure. To do this, sign up to get your account bill with tag key values included. Then, to see
    the cost of combined resources, organize your billing information according to resources with the same tag key
    values. For example, you can tag several resources with a specific application name, and then organize your
    billing information to see the total cost of that application across several services. For more information, see
    Cost allocation and tagging.  Within a bucket, if you add a tag that has the same key as an existing tag, the
    new value overwrites the old value. For more information, see  Using cost allocation in Amazon S3 bucket tags.
    To use this action, you must have permissions to perform the s3-outposts:PutBucketTagging action. The Outposts
    bucket owner has this permission by default and can grant this permission to others. For more information about
    permissions, see  Permissions Related to Bucket Subresource Operations and Managing access permissions to your
    Amazon S3 resources.  PutBucketTagging has the following special errors:   Error code: InvalidTagError
    Description: The tag provided was not a valid tag. This error can occur if the tag did not pass input
    validation. For information about tag restrictions, see  User-Defined Tag Restrictions and  Amazon Web Services-
    Generated Cost Allocation Tag Restrictions.     Error code: MalformedXMLError    Description: The XML provided
    does not match the schema.     Error code: OperationAbortedError     Description: A conflicting conditional
    action is currently in progress against this resource. Try again.     Error code: InternalError    Description:
    The service was unable to apply the provided tag to the bucket.     All Amazon S3 on Outposts REST API requests
    for this action require an additional parameter of x-amz-outpost-id to be passed with the request and an S3 on
    Outposts endpoint hostname prefix instead of s3-control. For an example of the request syntax for Amazon S3 on
    Outposts that uses the S3 on Outposts endpoint hostname prefix and the x-amz-outpost-id derived using the access
    point ARN, see the Examples section. The following actions are related to PutBucketTagging:    GetBucketTagging
    DeleteBucketTagging

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        account_id(Text): The account ID of the Outposts bucket.
        bucket(Text): The Amazon Resource Name (ARN) of the bucket. For using this parameter with Amazon S3 on
            Outposts with the REST API, you must specify the name and the x-amz-outpost-id as well. For
            using this parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must
            specify the ARN of the bucket accessed in the format arn:aws:s3-outposts:<Region>:<account-
            id>:outpost/<outpost-id>/bucket/<my-bucket-name>. For example, to access the bucket reports
            through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL
            encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The
            value must be URL encoded.
        tagging(Dict): .

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.s3control.bucket_tagging.present:
                - name: value
                - account_id: value
                - bucket: value
                - tagging: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3control.bucket_tagging.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.s3control.get_bucket_tagging(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.s3control.put_bucket_tagging(
                ctx,
                
                
                **{"AccountId": account_id, "Bucket": bucket, "Tagging": tagging}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.s3control.get_bucket_tagging(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, account_id: Text, bucket: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This action deletes an Amazon S3 on Outposts bucket's tags. To delete an S3 bucket tags, see
    DeleteBucketTagging in the Amazon S3 API Reference.   Deletes the tags from the Outposts bucket. For more
    information, see Using Amazon S3 on Outposts in Amazon S3 User Guide. To use this action, you must have
    permission to perform the PutBucketTagging action. By default, the bucket owner has this permission and can
    grant this permission to others.  All Amazon S3 on Outposts REST API requests for this action require an
    additional parameter of x-amz-outpost-id to be passed with the request and an S3 on Outposts endpoint hostname
    prefix instead of s3-control. For an example of the request syntax for Amazon S3 on Outposts that uses the S3 on
    Outposts endpoint hostname prefix and the x-amz-outpost-id derived using the access point ARN, see the Examples
    section. The following actions are related to DeleteBucketTagging:    GetBucketTagging     PutBucketTagging

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        account_id(Text): The account ID of the Outposts bucket tag set to be removed.
        bucket(Text): The bucket ARN that has the tag set to be removed. For using this parameter with Amazon S3 on
            Outposts with the REST API, you must specify the name and the x-amz-outpost-id as well. For
            using this parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must
            specify the ARN of the bucket accessed in the format arn:aws:s3-outposts:<Region>:<account-
            id>:outpost/<outpost-id>/bucket/<my-bucket-name>. For example, to access the bucket reports
            through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL
            encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The
            value must be URL encoded.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.s3control.bucket_tagging.absent:
                - name: value
                - account_id: value
                - bucket: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3control.bucket_tagging.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.s3control.get_bucket_tagging(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.s3control.delete_bucket_tagging(
                ctx,
                
                
                **{"AccountId": account_id, "Bucket": bucket}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.s3control.get_bucket_tagging(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

