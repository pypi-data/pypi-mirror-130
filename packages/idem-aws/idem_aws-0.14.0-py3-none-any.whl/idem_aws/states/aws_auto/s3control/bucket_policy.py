"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.s3control.delete_bucket_policy
hub.exec.boto3.client.s3control.get_bucket_policy
hub.exec.boto3.client.s3control.put_bucket_policy
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, account_id: Text, bucket: Text, policy: Text, confirm_remove_self_bucket_access: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This action puts a bucket policy to an Amazon S3 on Outposts bucket. To put a policy on an S3 bucket, see
    PutBucketPolicy in the Amazon S3 API Reference.   Applies an Amazon S3 bucket policy to an Outposts bucket. For
    more information, see Using Amazon S3 on Outposts in the Amazon S3 User Guide. If you are using an identity
    other than the root user of the account that owns the Outposts bucket, the calling identity must have the
    PutBucketPolicy permissions on the specified Outposts bucket and belong to the bucket owner's account in order
    to use this action. If you don't have PutBucketPolicy permissions, Amazon S3 returns a 403 Access Denied error.
    If you have the correct permissions, but you're not using an identity that belongs to the bucket owner's
    account, Amazon S3 returns a 405 Method Not Allowed error.   As a security precaution, the root user of the
    account that owns a bucket can always use this action, even if the policy explicitly denies the root user the
    ability to perform this action.   For more information about bucket policies, see Using Bucket Policies and User
    Policies. All Amazon S3 on Outposts REST API requests for this action require an additional parameter of x-amz-
    outpost-id to be passed with the request and an S3 on Outposts endpoint hostname prefix instead of s3-control.
    For an example of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname
    prefix and the x-amz-outpost-id derived using the access point ARN, see the Examples section. The following
    actions are related to PutBucketPolicy:    GetBucketPolicy     DeleteBucketPolicy

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        account_id(Text): The account ID of the Outposts bucket.
        bucket(Text): Specifies the bucket. For using this parameter with Amazon S3 on Outposts with the REST API, you
            must specify the name and the x-amz-outpost-id as well. For using this parameter with S3 on
            Outposts with the Amazon Web Services SDK and CLI, you must specify the ARN of the bucket
            accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-
            id>/bucket/<my-bucket-name>. For example, to access the bucket reports through outpost my-
            outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of
            arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value must be
            URL encoded.
        confirm_remove_self_bucket_access(bool, optional): Set this parameter to true to confirm that you want to remove your permissions to change this
            bucket policy in the future.  This is not supported by Amazon S3 on Outposts buckets. Defaults to None.
        policy(Text): The bucket policy as a JSON document.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.s3control.bucket_policy.present:
                - name: value
                - account_id: value
                - bucket: value
                - policy: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3control.bucket_policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.s3control.get_bucket_policy(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.s3control.put_bucket_policy(
                ctx,
                
                
                **{"AccountId": account_id, "Bucket": bucket, "ConfirmRemoveSelfBucketAccess": confirm_remove_self_bucket_access, "Policy": policy}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.s3control.get_bucket_policy(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, account_id: Text, bucket: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This action deletes an Amazon S3 on Outposts bucket policy. To delete an S3 bucket policy, see
    DeleteBucketPolicy in the Amazon S3 API Reference.   This implementation of the DELETE action uses the policy
    subresource to delete the policy of a specified Amazon S3 on Outposts bucket. If you are using an identity other
    than the root user of the account that owns the bucket, the calling identity must have the
    s3-outposts:DeleteBucketPolicy permissions on the specified Outposts bucket and belong to the bucket owner's
    account to use this action. For more information, see Using Amazon S3 on Outposts in Amazon S3 User Guide. If
    you don't have DeleteBucketPolicy permissions, Amazon S3 returns a 403 Access Denied error. If you have the
    correct permissions, but you're not using an identity that belongs to the bucket owner's account, Amazon S3
    returns a 405 Method Not Allowed error.   As a security precaution, the root user of the account that owns a
    bucket can always use this action, even if the policy explicitly denies the root user the ability to perform
    this action.  For more information about bucket policies, see Using Bucket Policies and User Policies.  All
    Amazon S3 on Outposts REST API requests for this action require an additional parameter of x-amz-outpost-id to
    be passed with the request and an S3 on Outposts endpoint hostname prefix instead of s3-control. For an example
    of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
    x-amz-outpost-id derived using the access point ARN, see the Examples section. The following actions are related
    to DeleteBucketPolicy:    GetBucketPolicy     PutBucketPolicy

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        account_id(Text): The account ID of the Outposts bucket.
        bucket(Text): Specifies the bucket. For using this parameter with Amazon S3 on Outposts with the REST API, you
            must specify the name and the x-amz-outpost-id as well. For using this parameter with S3 on
            Outposts with the Amazon Web Services SDK and CLI, you must specify the ARN of the bucket
            accessed in the format arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-
            id>/bucket/<my-bucket-name>. For example, to access the bucket reports through outpost my-
            outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of
            arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value must be
            URL encoded.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.s3control.bucket_policy.absent:
                - name: value
                - account_id: value
                - bucket: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3control.bucket_policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.s3control.get_bucket_policy(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.s3control.delete_bucket_policy(
                ctx,
                
                
                **{"AccountId": account_id, "Bucket": bucket}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.s3control.get_bucket_policy(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

