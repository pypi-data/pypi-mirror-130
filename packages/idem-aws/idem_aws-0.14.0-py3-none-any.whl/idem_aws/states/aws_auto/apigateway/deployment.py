"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.apigateway.create_deployment
hub.exec.boto3.client.apigateway.delete_deployment
hub.exec.boto3.client.apigateway.get_deployments
hub.exec.boto3.client.apigateway.update_deployment
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, rest_api_id: Text, stage_name: Text = None, stage_description: Text = None, description: Text = None, cache_cluster_enabled: bool = None, cache_cluster_size: Text = None, variables: Dict = None, canary_settings: Dict = None, tracing_enabled: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a Deployment resource, which makes a specified RestApi callable over the internet.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        rest_api_id(Text): [Required] The string identifier of the associated RestApi.
        stage_name(Text, optional): The name of the Stage resource for the Deployment resource to create. Defaults to None.
        stage_description(Text, optional): The description of the Stage resource for the Deployment resource to create. Defaults to None.
        description(Text, optional): The description for the Deployment resource to create. Defaults to None.
        cache_cluster_enabled(bool, optional): Enables a cache cluster for the Stage resource specified in the input. Defaults to None.
        cache_cluster_size(Text, optional): Specifies the cache cluster size for the Stage resource specified in the input, if a cache
            cluster is enabled. Defaults to None.
        variables(Dict, optional): A map that defines the stage variables for the Stage resource that is associated with the new
            deployment. Variable names can have alphanumeric and underscore characters, and the values must
            match [A-Za-z0-9-._~:/?#&=,]+. Defaults to None.
        canary_settings(Dict, optional): The input configuration for the canary deployment when the deployment is a canary release
            deployment. Defaults to None.
        tracing_enabled(bool, optional): Specifies whether active tracing with X-ray is enabled for the Stage. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.apigateway.deployment.present:
                - name: value
                - rest_api_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.deployment.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.apigateway.get_deployments(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.create_deployment(
                ctx,
                
                
                **{"restApiId": rest_api_id, "stageName": stage_name, "stageDescription": stage_description, "description": description, "cacheClusterEnabled": cache_cluster_enabled, "cacheClusterSize": cache_cluster_size, "variables": variables, "canarySettings": canary_settings, "tracingEnabled": tracing_enabled}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.apigateway.get_deployments(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, rest_api_id: Text, deployment_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources
    associated with it.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        rest_api_id(Text): [Required] The string identifier of the associated RestApi.
        deployment_id(Text): [Required] The identifier of the Deployment resource to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.apigateway.deployment.absent:
                - name: value
                - rest_api_id: value
                - deployment_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.deployment.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.apigateway.get_deployments(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.delete_deployment(
                ctx,
                
                
                **{"restApiId": rest_api_id, "deploymentId": deployment_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.apigateway.get_deployments(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

