"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.apigateway.create_usage_plan_key
hub.exec.boto3.client.apigateway.delete_usage_plan_key
hub.exec.boto3.client.apigateway.get_usage_plan_keys
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, usage_plan_id: Text, key_id: Text, key_type: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a usage plan key for adding an existing API key to a usage plan.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        usage_plan_id(Text): [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-
            created UsagePlanKey resource representing a plan customer.
        key_id(Text): [Required] The identifier of a UsagePlanKey resource for a plan customer.
        key_type(Text): [Required] The type of a UsagePlanKey resource for a plan customer.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.apigateway.usage_plan_key.present:
                - name: value
                - usage_plan_id: value
                - key_id: value
                - key_type: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.usage_plan_key.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.apigateway.get_usage_plan_keys(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.create_usage_plan_key(
                ctx,
                
                
                **{"usagePlanId": usage_plan_id, "keyId": key_id, "keyType": key_type}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.apigateway.get_usage_plan_keys(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, usage_plan_id: Text, key_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a usage plan key and remove the underlying API key from the associated usage plan.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        usage_plan_id(Text): [Required] The Id of the UsagePlan resource representing the usage plan containing the to-be-
            deleted UsagePlanKey resource representing a plan customer.
        key_id(Text): [Required] The Id of the UsagePlanKey resource to be deleted.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.apigateway.usage_plan_key.absent:
                - name: value
                - usage_plan_id: value
                - key_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.usage_plan_key.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.apigateway.get_usage_plan_keys(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.delete_usage_plan_key(
                ctx,
                
                
                **{"usagePlanId": usage_plan_id, "keyId": key_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.apigateway.get_usage_plan_keys(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

