"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.apigateway.create_authorizer
hub.exec.boto3.client.apigateway.delete_authorizer
hub.exec.boto3.client.apigateway.get_authorizers
hub.exec.boto3.client.apigateway.update_authorizer
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, rest_api_id: Text, type_: Text, provider_ar_ns: List = None, auth_type: Text = None, authorizer_uri: Text = None, authorizer_credentials: Text = None, identity_source: Text = None, identity_validation_expression: Text = None, authorizer_result_ttl_in_seconds: int = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Adds a new Authorizer resource to an existing RestApi resource. AWS CLI

    Args:
        name(Text): [Required] The name of the authorizer.
        rest_api_id(Text): [Required] The string identifier of the associated RestApi.
        type_(Text): [Required] The authorizer type. Valid values are TOKEN for a Lambda function using a single
            authorization token submitted in a custom header, REQUEST for a Lambda function using incoming
            request parameters, and COGNITO_USER_POOLS for using an Amazon Cognito user pool.
        provider_ar_ns(List, optional): A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer. Each element
            is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}. For a
            TOKEN or REQUEST authorizer, this is not defined. Defaults to None.
        auth_type(Text, optional): Optional customer-defined field, used in OpenAPI imports and exports without functional impact. Defaults to None.
        authorizer_uri(Text, optional): Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN or REQUEST authorizers,
            this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-
            west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-
            west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this
            form arn:aws:apigateway:{region}:lambda:path/{service_api}, where {region} is the same as the
            region hosting the Lambda function, path indicates that the remaining substring in the URI
            should be treated as the path to the resource, including the initial /. For Lambda functions,
            this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Defaults to None.
        authorizer_credentials(Text, optional): Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To
            specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use
            resource-based permissions on the Lambda function, specify null. Defaults to None.
        identity_source(Text, optional): The identity source for which authorization is requested. For a TOKEN or COGNITO_USER_POOLS
            authorizer, this is required and specifies the request header mapping expression for the custom
            header holding the authorization token submitted by the client. For example, if the token header
            name is Auth, the header mapping expression is method.request.header.Auth.For the REQUEST
            authorizer, this is required when authorization caching is enabled. The value is a comma-
            separated string of one or more mapping expressions of the specified request parameters. For
            example, if an Auth header, a Name query string parameter are defined as identity sources, this
            value is method.request.header.Auth, method.request.querystring.Name. These parameters will be
            used to derive the authorization caching key and to perform runtime validation of the REQUEST
            authorizer by verifying all of the identity-related request parameters are present, not null and
            non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function,
            otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid
            value is a string of comma-separated mapping expressions of the specified request parameters.
            When the authorization caching is not enabled, this property is optional. Defaults to None.
        identity_validation_expression(Text, optional): A validation expression for the incoming identity token. For TOKEN authorizers, this value is a
            regular expression. For COGNITO_USER_POOLS authorizers, API Gateway will match the aud field of
            the incoming token from the client against the specified regular expression. It will invoke the
            authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized
            response without calling the Lambda function. The validation expression does not apply to the
            REQUEST authorizer. Defaults to None.
        authorizer_result_ttl_in_seconds(int, optional): The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is
            disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is
            not set, the default value is 300. The maximum value is 3600, or 1 hour. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.apigateway.authorizer.present:
                - name: value
                - rest_api_id: value
                - type_: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.authorizer.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.apigateway.get_authorizers(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.create_authorizer(
                ctx,
                
                
                **{"Name": name, "restApiId": rest_api_id, "type": type_, "providerARNs": provider_ar_ns, "authType": auth_type, "authorizerUri": authorizer_uri, "authorizerCredentials": authorizer_credentials, "identitySource": identity_source, "identityValidationExpression": identity_validation_expression, "authorizerResultTtlInSeconds": authorizer_result_ttl_in_seconds}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.apigateway.get_authorizers(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, rest_api_id: Text, authorizer_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an existing Authorizer resource. AWS CLI

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        rest_api_id(Text): [Required] The string identifier of the associated RestApi.
        authorizer_id(Text): [Required] The identifier of the Authorizer resource.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.apigateway.authorizer.absent:
                - name: value
                - rest_api_id: value
                - authorizer_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.authorizer.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.apigateway.get_authorizers(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.delete_authorizer(
                ctx,
                
                
                **{"restApiId": rest_api_id, "authorizerId": authorizer_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.apigateway.get_authorizers(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

