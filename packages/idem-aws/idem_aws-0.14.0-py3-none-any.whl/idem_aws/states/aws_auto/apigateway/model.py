"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.apigateway.create_model
hub.exec.boto3.client.apigateway.delete_model
hub.exec.boto3.client.apigateway.get_models
hub.exec.boto3.client.apigateway.update_model
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, rest_api_id: Text, content_type: Text, description: Text = None, schema: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Adds a new Model resource to an existing RestApi resource.

    Args:
        name(Text): [Required] The name of the model. Must be alphanumeric.
        rest_api_id(Text): [Required] The RestApi identifier under which the Model will be created.
        description(Text, optional): The description of the model. Defaults to None.
        schema(Text, optional): The schema for the model. For application/json models, this should be JSON schema draft 4 model. Defaults to None.
        content_type(Text): [Required] The content-type for the model.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.apigateway.model.present:
                - name: value
                - rest_api_id: value
                - content_type: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.model.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.apigateway.get_models(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.create_model(
                ctx,
                
                
                **{"Name": name, "restApiId": rest_api_id, "description": description, "schema": schema, "contentType": content_type}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.apigateway.get_models(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, rest_api_id: Text, model_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a model.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        rest_api_id(Text): [Required] The string identifier of the associated RestApi.
        model_name(Text): [Required] The name of the model to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.apigateway.model.absent:
                - name: value
                - rest_api_id: value
                - model_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigateway.model.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.apigateway.get_models(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.apigateway.delete_model(
                ctx,
                
                
                **{"restApiId": rest_api_id, "modelName": model_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.apigateway.get_models(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

