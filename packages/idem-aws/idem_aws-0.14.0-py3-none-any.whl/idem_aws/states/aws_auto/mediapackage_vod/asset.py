"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.mediapackage_vod.create_asset
hub.exec.boto3.client.mediapackage_vod.delete_asset
hub.exec.boto3.client.mediapackage_vod.describe_asset
hub.exec.boto3.client.mediapackage_vod.list_assets
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, id_: Text, packaging_group_id: Text, source_arn: Text, source_role_arn: Text, resource_id: Text = None, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new MediaPackage VOD Asset resource.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        id_(Text): The unique identifier for the Asset.
        packaging_group_id(Text): The ID of the PackagingGroup for the Asset.
        resource_id(Text, optional): The resource ID to include in SPEKE key requests. Defaults to None.
        source_arn(Text): ARN of the source object in S3.
        source_role_arn(Text): The IAM role ARN used to access the source S3 bucket.
        tags(Dict, optional): A collection of tags associated with a resource. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.mediapackage_vod.asset.present:
                - name: value
                - id_: value
                - packaging_group_id: value
                - source_arn: value
                - source_role_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediapackage_vod.asset.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.mediapackage_vod.describe_asset(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.mediapackage_vod.create_asset(
                ctx,
                
                
                **{"Id": id_, "PackagingGroupId": packaging_group_id, "ResourceId": resource_id, "SourceArn": source_arn, "SourceRoleArn": source_role_arn, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.mediapackage_vod.describe_asset(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, id_: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an existing MediaPackage VOD Asset resource.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        id_(Text): The ID of the MediaPackage VOD Asset resource to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.mediapackage_vod.asset.absent:
                - name: value
                - id_: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediapackage_vod.asset.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.mediapackage_vod.describe_asset(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.mediapackage_vod.delete_asset(
                ctx,
                
                
                **{"Id": id_}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.mediapackage_vod.describe_asset(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

