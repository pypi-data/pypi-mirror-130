"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.kinesisanalytics.create_application
hub.exec.boto3.client.kinesisanalytics.delete_application
hub.exec.boto3.client.kinesisanalytics.describe_application
hub.exec.boto3.client.kinesisanalytics.list_applications
hub.exec.boto3.client.kinesisanalytics.start_application
hub.exec.boto3.client.kinesisanalytics.stop_application
hub.exec.boto3.client.kinesisanalytics.update_application
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, application_name: Text, application_description: Text = None, inputs: List = None, outputs: List = None, cloud_watch_logging_options: List = None, application_code: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL
    applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see
    Amazon Kinesis Data Analytics API V2 Documentation.   Creates an Amazon Kinesis Analytics application. You can
    configure each application with one streaming source as input, application code to process the input, and up to
    three destinations where you want Amazon Kinesis Analytics to write the output data from your application. For
    an overview, see How it Works.  In the input configuration, you map the streaming source to an in-application
    stream, which you can think of as a constantly updating table. In the mapping, you must provide a schema for the
    in-application stream and map each data column in the in-application stream to a data element in the streaming
    source. Your application code is one or more SQL statements that read input data, transform it, and generate
    output. Your application code can create one or more SQL artifacts like SQL streams or pumps. In the output
    configuration, you can configure the application to write data from in-application streams created in your
    applications to up to three destinations.  To read data from your source stream or write data to destination
    streams, Amazon Kinesis Analytics needs your permissions. You grant these permissions by creating IAM roles.
    This operation requires permissions to perform the kinesisanalytics:CreateApplication action.   For introductory
    exercises to create an Amazon Kinesis Analytics application, see Getting Started.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        application_name(Text): Name of your Amazon Kinesis Analytics application (for example, sample-app).
        application_description(Text, optional): Summary description of the application. Defaults to None.
        inputs(List, optional): Use this parameter to configure the application input. You can configure your application to
            receive input from a single streaming source. In this configuration, you map this streaming
            source to an in-application stream that is created. Your application code can then query the in-
            application stream like a table (you can think of it as a constantly updating table). For the
            streaming source, you provide its Amazon Resource Name (ARN) and format of data on the stream
            (for example, JSON, CSV, etc.). You also must provide an IAM role that Amazon Kinesis Analytics
            can assume to read this stream on your behalf. To create the in-application stream, you need to
            specify a schema to transform your data into a schematized version used in SQL. In the schema,
            you provide the necessary mapping of the data elements in the streaming source to record columns
            in the in-app stream. Defaults to None.
        outputs(List, optional): You can configure application output to write data from any of the in-application streams to up
            to three destinations. These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose
            delivery streams, AWS Lambda destinations, or any combination of the three. In the
            configuration, you specify the in-application stream name, the destination stream or Lambda
            function Amazon Resource Name (ARN), and the format to use when writing data. You must also
            provide an IAM role that Amazon Kinesis Analytics can assume to write to the destination stream
            or Lambda function on your behalf. In the output configuration, you also provide the output
            stream or Lambda function ARN. For stream destinations, you provide the format of data in the
            stream (for example, JSON, CSV). You also must provide an IAM role that Amazon Kinesis Analytics
            can assume to write to the stream or Lambda function on your behalf. Defaults to None.
        cloud_watch_logging_options(List, optional): Use this parameter to configure a CloudWatch log stream to monitor application configuration
            errors. For more information, see Working with Amazon CloudWatch Logs. Defaults to None.
        application_code(Text, optional): One or more SQL statements that read input data, transform it, and generate output. For example,
            you can write a SQL statement that reads data from one in-application stream, generates a
            running average of the number of advertisement clicks by vendor, and insert resulting rows in
            another in-application stream using pumps. For more information about the typical pattern, see
            Application Code.  You can provide such series of SQL statements, where output of one statement
            can be used as the input for the next statement. You store intermediate results by creating in-
            application streams and pumps. Note that the application code must create the streams with names
            specified in the Outputs. For example, if your Outputs defines output streams named
            ExampleOutputStream1 and ExampleOutputStream2, then your application code must create these
            streams. Defaults to None.
        tags(List, optional): A list of one or more tags to assign to the application. A tag is a key-value pair that
            identifies an application. Note that the maximum number of application tags includes system
            tags. The maximum number of user-defined application tags is 50. For more information, see Using
            Tagging. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.kinesisanalytics.application.present:
                - name: value
                - application_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.kinesisanalytics.application.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.kinesisanalytics.describe_application(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.kinesisanalytics.create_application(
                ctx,
                
                
                **{"ApplicationName": application_name, "ApplicationDescription": application_description, "Inputs": inputs, "Outputs": outputs, "CloudWatchLoggingOptions": cloud_watch_logging_options, "ApplicationCode": application_code, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.kinesisanalytics.describe_application(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, application_name: Text, create_timestamp: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL
    applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see
    Amazon Kinesis Data Analytics API V2 Documentation.  Deletes the specified application. Amazon Kinesis Analytics
    halts application execution and deletes the application, including any application artifacts (such as in-
    application streams, reference table, and application code). This operation requires permissions to perform the
    kinesisanalytics:DeleteApplication action.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        application_name(Text): Name of the Amazon Kinesis Analytics application to delete.
        create_timestamp(Text):  You can use the DescribeApplication operation to get this value.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.kinesisanalytics.application.absent:
                - name: value
                - application_name: value
                - create_timestamp: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.kinesisanalytics.application.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.kinesisanalytics.describe_application(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.kinesisanalytics.delete_application(
                ctx,
                
                
                **{"ApplicationName": application_name, "CreateTimestamp": create_timestamp}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.kinesisanalytics.describe_application(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

