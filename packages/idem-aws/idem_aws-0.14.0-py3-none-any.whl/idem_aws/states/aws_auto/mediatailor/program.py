"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.mediatailor.create_program
hub.exec.boto3.client.mediatailor.delete_program
hub.exec.boto3.client.mediatailor.describe_program
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, channel_name: Text, program_name: Text, schedule_configuration: Dict, source_location_name: Text, vod_source_name: Text, ad_breaks: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a program.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        ad_breaks(List, optional): The ad break configuration settings. Defaults to None.
        channel_name(Text): The identifier for the channel you are working on.
        program_name(Text): The identifier for the program you are working on.
        schedule_configuration(Dict): The schedule configuration settings.
        source_location_name(Text): The name of the source location.
        vod_source_name(Text): The name that's used to refer to a VOD source.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.mediatailor.program.present:
                - name: value
                - channel_name: value
                - program_name: value
                - schedule_configuration: value
                - source_location_name: value
                - vod_source_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediatailor.program.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.mediatailor.describe_program(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.mediatailor.create_program(
                ctx,
                
                
                **{"AdBreaks": ad_breaks, "ChannelName": channel_name, "ProgramName": program_name, "ScheduleConfiguration": schedule_configuration, "SourceLocationName": source_location_name, "VodSourceName": vod_source_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.mediatailor.describe_program(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, channel_name: Text, program_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a specific program on a specific channel.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        channel_name(Text): The identifier for the channel you are working on.
        program_name(Text): The identifier for the program you are working on.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.mediatailor.program.absent:
                - name: value
                - channel_name: value
                - program_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediatailor.program.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.mediatailor.describe_program(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.mediatailor.delete_program(
                ctx,
                
                
                **{"ChannelName": channel_name, "ProgramName": program_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.mediatailor.describe_program(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

