"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.mediatailor.create_vod_source
hub.exec.boto3.client.mediatailor.delete_vod_source
hub.exec.boto3.client.mediatailor.describe_vod_source
hub.exec.boto3.client.mediatailor.list_vod_sources
hub.exec.boto3.client.mediatailor.update_vod_source
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, http_package_configurations: List, source_location_name: Text, vod_source_name: Text, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates name for a specific VOD source in a source location.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        http_package_configurations(List): An array of HTTP package configuration parameters for this VOD source.
        source_location_name(Text): The identifier for the source location you are working on.
        tags(Dict, optional): The tags to assign to the VOD source. Defaults to None.
        vod_source_name(Text): The identifier for the VOD source you are working on.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.mediatailor.vod_source.present:
                - name: value
                - http_package_configurations: value
                - source_location_name: value
                - vod_source_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediatailor.vod_source.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.mediatailor.describe_vod_source(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.mediatailor.create_vod_source(
                ctx,
                
                
                **{"HttpPackageConfigurations": http_package_configurations, "SourceLocationName": source_location_name, "Tags": tags, "VodSourceName": vod_source_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.mediatailor.describe_vod_source(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, source_location_name: Text, vod_source_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a specific VOD source in a specific source location.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        source_location_name(Text): The identifier for the source location you are working on.
        vod_source_name(Text): The identifier for the VOD source you are working on.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.mediatailor.vod_source.absent:
                - name: value
                - source_location_name: value
                - vod_source_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediatailor.vod_source.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.mediatailor.describe_vod_source(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.mediatailor.delete_vod_source(
                ctx,
                
                
                **{"SourceLocationName": source_location_name, "VodSourceName": vod_source_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.mediatailor.describe_vod_source(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

