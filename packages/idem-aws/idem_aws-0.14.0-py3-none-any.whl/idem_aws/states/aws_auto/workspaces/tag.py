"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.workspaces.create_tags
hub.exec.boto3.client.workspaces.delete_tags
hub.exec.boto3.client.workspaces.describe_tags
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, resource_id: Text, tags: List)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates the specified tags for the specified WorkSpaces resource.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        resource_id(Text): The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
            registered directories, images, custom bundles, IP access control groups, and connection
            aliases.
        tags(List): The tags. Each WorkSpaces resource can have a maximum of 50 tags.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.workspaces.tag.present:
                - name: value
                - resource_id: value
                - tags: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.workspaces.tag.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.workspaces.describe_tags(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.workspaces.create_tags(
                ctx,
                
                
                **{"ResourceId": resource_id, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.workspaces.describe_tags(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, resource_id: Text, tag_keys: List)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified tags from the specified WorkSpaces resource.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        resource_id(Text): The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
            registered directories, images, custom bundles, IP access control groups, and connection
            aliases.
        tag_keys(List): The tag keys.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.workspaces.tag.absent:
                - name: value
                - resource_id: value
                - tag_keys: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.workspaces.tag.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.workspaces.describe_tags(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.workspaces.delete_tags(
                ctx,
                
                
                **{"ResourceId": resource_id, "TagKeys": tag_keys}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.workspaces.describe_tags(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

