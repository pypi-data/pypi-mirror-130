"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.autoscaling.delete_lifecycle_hook
hub.exec.boto3.client.autoscaling.describe_lifecycle_hooks
hub.exec.boto3.client.autoscaling.put_lifecycle_hook
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, lifecycle_hook_name: Text, auto_scaling_group_name: Text, lifecycle_transition: Text = None, role_arn: Text = None, notification_target_arn: Text = None, notification_metadata: Text = None, heartbeat_timeout: int = None, default_result: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates or updates a lifecycle hook for the specified Auto Scaling group. A lifecycle hook tells Amazon EC2 Auto
    Scaling to perform an action on an instance when the instance launches (before it is put into service) or as the
    instance terminates (before it is fully terminated). This step is a part of the procedure for adding a lifecycle
    hook to an Auto Scaling group:   (Optional) Create a Lambda function and a rule that allows CloudWatch Events to
    invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates instances.   (Optional) Create a
    notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The
    role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.    Create the lifecycle
    hook. Specify whether the hook is used when the instances launch or terminate.    If you need more time, record
    the lifecycle action heartbeat to keep the instance in a pending state using the RecordLifecycleActionHeartbeat
    API call.   If you finish before the timeout period ends, complete the lifecycle action using the
    CompleteLifecycleAction API call.   For more information, see Amazon EC2 Auto Scaling lifecycle hooks in the
    Amazon EC2 Auto Scaling User Guide. If you exceed your maximum limit of lifecycle hooks, which by default is 50
    per Auto Scaling group, the call fails. You can view the lifecycle hooks for an Auto Scaling group using the
    DescribeLifecycleHooks API call. If you are no longer using a lifecycle hook, you can delete it by calling the
    DeleteLifecycleHook API.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        lifecycle_hook_name(Text): The name of the lifecycle hook.
        auto_scaling_group_name(Text): The name of the Auto Scaling group.
        lifecycle_transition(Text, optional): The instance state to which you want to attach the lifecycle hook. The valid values are:
            autoscaling:EC2_INSTANCE_LAUNCHING   autoscaling:EC2_INSTANCE_TERMINATING   Required for new
            lifecycle hooks, but optional when updating existing hooks. Defaults to None.
        role_arn(Text, optional): The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
            notification target, for example, an Amazon SNS topic or an Amazon SQS queue. Required for new
            lifecycle hooks, but optional when updating existing hooks. Defaults to None.
        notification_target_arn(Text, optional): The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an
            instance is in the transition state for the lifecycle hook. This target can be either an SQS
            queue or an SNS topic. If you specify an empty string, this overrides the current ARN. This
            operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email
            key-value pair format when sending notifications to an Amazon SNS topic. When you specify a
            notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the
            following additional key-value pair: "Event": "autoscaling:TEST_NOTIFICATION". Defaults to None.
        notification_metadata(Text, optional): Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message
            to the notification target. Defaults to None.
        heartbeat_timeout(int, optional): The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is
            from 30 to 7200 seconds. The default value is 3600 seconds (1 hour). If the lifecycle hook times
            out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult
            parameter. You can prevent the lifecycle hook from timing out by calling the
            RecordLifecycleActionHeartbeat API. Defaults to None.
        default_result(Text, optional): Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or
            if an unexpected failure occurs. This parameter can be either CONTINUE or ABANDON. The default
            value is ABANDON. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.autoscaling.lifecycle_hook.present:
                - name: value
                - lifecycle_hook_name: value
                - auto_scaling_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.autoscaling.lifecycle_hook.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.autoscaling.describe_lifecycle_hooks(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.autoscaling.put_lifecycle_hook(
                ctx,
                
                
                **{"LifecycleHookName": lifecycle_hook_name, "AutoScalingGroupName": auto_scaling_group_name, "LifecycleTransition": lifecycle_transition, "RoleARN": role_arn, "NotificationTargetARN": notification_target_arn, "NotificationMetadata": notification_metadata, "HeartbeatTimeout": heartbeat_timeout, "DefaultResult": default_result}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.autoscaling.describe_lifecycle_hooks(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, lifecycle_hook_name: Text, auto_scaling_group_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified lifecycle hook. If there are any outstanding lifecycle actions, they are completed first
    (ABANDON for launching instances, CONTINUE for terminating instances).

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        lifecycle_hook_name(Text): The name of the lifecycle hook.
        auto_scaling_group_name(Text): The name of the Auto Scaling group.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.autoscaling.lifecycle_hook.absent:
                - name: value
                - lifecycle_hook_name: value
                - auto_scaling_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.autoscaling.lifecycle_hook.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.autoscaling.describe_lifecycle_hooks(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.autoscaling.delete_lifecycle_hook(
                ctx,
                
                
                **{"LifecycleHookName": lifecycle_hook_name, "AutoScalingGroupName": auto_scaling_group_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.autoscaling.describe_lifecycle_hooks(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

