"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.autoscaling.create_auto_scaling_group
hub.exec.boto3.client.autoscaling.delete_auto_scaling_group
hub.exec.boto3.client.autoscaling.describe_auto_scaling_groups
hub.exec.boto3.client.autoscaling.update_auto_scaling_group
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, auto_scaling_group_name: Text, min_size: int, max_size: int, launch_configuration_name: Text = None, launch_template: Dict = None, mixed_instances_policy: Dict = None, instance_id: Text = None, desired_capacity: int = None, default_cooldown: int = None, availability_zones: List = None, load_balancer_names: List = None, target_group_ar_ns: List = None, health_check_type: Text = None, health_check_grace_period: int = None, placement_group: Text = None, vpc_zone_identifier: Text = None, termination_policies: List = None, new_instances_protected_from_scale_in: bool = None, capacity_rebalance: bool = None, lifecycle_hook_specification_list: List = None, tags: List = None, service_linked_role_arn: Text = None, max_instance_lifetime: int = None, context: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     We strongly recommend using a launch template when calling this operation to ensure full functionality for
    Amazon EC2 Auto Scaling and Amazon EC2.  Creates an Auto Scaling group with the specified name and attributes.
    If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the
    DescribeAccountLimits API. For information about updating this limit, see Amazon EC2 Auto Scaling service quotas
    in the Amazon EC2 Auto Scaling User Guide. For introductory exercises for creating an Auto Scaling group, see
    Getting started with Amazon EC2 Auto Scaling and Tutorial: Set up a scaled and load-balanced application in the
    Amazon EC2 Auto Scaling User Guide. For more information, see Auto Scaling groups in the Amazon EC2 Auto Scaling
    User Guide. Every Auto Scaling group has three size parameters (DesiredCapacity, MaxSize, and MinSize). Usually,
    you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy
    that defines weights for the instance types, you must specify these sizes with the same units that you use for
    weighting instances.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        auto_scaling_group_name(Text): The name of the Auto Scaling group. This name must be unique per Region per account.
        launch_configuration_name(Text, optional): The name of the launch configuration to use to launch instances.  Conditional: You must specify
            either a launch template (LaunchTemplate or MixedInstancesPolicy) or a launch configuration
            (LaunchConfigurationName or InstanceId). Defaults to None.
        launch_template(Dict, optional): Parameters used to specify the launch template and version to use to launch instances.
            Conditional: You must specify either a launch template (LaunchTemplate or MixedInstancesPolicy)
            or a launch configuration (LaunchConfigurationName or InstanceId).  The launch template that is
            specified must be configured for use with an Auto Scaling group. For more information, see
            Creating a launch template for an Auto Scaling group in the Amazon EC2 Auto Scaling User Guide. Defaults to None.
        mixed_instances_policy(Dict, optional): An embedded object that specifies a mixed instances policy. The required properties must be
            specified. If optional properties are unspecified, their default values are used. The policy
            includes properties that not only define the distribution of On-Demand Instances and Spot
            Instances, the maximum price to pay for Spot Instances, and how the Auto Scaling group allocates
            instance types to fulfill On-Demand and Spot capacities, but also the properties that specify
            the instance configuration informationâ€”the launch template and instance types. The policy can
            also include a weight for each instance type and different launch templates for individual
            instance types. For more information, see Auto Scaling groups with multiple instance types and
            purchase options in the Amazon EC2 Auto Scaling User Guide. Defaults to None.
        instance_id(Text, optional): The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto
            Scaling uses the configuration values from the specified instance to create a new launch
            configuration. To get the instance ID, use the Amazon EC2 DescribeInstances API operation. For
            more information, see Creating an Auto Scaling group using an EC2 instance in the Amazon EC2
            Auto Scaling User Guide. Defaults to None.
        min_size(int): The minimum size of the group.
        max_size(int): The maximum size of the group.  With a mixed instances policy that uses instance weighting,
            Amazon EC2 Auto Scaling may need to go above MaxSize to meet your capacity requirements. In this
            event, Amazon EC2 Auto Scaling will never go above MaxSize by more than your largest instance
            weight (weights that define how many units each instance contributes to the desired capacity of
            the group).
        desired_capacity(int, optional): The desired capacity is the initial capacity of the Auto Scaling group at the time of its
            creation and the capacity it attempts to maintain. It can scale beyond this capacity if you
            configure auto scaling. This number must be greater than or equal to the minimum size of the
            group and less than or equal to the maximum size of the group. If you do not specify a desired
            capacity, the default is the minimum size of the group. Defaults to None.
        default_cooldown(int, optional): The amount of time, in seconds, after a scaling activity completes before another scaling
            activity can start. The default value is 300. This setting applies when using simple scaling
            policies, but not when using other scaling policies or scheduled scaling. For more information,
            see Scaling cooldowns for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide. Defaults to None.
        availability_zones(List, optional): A list of Availability Zones where instances in the Auto Scaling group can be created. This
            parameter is optional if you specify one or more subnets for VPCZoneIdentifier. Conditional: If
            your account supports EC2-Classic and VPC, this parameter is required to launch instances into
            EC2-Classic. Defaults to None.
        load_balancer_names(List, optional): A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load
            Balancers, Network Load Balancers, and Gateway Load Balancers, specify the TargetGroupARNs
            property instead. Defaults to None.
        target_group_ar_ns(List, optional): The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group.
            Instances are registered as targets in a target group, and traffic is routed to the target
            group. For more information, see Elastic Load Balancing and Amazon EC2 Auto Scaling in the
            Amazon EC2 Auto Scaling User Guide. Defaults to None.
        health_check_type(Text, optional): The service to use for the health checks. The valid values are EC2 (default) and ELB. If you
            configure an Auto Scaling group to use load balancer (ELB) health checks, it considers the
            instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
            For more information, see Health checks for Auto Scaling instances in the Amazon EC2 Auto
            Scaling User Guide. Defaults to None.
        health_check_grace_period(int, optional): The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health
            status of an EC2 instance that has come into service. During this time, any health check
            failures for the instance are ignored. The default value is 0. For more information, see Health
            check grace period in the Amazon EC2 Auto Scaling User Guide. Conditional: Required if you are
            adding an ELB health check. Defaults to None.
        placement_group(Text, optional): The name of an existing placement group into which to launch your instances, if any. A placement
            group is a logical grouping of instances within a single Availability Zone. You cannot specify
            multiple Availability Zones and a placement group. For more information, see Placement Groups in
            the Amazon EC2 User Guide for Linux Instances. Defaults to None.
        vpc_zone_identifier(Text, optional): A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the
            Auto Scaling group can be created. If you specify VPCZoneIdentifier with AvailabilityZones, the
            subnets that you specify for this parameter must reside in those Availability Zones.
            Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch
            instances into a VPC. Defaults to None.
        termination_policies(List, optional): A policy or a list of policies that are used to select the instance to terminate. These policies
            are executed in the order that you list them. For more information, see Controlling which Auto
            Scaling instances terminate during scale in in the Amazon EC2 Auto Scaling User Guide. Defaults to None.
        new_instances_protected_from_scale_in(bool, optional): Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto
            Scaling when scaling in. For more information about preventing instances from terminating on
            scale in, see Instance scale-in protection in the Amazon EC2 Auto Scaling User Guide. Defaults to None.
        capacity_rebalance(bool, optional): Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled.
            When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot
            Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of
            interruption. After launching a new instance, it then terminates an old instance. For more
            information, see Amazon EC2 Auto Scaling Capacity Rebalancing in the Amazon EC2 Auto Scaling
            User Guide. Defaults to None.
        lifecycle_hook_specification_list(List, optional): One or more lifecycle hooks for the group, which specify actions to perform when Amazon EC2 Auto
            Scaling launches or terminates instances. Defaults to None.
        tags(List, optional): One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2
            instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS
            volumes, specify the tags in a launch template but use caution. If the launch template specifies
            an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto
            Scaling overrides the value of that instance tag with the value specified by the Auto Scaling
            group. For more information, see Tagging Auto Scaling groups and instances in the Amazon EC2
            Auto Scaling User Guide. Defaults to None.
        service_linked_role_arn(Text, optional): The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
            call other Amazon Web Services on your behalf. By default, Amazon EC2 Auto Scaling uses a
            service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist.
            For more information, see Service-linked roles in the Amazon EC2 Auto Scaling User Guide. Defaults to None.
        max_instance_lifetime(int, optional): The maximum amount of time, in seconds, that an instance can be in service. The default is null.
            If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1
            day). For more information, see Replacing Auto Scaling instances based on maximum instance
            lifetime in the Amazon EC2 Auto Scaling User Guide. Defaults to None.
        context(Text, optional): Reserved. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.autoscaling.auto_scaling_group.present:
                - name: value
                - auto_scaling_group_name: value
                - min_size: value
                - max_size: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.autoscaling.auto_scaling_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.autoscaling.describe_auto_scaling_groups(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.autoscaling.create_auto_scaling_group(
                ctx,
                
                
                **{"AutoScalingGroupName": auto_scaling_group_name, "LaunchConfigurationName": launch_configuration_name, "LaunchTemplate": launch_template, "MixedInstancesPolicy": mixed_instances_policy, "InstanceId": instance_id, "MinSize": min_size, "MaxSize": max_size, "DesiredCapacity": desired_capacity, "DefaultCooldown": default_cooldown, "AvailabilityZones": availability_zones, "LoadBalancerNames": load_balancer_names, "TargetGroupARNs": target_group_ar_ns, "HealthCheckType": health_check_type, "HealthCheckGracePeriod": health_check_grace_period, "PlacementGroup": placement_group, "VPCZoneIdentifier": vpc_zone_identifier, "TerminationPolicies": termination_policies, "NewInstancesProtectedFromScaleIn": new_instances_protected_from_scale_in, "CapacityRebalance": capacity_rebalance, "LifecycleHookSpecificationList": lifecycle_hook_specification_list, "Tags": tags, "ServiceLinkedRoleARN": service_linked_role_arn, "MaxInstanceLifetime": max_instance_lifetime, "Context": context}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.autoscaling.describe_auto_scaling_groups(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, auto_scaling_group_name: Text, force_delete: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified Auto Scaling group. If the group has instances or scaling activities in progress, you must
    specify the option to force the deletion in order for it to succeed. If the group has policies, deleting the
    group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.
    To remove instances from the Auto Scaling group before deleting it, call the DetachInstances API with the list
    of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does
    not launch replacement instances. To terminate all instances before deleting the Auto Scaling group, call the
    UpdateAutoScalingGroup API and set the minimum size and desired capacity of the Auto Scaling group to zero.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        auto_scaling_group_name(Text): The name of the Auto Scaling group.
        force_delete(bool, optional): Specifies that the group is to be deleted along with all instances associated with the group,
            without waiting for all instances to be terminated. This parameter also deletes any outstanding
            lifecycle actions associated with the group. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.autoscaling.auto_scaling_group.absent:
                - name: value
                - auto_scaling_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.autoscaling.auto_scaling_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.autoscaling.describe_auto_scaling_groups(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.autoscaling.delete_auto_scaling_group(
                ctx,
                
                
                **{"AutoScalingGroupName": auto_scaling_group_name, "ForceDelete": force_delete}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.autoscaling.describe_auto_scaling_groups(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

