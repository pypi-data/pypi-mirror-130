"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.autoscaling.delete_warm_pool
hub.exec.boto3.client.autoscaling.describe_warm_pool
hub.exec.boto3.client.autoscaling.put_warm_pool
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, auto_scaling_group_name: Text, max_group_prepared_capacity: int = None, min_size: int = None, pool_state: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized
    EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto
    Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example
    configurations, see Warm pools for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide. This
    operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be
    called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration
    that requests Spot Instances. You can view the instances in the warm pool using the DescribeWarmPool API call.
    If you are no longer using a warm pool, you can delete it by calling the DeleteWarmPool API.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        auto_scaling_group_name(Text): The name of the Auto Scaling group.
        max_group_prepared_capacity(int, optional): Specifies the maximum number of instances that are allowed to be in the warm pool or in any
            state except Terminated for the Auto Scaling group. This is an optional property. Specify it
            only if you do not want the warm pool size to be determined by the difference between the
            group's maximum capacity and its desired capacity.   If a value for MaxGroupPreparedCapacity is
            not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's
            maximum capacity and its desired capacity. If you specify a value for MaxGroupPreparedCapacity,
            Amazon EC2 Auto Scaling uses the difference between the MaxGroupPreparedCapacity and the desired
            capacity instead.  The size of the warm pool is dynamic. Only when MaxGroupPreparedCapacity and
            MinSize are set to the same value does the warm pool have an absolute size.  If the desired
            capacity of the Auto Scaling group is higher than the MaxGroupPreparedCapacity, the capacity of
            the warm pool is 0, unless you specify a value for MinSize. To remove a value that you
            previously set, include the property but specify -1 for the value. Defaults to None.
        min_size(int, optional): Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure
            that there is always a certain number of warmed instances available to handle traffic spikes.
            Defaults to 0 if not specified. Defaults to None.
        pool_state(Text, optional): Sets the instance state to transition to after the lifecycle actions are complete. Default is
            Stopped. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.autoscaling.warm_pool.present:
                - name: value
                - auto_scaling_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.autoscaling.warm_pool.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.autoscaling.describe_warm_pool(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.autoscaling.put_warm_pool(
                ctx,
                
                
                **{"AutoScalingGroupName": auto_scaling_group_name, "MaxGroupPreparedCapacity": max_group_prepared_capacity, "MinSize": min_size, "PoolState": pool_state}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.autoscaling.describe_warm_pool(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, auto_scaling_group_name: Text, force_delete: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the warm pool for the specified Auto Scaling group. For more information, see Warm pools for Amazon EC2
    Auto Scaling in the Amazon EC2 Auto Scaling User Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        auto_scaling_group_name(Text): The name of the Auto Scaling group.
        force_delete(bool, optional): Specifies that the warm pool is to be deleted along with all of its associated instances,
            without waiting for all instances to be terminated. This parameter also deletes any outstanding
            lifecycle actions associated with the warm pool instances. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.autoscaling.warm_pool.absent:
                - name: value
                - auto_scaling_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.autoscaling.warm_pool.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.autoscaling.describe_warm_pool(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.autoscaling.delete_warm_pool(
                ctx,
                
                
                **{"AutoScalingGroupName": auto_scaling_group_name, "ForceDelete": force_delete}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.autoscaling.describe_warm_pool(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

