"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.cloudformation.create_stack_set
hub.exec.boto3.client.cloudformation.delete_stack_set
hub.exec.boto3.client.cloudformation.describe_stack_set
hub.exec.boto3.client.cloudformation.list_stack_sets
hub.exec.boto3.client.cloudformation.update_stack_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, stack_set_name: Text, description: Text = None, template_body: Text = None, template_url: Text = None, stack_id: Text = None, parameters: List = None, capabilities: List = None, tags: List = None, administration_role_arn: Text = None, execution_role_name: Text = None, permission_model: Text = None, auto_deployment: Dict = None, call_as: Text = None, client_request_token: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a stack set.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        stack_set_name(Text): The name to associate with the stack set. The name must be unique in the Region where you create
            your stack set.  A stack name can contain only alphanumeric characters (case-sensitive) and
            hyphens. It must start with an alphabetic character and can't be longer than 128 characters.
        description(Text, optional): A description of the stack set. You can use the description to identify the stack set's purpose
            or other important information. Defaults to None.
        template_body(Text, optional): The structure that contains the template body, with a minimum length of 1 byte and a maximum
            length of 51,200 bytes. For more information, see Template Anatomy in the CloudFormation User
            Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but
            not both. Defaults to None.
        template_url(Text, optional): The location of the file that contains the template body. The URL must point to a template
            (maximum size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager
            document. For more information, see Template Anatomy in the CloudFormation User Guide.
            Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not
            both. Defaults to None.
        stack_id(Text, optional): The stack ID you are importing into a new stack set. Specify the Amazon Resource Number (ARN) of
            the stack. Defaults to None.
        parameters(List, optional): The input parameters for the stack set template. Defaults to None.
        capabilities(List, optional): In some cases, you must explicitly acknowledge that your stack set template contains certain
            capabilities in order for CloudFormation to create the stack set and related stack instances.
            CAPABILITY_IAM and CAPABILITY_NAMED_IAM  Some stack templates might include resources that can
            affect permissions in your account; for example, by creating new Identity and Access Management
            (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying one of
            these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM
            or CAPABILITY_NAMED_IAM capability.   If you have IAM resources, you can specify either
            capability.    If you have IAM resources with custom names, you must specify
            CAPABILITY_NAMED_IAM.    If you don't specify either of these capabilities, CloudFormation
            returns an InsufficientCapabilities error.   If your stack template contains these resources, we
            recommend that you review all permissions associated with them and edit their permissions if
            necessary.     AWS::IAM::AccessKey      AWS::IAM::Group      AWS::IAM::InstanceProfile
            AWS::IAM::Policy      AWS::IAM::Role      AWS::IAM::User      AWS::IAM::UserToGroupAddition
            For more information, see Acknowledging IAM Resources in CloudFormation Templates.
            CAPABILITY_AUTO_EXPAND  Some templates reference macros. If your stack set template references
            one or more macros, you must create the stack set directly from the processed template, without
            first reviewing the resulting changes in a change set. To create the stack set directly, you
            must acknowledge this capability. For more information, see Using CloudFormation Macros to
            Perform Custom Processing on Templates.  Stack sets with service-managed permissions do not
            currently support the use of macros in templates. (This includes the AWS::Include and
            AWS::Serverless transforms, which are macros hosted by CloudFormation.) Even if you specify this
            capability for a stack set with service-managed permissions, if you reference a macro in your
            template the stack set operation will fail. Defaults to None.
        tags(List, optional): The key-value pairs to associate with this stack set and the stacks created from it.
            CloudFormation also propagates these tags to supported resources that are created in the stacks.
            A maximum number of 50 tags can be specified. If you specify tags as part of a CreateStackSet
            action, CloudFormation checks to see if you have the required IAM permission to tag resources.
            If you don't, the entire CreateStackSet action fails with an access denied error, and the stack
            set is not created. Defaults to None.
        administration_role_arn(Text, optional): The Amazon Resource Number (ARN) of the IAM role to use to create this stack set.  Specify an
            IAM role only if you are using customized administrator roles to control which users or groups
            can manage specific stack sets within the same administrator account. For more information, see
            Prerequisites: Granting Permissions for Stack Set Operations in the CloudFormation User Guide. Defaults to None.
        execution_role_name(Text, optional): The name of the IAM execution role to use to create the stack set. If you do not specify an
            execution role, CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the
            stack set operation. Specify an IAM role only if you are using customized execution roles to
            control which stack resources users and groups can include in their stack sets. Defaults to None.
        permission_model(Text, optional): Describes how the IAM roles required for stack set operations are created. By default, SELF-
            MANAGED is specified.   With self-managed permissions, you must create the administrator and
            execution roles required to deploy to target accounts. For more information, see Grant Self-
            Managed Stack Set Permissions.   With service-managed permissions, StackSets automatically
            creates the IAM roles required to deploy to accounts managed by Organizations. For more
            information, see Grant Service-Managed Stack Set Permissions. Defaults to None.
        auto_deployment(Dict, optional): Describes whether StackSets automatically deploys to Organizations accounts that are added to
            the target organization or organizational unit (OU). Specify only if PermissionModel is
            SERVICE_MANAGED. Defaults to None.
        call_as(Text, optional): [Service-managed permissions] Specifies whether you are acting as an account administrator in
            the organization's management account or as a delegated administrator in a member account. By
            default, SELF is specified. Use SELF for stack sets with self-managed permissions.   To create a
            stack set with service-managed permissions while signed in to the management account, specify
            SELF.   To create a stack set with service-managed permissions while signed in to a delegated
            administrator account, specify DELEGATED_ADMIN. Your account must be registered as a delegated
            admin in the management account. For more information, see Register a delegated administrator in
            the CloudFormation User Guide.   Stack sets with service-managed permissions are created in the
            management account, including stack sets that are created by delegated administrators. Defaults to None.
        client_request_token(Text, optional): A unique identifier for this CreateStackSet request. Specify this token if you plan to retry
            requests so that CloudFormation knows that you're not attempting to create another stack set
            with the same name. You might retry CreateStackSet requests to ensure that CloudFormation
            successfully received them. If you don't specify an operation ID, the SDK generates one
            automatically. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.cloudformation.stack_set.present:
                - name: value
                - stack_set_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.cloudformation.stack_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.cloudformation.describe_stack_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.cloudformation.create_stack_set(
                ctx,
                
                
                **{"StackSetName": stack_set_name, "Description": description, "TemplateBody": template_body, "TemplateURL": template_url, "StackId": stack_id, "Parameters": parameters, "Capabilities": capabilities, "Tags": tags, "AdministrationRoleARN": administration_role_arn, "ExecutionRoleName": execution_role_name, "PermissionModel": permission_model, "AutoDeployment": auto_deployment, "CallAs": call_as, "ClientRequestToken": client_request_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.cloudformation.describe_stack_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, stack_set_name: Text, call_as: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a stack set. Before you can delete a stack set, all of its member stack instances must be deleted. For
    more information about how to do this, see DeleteStackInstances.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        stack_set_name(Text): The name or unique ID of the stack set that you're deleting. You can obtain this value by
            running ListStackSets.
        call_as(Text, optional): [Service-managed permissions] Specifies whether you are acting as an account administrator in
            the organization's management account or as a delegated administrator in a member account. By
            default, SELF is specified. Use SELF for stack sets with self-managed permissions.   If you are
            signed in to the management account, specify SELF.   If you are signed in to a delegated
            administrator account, specify DELEGATED_ADMIN. Your account must be registered as a delegated
            administrator in the management account. For more information, see Register a delegated
            administrator in the CloudFormation User Guide. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.cloudformation.stack_set.absent:
                - name: value
                - stack_set_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.cloudformation.stack_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.cloudformation.describe_stack_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.cloudformation.delete_stack_set(
                ctx,
                
                
                **{"StackSetName": stack_set_name, "CallAs": call_as}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.cloudformation.describe_stack_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

