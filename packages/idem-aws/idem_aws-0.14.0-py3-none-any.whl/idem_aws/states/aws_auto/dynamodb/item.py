"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.dynamodb.delete_item
hub.exec.boto3.client.dynamodb.get_item
hub.exec.boto3.client.dynamodb.put_item
hub.exec.boto3.client.dynamodb.update_item
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, table_name: Text, item: Dict, expected: Dict = None, return_values: Text = None, return_consumed_capacity: Text = None, return_item_collection_metrics: Text = None, conditional_operator: Text = None, condition_expression: Text = None, expression_attribute_names: Dict = None, expression_attribute_values: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new
    item already exists in the specified table, the new item completely replaces the existing item. You can perform
    a conditional put operation (add a new item if one with the specified primary key doesn't exist), or replace an
    existing item if it has certain attribute values. You can return the item's attribute values in the same
    operation, using the ReturnValues parameter.  This topic provides general information about the PutItem API. For
    information on how to call the PutItem API using the AWS SDK in specific languages, see the following:
    PutItem in the AWS Command Line Interface      PutItem in the AWS SDK for .NET      PutItem in the AWS SDK for
    C++      PutItem in the AWS SDK for Go      PutItem in the AWS SDK for Java      PutItem in the AWS SDK for
    JavaScript      PutItem in the AWS SDK for PHP V3      PutItem in the AWS SDK for Python      PutItem in the AWS
    SDK for Ruby V2     When you add an item, the primary key attributes are the only required attributes. Attribute
    values cannot be null. Empty String and Binary attribute values are allowed. Attribute values of type String and
    Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.
    Set type attributes cannot be empty.  Invalid Requests with empty values will be rejected with a
    ValidationException exception.  To prevent a new item from replacing an existing item, use a conditional
    expression that contains the attribute_not_exists function with the name of the attribute being used as the
    partition key for the table. Since every record must contain that attribute, the attribute_not_exists function
    will only succeed if no matching item exists.  For more information about PutItem, see Working with Items in the
    Amazon DynamoDB Developer Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        table_name(Text): The name of the table to contain the item.
        item(Dict): A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are
            required; you can optionally provide other attribute name-value pairs for the item. You must
            provide all of the attributes for the primary key. For example, with a simple primary key, you
            only need to provide a value for the partition key. For a composite primary key, you must
            provide both values for both the partition key and the sort key. If you specify any attributes
            that are part of an index key, then the data types for those attributes must match those of the
            schema in the table's attribute definition. Empty String and Binary attribute values are
            allowed. Attribute values of type String and Binary must have a length greater than zero if the
            attribute is used as a key attribute for a table or index. For more information about primary
            keys, see Primary Key in the Amazon DynamoDB Developer Guide. Each element in the Item map is an
            AttributeValue object.
        expected(Dict, optional): This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected
            in the Amazon DynamoDB Developer Guide. Defaults to None.
        return_values(Text, optional): Use ReturnValues if you want to get the item attributes as they appeared before they were
            updated with the PutItem request. For PutItem, the valid values are:    NONE - If ReturnValues
            is not specified, or if its value is NONE, then nothing is returned. (This setting is the
            default for ReturnValues.)    ALL_OLD - If PutItem overwrote an attribute name-value pair, then
            the content of the old item is returned.    The ReturnValues parameter is used by several
            DynamoDB operations; however, PutItem does not recognize any values other than NONE or ALL_OLD. Defaults to None.
        return_consumed_capacity(Text, optional): Determines the level of detail about provisioned throughput consumption that is returned in the
            response:    INDEXES - The response includes the aggregate ConsumedCapacity for the operation,
            together with ConsumedCapacity for each table and secondary index that was accessed. Note that
            some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these
            cases, specifying INDEXES will only return ConsumedCapacity information for table(s).    TOTAL -
            The response includes only the aggregate ConsumedCapacity for the operation.    NONE - No
            ConsumedCapacity details are included in the response. Defaults to None.
        return_item_collection_metrics(Text, optional): Determines whether item collection metrics are returned. If set to SIZE, the response includes
            statistics about item collections, if any, that were modified during the operation are returned
            in the response. If set to NONE (the default), no statistics are returned. Defaults to None.
        conditional_operator(Text, optional): This is a legacy parameter. Use ConditionExpression instead. For more information, see
            ConditionalOperator in the Amazon DynamoDB Developer Guide. Defaults to None.
        condition_expression(Text, optional): A condition that must be satisfied in order for a conditional PutItem operation to succeed. An
            expression can contain any of the following:   Functions: attribute_exists |
            attribute_not_exists | attribute_type | contains | begins_with | size  These function names are
            case-sensitive.   Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN      Logical
            operators: AND | OR | NOT    For more information on condition expressions, see Condition
            Expressions in the Amazon DynamoDB Developer Guide. Defaults to None.
        expression_attribute_names(Dict, optional): One or more substitution tokens for attribute names in an expression. The following are some use
            cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a
            DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name
            in an expression.   To prevent special characters in an attribute name from being misinterpreted
            in an expression.   Use the # character in an expression to dereference an attribute name. For
            example, consider the following attribute name:    Percentile    The name of this attribute
            conflicts with a reserved word, so it cannot be used directly in an expression. (For the
            complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To
            work around this, you could specify the following for ExpressionAttributeNames:
            {"#P":"Percentile"}    You could then use this substitution in an expression, as in this
            example:    #P = :val     Tokens that begin with the : character are expression attribute
            values, which are placeholders for the actual value at runtime.  For more information on
            expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer
            Guide. Defaults to None.
        expression_attribute_values(Dict, optional): One or more values that can be substituted in an expression. Use the : (colon) character in an
            expression to dereference an attribute value. For example, suppose that you wanted to check
            whether the value of the ProductStatus attribute was one of the following:   Available |
            Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as
            follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"},
            ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:
            ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values,
            see Condition Expressions in the Amazon DynamoDB Developer Guide. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.dynamodb.item.present:
                - name: value
                - table_name: value
                - item: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.dynamodb.item.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.dynamodb.get_item(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.dynamodb.put_item(
                ctx,
                
                
                **{"TableName": table_name, "Item": item, "Expected": expected, "ReturnValues": return_values, "ReturnConsumedCapacity": return_consumed_capacity, "ReturnItemCollectionMetrics": return_item_collection_metrics, "ConditionalOperator": conditional_operator, "ConditionExpression": condition_expression, "ExpressionAttributeNames": expression_attribute_names, "ExpressionAttributeValues": expression_attribute_values}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.dynamodb.get_item(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, table_name: Text, key: Dict, expected: Dict = None, conditional_operator: Text = None, return_values: Text = None, return_consumed_capacity: Text = None, return_item_collection_metrics: Text = None, condition_expression: Text = None, expression_attribute_names: Dict = None, expression_attribute_values: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the
    item if it exists, or if it has an expected attribute value. In addition to deleting an item, you can also
    return the item's attribute values in the same operation, using the ReturnValues parameter. Unless you specify
    conditions, the DeleteItem is an idempotent operation; running it multiple times on the same item or attribute
    does not result in an error response. Conditional deletes are useful for deleting items only if specific
    conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not
    deleted.

    Args:
        name(Text): The name of the state.
        table_name(Text): The name of the table from which to delete the item.
        key(Dict): A map of attribute names to AttributeValue objects, representing the primary key of the item to
            delete. For the primary key, you must provide all of the attributes. For example, with a simple
            primary key, you only need to provide a value for the partition key. For a composite primary
            key, you must provide values for both the partition key and the sort key.
        expected(Dict, optional): This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected
            in the Amazon DynamoDB Developer Guide. Defaults to None.
        conditional_operator(Text, optional): This is a legacy parameter. Use ConditionExpression instead. For more information, see
            ConditionalOperator in the Amazon DynamoDB Developer Guide. Defaults to None.
        return_values(Text, optional): Use ReturnValues if you want to get the item attributes as they appeared before they were
            deleted. For DeleteItem, the valid values are:    NONE - If ReturnValues is not specified, or if
            its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)
            ALL_OLD - The content of the old item is returned.    The ReturnValues parameter is used by
            several DynamoDB operations; however, DeleteItem does not recognize any values other than NONE
            or ALL_OLD. Defaults to None.
        return_consumed_capacity(Text, optional): Determines the level of detail about provisioned throughput consumption that is returned in the
            response:    INDEXES - The response includes the aggregate ConsumedCapacity for the operation,
            together with ConsumedCapacity for each table and secondary index that was accessed. Note that
            some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these
            cases, specifying INDEXES will only return ConsumedCapacity information for table(s).    TOTAL -
            The response includes only the aggregate ConsumedCapacity for the operation.    NONE - No
            ConsumedCapacity details are included in the response. Defaults to None.
        return_item_collection_metrics(Text, optional): Determines whether item collection metrics are returned. If set to SIZE, the response includes
            statistics about item collections, if any, that were modified during the operation are returned
            in the response. If set to NONE (the default), no statistics are returned. Defaults to None.
        condition_expression(Text, optional): A condition that must be satisfied in order for a conditional DeleteItem to succeed. An
            expression can contain any of the following:   Functions: attribute_exists |
            attribute_not_exists | attribute_type | contains | begins_with | size  These function names are
            case-sensitive.   Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN      Logical
            operators: AND | OR | NOT    For more information about condition expressions, see Condition
            Expressions in the Amazon DynamoDB Developer Guide. Defaults to None.
        expression_attribute_names(Dict, optional): One or more substitution tokens for attribute names in an expression. The following are some use
            cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a
            DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name
            in an expression.   To prevent special characters in an attribute name from being misinterpreted
            in an expression.   Use the # character in an expression to dereference an attribute name. For
            example, consider the following attribute name:    Percentile    The name of this attribute
            conflicts with a reserved word, so it cannot be used directly in an expression. (For the
            complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To
            work around this, you could specify the following for ExpressionAttributeNames:
            {"#P":"Percentile"}    You could then use this substitution in an expression, as in this
            example:    #P = :val     Tokens that begin with the : character are expression attribute
            values, which are placeholders for the actual value at runtime.  For more information on
            expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer
            Guide. Defaults to None.
        expression_attribute_values(Dict, optional): One or more values that can be substituted in an expression. Use the : (colon) character in an
            expression to dereference an attribute value. For example, suppose that you wanted to check
            whether the value of the ProductStatus attribute was one of the following:   Available |
            Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as
            follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"},
            ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:
            ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values,
            see Condition Expressions in the Amazon DynamoDB Developer Guide. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.dynamodb.item.absent:
                - name: value
                - table_name: value
                - key: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)

    

    before = await hub.exec.boto3.client.dynamodb.get_item(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.dynamodb.delete_item(
                ctx,
                
                
                **{"TableName": table_name, "Key": key, "Expected": expected, "ConditionalOperator": conditional_operator, "ReturnValues": return_values, "ReturnConsumedCapacity": return_consumed_capacity, "ReturnItemCollectionMetrics": return_item_collection_metrics, "ConditionExpression": condition_expression, "ExpressionAttributeNames": expression_attribute_names, "ExpressionAttributeValues": expression_attribute_values}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.dynamodb.get_item(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

