"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.dynamodb.create_table
hub.exec.boto3.client.dynamodb.delete_table
hub.exec.boto3.client.dynamodb.describe_table
hub.exec.boto3.client.dynamodb.list_tables
hub.exec.boto3.client.dynamodb.update_table
resource = hub.tool.boto3.resource.create(ctx, "dynamodb", "Table", name)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete_item, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, get_item, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, put_item, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, query, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, scan, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, update, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, update_item, *args, **kwargs)
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, attribute_definitions: List, table_name: Text, key_schema: List, local_secondary_indexes: List = None, global_secondary_indexes: List = None, billing_mode: Text = None, provisioned_throughput: Dict = None, stream_specification: Dict = None, sse_specification: Dict = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    The CreateTable operation adds a new table to your account. In an AWS account, table names must be unique within
    each Region. That is, you can have two tables with same name if you create the tables in different Regions.
    CreateTable is an asynchronous operation. Upon receiving a CreateTable request, DynamoDB immediately returns a
    response with a TableStatus of CREATING. After the table is created, DynamoDB sets the TableStatus to ACTIVE.
    You can perform read and write operations only on an ACTIVE table.  You can optionally define secondary indexes
    on the new table, as part of the CreateTable operation. If you want to create multiple tables with secondary
    indexes on them, you must create the tables sequentially. Only one table with secondary indexes can be in the
    CREATING state at any given time. You can use the DescribeTable action to check the table status.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        attribute_definitions(List): An array of attributes that describe the key schema for the table and indexes.
        table_name(Text): The name of the table to create.
        key_schema(List): Specifies the attributes that make up the primary key for a table or an index. The attributes in
            KeySchema must also be defined in the AttributeDefinitions array. For more information, see Data
            Model in the Amazon DynamoDB Developer Guide. Each KeySchemaElement in the array is composed of:
            AttributeName - The name of this key attribute.    KeyType - The role that the key attribute
            will assume:    HASH - partition key    RANGE - sort key      The partition key of an item is
            also known as its hash attribute. The term "hash attribute" derives from the DynamoDB usage of
            an internal hash function to evenly distribute data items across partitions, based on their
            partition key values. The sort key of an item is also known as its range attribute. The term
            "range attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.  For a simple primary key
            (partition key), you must provide exactly one element with a KeyType of HASH. For a composite
            primary key (partition key and sort key), you must provide exactly two elements, in this order:
            The first element must have a KeyType of HASH, and the second element must have a KeyType of
            RANGE. For more information, see Working with Tables in the Amazon DynamoDB Developer Guide.
        local_secondary_indexes(List, optional): One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is
            scoped to a given partition key value. There is a 10 GB size limit per partition key value;
            otherwise, the size of a local secondary index is unconstrained. Each local secondary index in
            the array includes the following:    IndexName - The name of the local secondary index. Must be
            unique only for this table.     KeySchema - Specifies the key schema for the local secondary
            index. The key schema must begin with the same partition key as the table.    Projection -
            Specifies attributes that are copied (projected) from the table into the index. These are in
            addition to the primary key attributes and index key attributes, which are automatically
            projected. Each attribute specification is composed of:    ProjectionType - One of the
            following:    KEYS_ONLY - Only the index and primary keys are projected into the index.
            INCLUDE - Only the specified table attributes are projected into the index. The list of
            projected attributes is in NonKeyAttributes.    ALL - All of the table attributes are projected
            into the index.      NonKeyAttributes - A list of one or more non-key attribute names that are
            projected into the secondary index. The total count of attributes provided in NonKeyAttributes,
            summed across all of the secondary indexes, must not exceed 100. If you project the same
            attribute into two different indexes, this counts as two distinct attributes when determining
            the total. Defaults to None.
        global_secondary_indexes(List, optional): One or more global secondary indexes (the maximum is 20) to be created on the table. Each global
            secondary index in the array includes the following:    IndexName - The name of the global
            secondary index. Must be unique only for this table.     KeySchema - Specifies the key schema
            for the global secondary index.    Projection - Specifies attributes that are copied (projected)
            from the table into the index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected. Each attribute specification is composed of:
            ProjectionType - One of the following:    KEYS_ONLY - Only the index and primary keys are
            projected into the index.    INCLUDE - Only the specified table attributes are projected into
            the index. The list of projected attributes is in NonKeyAttributes.    ALL - All of the table
            attributes are projected into the index.      NonKeyAttributes - A list of one or more non-key
            attribute names that are projected into the secondary index. The total count of attributes
            provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100.
            If you project the same attribute into two different indexes, this counts as two distinct
            attributes when determining the total.      ProvisionedThroughput - The provisioned throughput
            settings for the global secondary index, consisting of read and write capacity units. Defaults to None.
        billing_mode(Text, optional): Controls how you are charged for read and write throughput and how you manage capacity. This
            setting can be changed later.    PROVISIONED - We recommend using PROVISIONED for predictable
            workloads. PROVISIONED sets the billing mode to Provisioned Mode.    PAY_PER_REQUEST - We
            recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing
            mode to On-Demand Mode. Defaults to None.
        provisioned_throughput(Dict, optional): Represents the provisioned throughput settings for a specified table or index. The settings can
            be modified using the UpdateTable operation.  If you set BillingMode as PROVISIONED, you must
            specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this
            property. For current minimum and maximum provisioned throughput values, see Service, Account,
            and Table Quotas in the Amazon DynamoDB Developer Guide. Defaults to None.
        stream_specification(Dict, optional): The settings for DynamoDB Streams on the table. These settings consist of:    StreamEnabled -
            Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).
            StreamViewType - When an item in the table is modified, StreamViewType determines what
            information is written to the table's stream. Valid values for StreamViewType are:    KEYS_ONLY
            - Only the key attributes of the modified item are written to the stream.    NEW_IMAGE - The
            entire item, as it appears after it was modified, is written to the stream.    OLD_IMAGE - The
            entire item, as it appeared before it was modified, is written to the stream.
            NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream. Defaults to None.
        sse_specification(Dict, optional): Represents the settings used to enable server-side encryption. Defaults to None.
        tags(List, optional): A list of key-value pairs to label the table. For more information, see Tagging for DynamoDB. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.dynamodb.table.present:
                - name: value
                - attribute_definitions: value
                - table_name: value
                - key_schema: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.dynamodb.table.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "dynamodb", "Table", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.dynamodb.create_table(
                ctx,
                
                
                **{"AttributeDefinitions": attribute_definitions, "TableName": table_name, "KeySchema": key_schema, "LocalSecondaryIndexes": local_secondary_indexes, "GlobalSecondaryIndexes": global_secondary_indexes, "BillingMode": billing_mode, "ProvisionedThroughput": provisioned_throughput, "StreamSpecification": stream_specification, "SSESpecification": sse_specification, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, table_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    The DeleteTable operation deletes a table and all of its items. After a DeleteTable request, the specified table
    is in the DELETING state until DynamoDB completes the deletion. If the table is in the ACTIVE state, you can
    delete it. If a table is in CREATING or UPDATING states, then DynamoDB returns a ResourceInUseException. If the
    specified table does not exist, DynamoDB returns a ResourceNotFoundException. If table is already in the
    DELETING state, no error is returned.   DynamoDB might continue to accept data read and write operations, such
    as GetItem and PutItem, on a table in the DELETING state until the table deletion is complete.  When you delete
    a table, any indexes on that table are also deleted. If you have DynamoDB Streams enabled on the table, then the
    corresponding stream on that table goes into the DISABLED state, and the stream is automatically deleted after
    24 hours. Use the DescribeTable action to check the status of the table.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        table_name(Text): The name of the table to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.dynamodb.table.absent:
                - name: value
                - table_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.dynamodb.table.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "dynamodb", "Table", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.dynamodb.delete_table(
                ctx,
                
                
                **{"TableName": table_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

