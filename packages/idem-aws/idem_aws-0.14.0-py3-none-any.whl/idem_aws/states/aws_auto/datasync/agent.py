"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.datasync.create_agent
hub.exec.boto3.client.datasync.delete_agent
hub.exec.boto3.client.datasync.describe_agent
hub.exec.boto3.client.datasync.list_agents
hub.exec.boto3.client.datasync.update_agent
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, activation_key: Text, agent_name: Text = None, tags: List = None, vpc_endpoint_id: Text = None, subnet_arns: List = None, security_group_arns: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Activates an AWS DataSync agent that you have deployed on your host. The activation process associates your
    agent with your account. In the activation process, you specify information such as the AWS Region that you want
    to activate the agent in. You activate the agent in the AWS Region where your target locations (in Amazon S3 or
    Amazon EFS) reside. Your tasks are created in this AWS Region. You can activate the agent in a VPC (virtual
    private cloud) or provide the agent access to a VPC endpoint so you can run tasks without going over the public
    internet. You can use an agent for more than one location. If a task uses multiple agents, all of them need to
    have status AVAILABLE for the task to run. If you use multiple agents for a source location, the status of all
    the agents must be AVAILABLE for the task to run.  Agents are automatically updated by AWS on a regular basis,
    using a mechanism that ensures minimal interruption to your tasks.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        activation_key(Text): Your agent activation key. You can get the activation key either by sending an HTTP GET request
            with redirects that enable you to get the agent IP address (port 80). Alternatively, you can get
            it from the AWS DataSync console. The redirect URL returned in the response provides you the
            activation key for your agent in the query string parameter activationKey. It might also include
            other activation-related parameters; however, these are merely defaults. The arguments you pass
            to this API call determine the actual configuration of your agent. For more information, see
            Activating an Agent in the AWS DataSync User Guide.
        agent_name(Text, optional): The name you configured for your agent. This value is a text reference that is used to identify
            the agent in the console. Defaults to None.
        tags(List, optional): The key-value pair that represents the tag that you want to associate with the agent. The value
            can be an empty string. This value helps you manage, filter, and search for your agents.  Valid
            characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and
            the following special characters: + - = . _ : / @. Defaults to None.
        vpc_endpoint_id(Text, optional): The ID of the VPC (virtual private cloud) endpoint that the agent has access to. This is the
            client-side VPC endpoint, also called a PrivateLink. If you don't have a PrivateLink VPC
            endpoint, see Creating a VPC Endpoint Service Configuration in the Amazon VPC User Guide. VPC
            endpoint ID looks like this: vpce-01234d5aff67890e1. Defaults to None.
        subnet_arns(List, optional): The Amazon Resource Names (ARNs) of the subnets in which DataSync will create elastic network
            interfaces for each data transfer task. The agent that runs a task must be private. When you
            start a task that is associated with an agent created in a VPC, or one that has access to an IP
            address in a VPC, then the task is also private. In this case, DataSync creates four network
            interfaces for each task in your subnet. For a data transfer to work, the agent must be able to
            route to all these four network interfaces. Defaults to None.
        security_group_arns(List, optional): The ARNs of the security groups used to protect your data transfer task subnets. See
            SecurityGroupArns. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.datasync.agent.present:
                - name: value
                - activation_key: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.datasync.agent.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.datasync.describe_agent(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.datasync.create_agent(
                ctx,
                
                
                **{"ActivationKey": activation_key, "AgentName": agent_name, "Tags": tags, "VpcEndpointId": vpc_endpoint_id, "SubnetArns": subnet_arns, "SecurityGroupArns": security_group_arns}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.datasync.describe_agent(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, agent_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an agent. To specify which agent to delete, use the Amazon Resource Name (ARN) of the agent in your
    request. The operation disassociates the agent from your AWS account. However, it doesn't delete the agent
    virtual machine (VM) from your on-premises environment.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        agent_arn(Text): The Amazon Resource Name (ARN) of the agent to delete. Use the ListAgents operation to return a
            list of agents for your account and AWS Region.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.datasync.agent.absent:
                - name: value
                - agent_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.datasync.agent.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.datasync.describe_agent(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.datasync.delete_agent(
                ctx,
                
                
                **{"AgentArn": agent_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.datasync.describe_agent(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

