"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.forecast.create_forecast_export_job
hub.exec.boto3.client.forecast.delete_forecast_export_job
hub.exec.boto3.client.forecast.describe_forecast_export_job
hub.exec.boto3.client.forecast.list_forecast_export_jobs
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, forecast_export_job_name: Text, forecast_arn: Text, destination: Dict, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Exports a forecast created by the CreateForecast operation to your Amazon Simple Storage Service (Amazon S3)
    bucket. The forecast file name will match the following conventions:
    <ForecastExportJobName>_<ExportTimestamp>_<PartNumber> where the <ExportTimestamp> component is in Java
    SimpleDateFormat (yyyy-MM-ddTHH-mm-ssZ). You must specify a DataDestination object that includes an AWS Identity
    and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more
    information, see aws-forecast-iam-roles. For more information, see howitworks-forecast. To get a list of all
    your forecast export jobs, use the ListForecastExportJobs operation.  The Status of the forecast export job must
    be ACTIVE before you can access the forecast in your Amazon S3 bucket. To get the status, use the
    DescribeForecastExportJob operation.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        forecast_export_job_name(Text): The name for the forecast export job.
        forecast_arn(Text): The Amazon Resource Name (ARN) of the forecast that you want to export.
        destination(Dict): The location where you want to save the forecast and an AWS Identity and Access Management (IAM)
            role that Amazon Forecast can assume to access the location. The forecast must be exported to an
            Amazon S3 bucket. If encryption is used, Destination must include an AWS Key Management Service
            (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.
        tags(List, optional): The optional metadata that you apply to the forecast export job to help you categorize and
            organize them. Each tag consists of a key and an optional value, both of which you define. The
            following basic restrictions apply to tags:   Maximum number of tags per resource - 50.   For
            each resource, each tag key must be unique, and each tag key can have only one value.   Maximum
            key length - 128 Unicode characters in UTF-8.   Maximum value length - 256 Unicode characters in
            UTF-8.   If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters are:
            letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : /
            @.   Tag keys and values are case sensitive.   Do not use aws:, AWS:, or any upper or lowercase
            combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or
            delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its
            prefix but the key does not, then Forecast considers it to be a user tag and will count against
            the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per
            resource limit. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.forecast.forecast_export_job.present:
                - name: value
                - forecast_export_job_name: value
                - forecast_arn: value
                - destination: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.forecast.forecast_export_job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.forecast.describe_forecast_export_job(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.forecast.create_forecast_export_job(
                ctx,
                
                
                **{"ForecastExportJobName": forecast_export_job_name, "ForecastArn": forecast_arn, "Destination": destination, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.forecast.describe_forecast_export_job(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, forecast_export_job_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a forecast export job created using the CreateForecastExportJob operation. You can delete only export
    jobs that have a status of ACTIVE or CREATE_FAILED. To get the status, use the DescribeForecastExportJob
    operation.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        forecast_export_job_arn(Text): The Amazon Resource Name (ARN) of the forecast export job to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.forecast.forecast_export_job.absent:
                - name: value
                - forecast_export_job_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.forecast.forecast_export_job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.forecast.describe_forecast_export_job(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.forecast.delete_forecast_export_job(
                ctx,
                
                
                **{"ForecastExportJobArn": forecast_export_job_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.forecast.describe_forecast_export_job(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

