"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.lightsail.create_relational_database_snapshot
hub.exec.boto3.client.lightsail.delete_relational_database_snapshot
hub.exec.boto3.client.lightsail.get_relational_database_snapshots
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, relational_database_name: Text, relational_database_snapshot_name: Text, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups, to make copies of a
    database, and to save data before deleting a database. The create relational database snapshot operation
    supports tag-based access control via request tags. For more information, see the Amazon Lightsail Developer
    Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        relational_database_name(Text): The name of the database on which to base your new snapshot.
        relational_database_snapshot_name(Text): The name for your new database snapshot. Constraints:   Must contain from 2 to 255 alphanumeric
            characters, or hyphens.   The first and last character must be a letter or number.
        tags(List, optional): The tag keys and optional values to add to the resource during create. Use the TagResource
            action to tag a resource after it's created. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.lightsail.relational_database_snapshot.present:
                - name: value
                - relational_database_name: value
                - relational_database_snapshot_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lightsail.relational_database_snapshot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.lightsail.get_relational_database_snapshots(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.lightsail.create_relational_database_snapshot(
                ctx,
                
                
                **{"relationalDatabaseName": relational_database_name, "relationalDatabaseSnapshotName": relational_database_snapshot_name, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.lightsail.get_relational_database_snapshots(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, relational_database_snapshot_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a database snapshot in Amazon Lightsail. The delete relational database snapshot operation supports tag-
    based access control via resource tags applied to the resource identified by relationalDatabaseName. For more
    information, see the Amazon Lightsail Developer Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        relational_database_snapshot_name(Text): The name of the database snapshot that you are deleting.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.lightsail.relational_database_snapshot.absent:
                - name: value
                - relational_database_snapshot_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lightsail.relational_database_snapshot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.lightsail.get_relational_database_snapshots(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.lightsail.delete_relational_database_snapshot(
                ctx,
                
                
                **{"relationalDatabaseSnapshotName": relational_database_snapshot_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.lightsail.get_relational_database_snapshots(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

