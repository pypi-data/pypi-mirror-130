"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.qldb.create_ledger
hub.exec.boto3.client.qldb.delete_ledger
hub.exec.boto3.client.qldb.describe_ledger
hub.exec.boto3.client.qldb.list_ledgers
hub.exec.boto3.client.qldb.update_ledger
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, permissions_mode: Text, tags: Dict = None, deletion_protection: bool = None, kms_key: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new ledger in your account in the current Region.

    Args:
        name(Text): The name of the ledger that you want to create. The name must be unique among all of the ledgers
            in your account in the current Region. Naming constraints for ledger names are defined in Quotas
            in Amazon QLDB in the Amazon QLDB Developer Guide.
        tags(Dict, optional): The key-value pairs to add as tags to the ledger that you want to create. Tag keys are case
            sensitive. Tag values are case sensitive and can be null. Defaults to None.
        permissions_mode(Text): The permissions mode to assign to the ledger that you want to create. This parameter can have
            one of the following values:    ALLOW_ALL: A legacy permissions mode that enables access control
            with API-level granularity for ledgers. This mode allows users who have the SendCommand API
            permission for this ledger to run all PartiQL commands (hence, ALLOW_ALL) on any tables in the
            specified ledger. This mode disregards any table-level or command-level IAM permissions policies
            that you create for the ledger.    STANDARD: (Recommended) A permissions mode that enables
            access control with finer granularity for ledgers, tables, and PartiQL commands. By default,
            this mode denies all user requests to run any PartiQL commands on any tables in this ledger. To
            allow PartiQL commands to run, you must create IAM permissions policies for specific table
            resources and PartiQL actions, in addition to the SendCommand API permission for the ledger. For
            information, see Getting started with the standard permissions mode in the Amazon QLDB Developer
            Guide.    We strongly recommend using the STANDARD permissions mode to maximize the security of
            your ledger data.
        deletion_protection(bool, optional): The flag that prevents a ledger from being deleted by any user. If not provided on ledger
            creation, this feature is enabled (true) by default. If deletion protection is enabled, you must
            first disable it before you can delete the ledger. You can disable it by calling the
            UpdateLedger operation to set the flag to false. Defaults to None.
        kms_key(Text, optional): The key in Key Management Service (KMS) to use for encryption of data at rest in the ledger. For
            more information, see Encryption at rest in the Amazon QLDB Developer Guide. Use one of the
            following options to specify this parameter:    AWS_OWNED_KMS_KEY: Use an KMS key that is owned
            and managed by Amazon Web Services on your behalf.    Undefined: By default, use an Amazon Web
            Services owned KMS key.    A valid symmetric customer managed KMS key: Use the specified KMS key
            in your account that you create, own, and manage. Amazon QLDB does not support asymmetric keys.
            For more information, see Using symmetric and asymmetric keys in the Key Management Service
            Developer Guide.   To specify a customer managed KMS key, you can use its key ID, Amazon
            Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with
            "alias/". To specify a key in a different account, you must use the key ARN or alias ARN. For
            example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-
            east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias
            Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    For more information, see
            Key identifiers (KeyId) in the Key Management Service Developer Guide. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.qldb.ledger.present:
                - name: value
                - permissions_mode: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.qldb.ledger.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.qldb.describe_ledger(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.qldb.create_ledger(
                ctx,
                
                
                **{"Name": name, "Tags": tags, "PermissionsMode": permissions_mode, "DeletionProtection": deletion_protection, "KmsKey": kms_key}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.qldb.describe_ledger(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a ledger and all of its contents. This action is irreversible. If deletion protection is enabled, you
    must first disable it before you can delete the ledger. You can disable it by calling the UpdateLedger operation
    to set the flag to false.

    Args:
        name(Text): The name of the ledger that you want to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.qldb.ledger.absent:
                - name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.qldb.ledger.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.qldb.describe_ledger(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.qldb.delete_ledger(
                ctx,
                
                
                **{"Name": name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.qldb.describe_ledger(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

