"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.dms.create_replication_subnet_group
hub.exec.boto3.client.dms.delete_replication_subnet_group
hub.exec.boto3.client.dms.describe_replication_subnet_groups
hub.exec.boto3.client.dms.modify_replication_subnet_group
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, replication_subnet_group_identifier: Text, replication_subnet_group_description: Text, subnet_ids: List, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a replication subnet group given a list of the subnet IDs in a VPC.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        replication_subnet_group_identifier(Text): The name for the replication subnet group. This value is stored as a lowercase string.
            Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces,
            underscores, or hyphens. Must not be "default". Example: mySubnetgroup.
        replication_subnet_group_description(Text): The description for the subnet group.
        subnet_ids(List): One or more subnet IDs to be assigned to the subnet group.
        tags(List, optional): One or more tags to be assigned to the subnet group. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.dms.replication_subnet_group.present:
                - name: value
                - replication_subnet_group_identifier: value
                - replication_subnet_group_description: value
                - subnet_ids: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.dms.replication_subnet_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.dms.describe_replication_subnet_groups(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.dms.create_replication_subnet_group(
                ctx,
                
                
                **{"ReplicationSubnetGroupIdentifier": replication_subnet_group_identifier, "ReplicationSubnetGroupDescription": replication_subnet_group_description, "SubnetIds": subnet_ids, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.dms.describe_replication_subnet_groups(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, replication_subnet_group_identifier: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a subnet group.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        replication_subnet_group_identifier(Text): The subnet group name of the replication instance.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.dms.replication_subnet_group.absent:
                - name: value
                - replication_subnet_group_identifier: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.dms.replication_subnet_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.dms.describe_replication_subnet_groups(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.dms.delete_replication_subnet_group(
                ctx,
                
                
                **{"ReplicationSubnetGroupIdentifier": replication_subnet_group_identifier}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.dms.describe_replication_subnet_groups(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

