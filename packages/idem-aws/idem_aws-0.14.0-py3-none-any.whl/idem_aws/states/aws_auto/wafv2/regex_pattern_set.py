"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.wafv2.create_regex_pattern_set
hub.exec.boto3.client.wafv2.delete_regex_pattern_set
hub.exec.boto3.client.wafv2.get_regex_pattern_set
hub.exec.boto3.client.wafv2.list_regex_pattern_sets
hub.exec.boto3.client.wafv2.update_regex_pattern_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, scope: Text, regular_expression_list: List, description: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a RegexPatternSet, which you reference in a RegexPatternSetReferenceStatement, to have WAF inspect a web
    request component for the specified patterns.

    Args:
        name(Text): The name of the set. You cannot change the name after you create the set.
        scope(Text): Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A
            regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API,
            or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East
            (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope:
            --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint
            us-east-1.
        description(Text, optional): A description of the set that helps with identification. Defaults to None.
        regular_expression_list(List): Array of regular expression strings.
        tags(List, optional): An array of key:value pairs to associate with the resource. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.wafv2.regex_pattern_set.present:
                - name: value
                - scope: value
                - regular_expression_list: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.wafv2.regex_pattern_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.wafv2.get_regex_pattern_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.wafv2.create_regex_pattern_set(
                ctx,
                
                
                **{"Name": name, "Scope": scope, "Description": description, "RegularExpressionList": regular_expression_list, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.wafv2.get_regex_pattern_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, scope: Text, id_: Text, lock_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified RegexPatternSet.

    Args:
        name(Text): The name of the set. You cannot change the name after you create the set.
        scope(Text): Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A
            regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API,
            or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East
            (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope:
            --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint
            us-east-1.
        id_(Text): A unique identifier for the set. This ID is returned in the responses to create and list
            commands. You provide it to operations like update and delete.
        lock_token(Text): A token used for optimistic locking. WAF returns a token to your get and list requests, to mark
            the state of the entity at the time of the request. To make changes to the entity associated
            with the token, you provide the token to operations like update and delete. WAF uses the token
            to ensure that no changes have been made to the entity since you last retrieved it. If a change
            has been made, the update fails with a WAFOptimisticLockException. If this happens, perform
            another get, and use the new token returned by that operation.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.wafv2.regex_pattern_set.absent:
                - name: value
                - scope: value
                - id_: value
                - lock_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.wafv2.regex_pattern_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.wafv2.get_regex_pattern_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.wafv2.delete_regex_pattern_set(
                ctx,
                
                
                **{"Name": name, "Scope": scope, "Id": id_, "LockToken": lock_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.wafv2.get_regex_pattern_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

