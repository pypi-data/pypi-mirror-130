"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.wafv2.create_ip_set
hub.exec.boto3.client.wafv2.delete_ip_set
hub.exec.boto3.client.wafv2.get_ip_set
hub.exec.boto3.client.wafv2.list_ip_sets
hub.exec.boto3.client.wafv2.update_ip_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, scope: Text, ip_address_version: Text, addresses: List, description: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an IPSet, which you use to identify web requests that originate from specific IP addresses or ranges of
    IP addresses. For example, if you're receiving a lot of requests from a ranges of IP addresses, you can
    configure WAF to block them using an IPSet that lists those IP addresses.

    Args:
        name(Text): The name of the IP set. You cannot change the name of an IPSet after you create it.
        scope(Text): Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A
            regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API,
            or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East
            (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope:
            --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint
            us-east-1.
        description(Text, optional): A description of the IP set that helps with identification. Defaults to None.
        ip_address_version(Text): The version of the IP addresses, either IPV4 or IPV6.
        addresses(List): Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in
            Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges
            except for /0.  Examples:    To configure WAF to allow, block, or count requests that originated
            from the IP address 192.0.2.44, specify 192.0.2.44/32.   To configure WAF to allow, block, or
            count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
            192.0.2.0/24.   To configure WAF to allow, block, or count requests that originated from the IP
            address 1111:0000:0000:0000:0000:0000:0000:0111, specify
            1111:0000:0000:0000:0000:0000:0000:0111/128.   To configure WAF to allow, block, or count
            requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to
            1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
            For more information about CIDR notation, see the Wikipedia entry Classless Inter-Domain
            Routing.
        tags(List, optional): An array of key:value pairs to associate with the resource. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.wafv2.ip_set.present:
                - name: value
                - scope: value
                - ip_address_version: value
                - addresses: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.wafv2.ip_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.wafv2.get_ip_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.wafv2.create_ip_set(
                ctx,
                
                
                **{"Name": name, "Scope": scope, "Description": description, "IPAddressVersion": ip_address_version, "Addresses": addresses, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.wafv2.get_ip_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, scope: Text, id_: Text, lock_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified IPSet.

    Args:
        name(Text): The name of the IP set. You cannot change the name of an IPSet after you create it.
        scope(Text): Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A
            regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API,
            or an AppSync GraphQL API.  To work with CloudFront, you must also specify the Region US East
            (N. Virginia) as follows:    CLI - Specify the Region when you use the CloudFront scope:
            --scope=CLOUDFRONT --region=us-east-1.    API and SDKs - For all calls, use the Region endpoint
            us-east-1.
        id_(Text): A unique identifier for the set. This ID is returned in the responses to create and list
            commands. You provide it to operations like update and delete.
        lock_token(Text): A token used for optimistic locking. WAF returns a token to your get and list requests, to mark
            the state of the entity at the time of the request. To make changes to the entity associated
            with the token, you provide the token to operations like update and delete. WAF uses the token
            to ensure that no changes have been made to the entity since you last retrieved it. If a change
            has been made, the update fails with a WAFOptimisticLockException. If this happens, perform
            another get, and use the new token returned by that operation.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.wafv2.ip_set.absent:
                - name: value
                - scope: value
                - id_: value
                - lock_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.wafv2.ip_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.wafv2.get_ip_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.wafv2.delete_ip_set(
                ctx,
                
                
                **{"Name": name, "Scope": scope, "Id": id_, "LockToken": lock_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.wafv2.get_ip_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

