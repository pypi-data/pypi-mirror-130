"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.worklink.associate_website_certificate_authority
hub.exec.boto3.client.worklink.describe_website_certificate_authority
hub.exec.boto3.client.worklink.disassociate_website_certificate_authority
hub.exec.boto3.client.worklink.list_website_certificate_authorities
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, fleet_arn: Text, certificate: Text, display_name: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Imports the root certificate of a certificate authority (CA) used to obtain TLS certificates used by associated
    websites within the company network.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        fleet_arn(Text): The ARN of the fleet.
        certificate(Text): The root certificate of the CA.
        display_name(Text, optional): The certificate name to display. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.worklink.website_certificate_authority.present:
                - name: value
                - fleet_arn: value
                - certificate: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.worklink.website_certificate_authority.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.worklink.describe_website_certificate_authority(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.worklink.associate_website_certificate_authority(
                ctx,
                
                
                **{"FleetArn": fleet_arn, "Certificate": certificate, "DisplayName": display_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.worklink.describe_website_certificate_authority(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, fleet_arn: Text, website_ca_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Removes a certificate authority (CA).

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        fleet_arn(Text): The ARN of the fleet.
        website_ca_id(Text): A unique identifier for the CA.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.worklink.website_certificate_authority.absent:
                - name: value
                - fleet_arn: value
                - website_ca_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.worklink.website_certificate_authority.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.worklink.describe_website_certificate_authority(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.worklink.disassociate_website_certificate_authority(
                ctx,
                
                
                **{"FleetArn": fleet_arn, "WebsiteCaId": website_ca_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.worklink.describe_website_certificate_authority(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

