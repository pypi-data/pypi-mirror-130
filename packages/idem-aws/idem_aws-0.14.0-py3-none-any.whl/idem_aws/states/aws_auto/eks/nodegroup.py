"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.eks.create_nodegroup
hub.exec.boto3.client.eks.delete_nodegroup
hub.exec.boto3.client.eks.describe_nodegroup
hub.exec.boto3.client.eks.list_nodegroups
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, cluster_name: Text, nodegroup_name: Text, subnets: List, node_role: Text, scaling_config: Dict = None, disk_size: int = None, instance_types: List = None, ami_type: Text = None, remote_access: Dict = None, labels: Dict = None, taints: List = None, tags: Dict = None, client_request_token: Text = None, launch_template: Dict = None, update_config: Dict = None, capacity_type: Text = None, version: Text = None, release_version: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a managed node group for an Amazon EKS cluster. You can only create a node group for your cluster that
    is equal to the current Kubernetes version for the cluster. All node groups are created with the latest AMI
    release version for the respective minor Kubernetes version of the cluster, unless you deploy a custom AMI using
    a launch template. For more information about using launch templates, see Launch template support. An Amazon EKS
    managed node group is an Amazon EC2 Auto Scaling group and associated Amazon EC2 instances that are managed by
    Amazon Web Services for an Amazon EKS cluster. Each node group uses a version of the Amazon EKS optimized Amazon
    Linux 2 AMI. For more information, see Managed Node Groups in the Amazon EKS User Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        cluster_name(Text): The name of the cluster to create the node group in.
        nodegroup_name(Text): The unique name to give your node group.
        scaling_config(Dict, optional): The scaling configuration details for the Auto Scaling group that is created for your node
            group. Defaults to None.
        disk_size(int, optional): The root device disk size (in GiB) for your node group instances. The default disk size is 20
            GiB. If you specify launchTemplate, then don't specify diskSize, or the node group deployment
            will fail. For more information about using launch templates with Amazon EKS, see Launch
            template support in the Amazon EKS User Guide. Defaults to None.
        subnets(List): The subnets to use for the Auto Scaling group that is created for your node group. If you
            specify launchTemplate, then don't specify  SubnetId  in your launch template, or the node group
            deployment will fail. For more information about using launch templates with Amazon EKS, see
            Launch template support in the Amazon EKS User Guide.
        instance_types(List, optional): Specify the instance types for a node group. If you specify a GPU instance type, be sure to
            specify AL2_x86_64_GPU with the amiType parameter. If you specify launchTemplate, then you can
            specify zero or one instance type in your launch template or you can specify 0-20 instance types
            for instanceTypes. If however, you specify an instance type in your launch template and specify
            any instanceTypes, the node group deployment will fail. If you don't specify an instance type in
            a launch template or for instanceTypes, then t3.medium is used, by default. If you specify Spot
            for capacityType, then we recommend specifying multiple values for instanceTypes. For more
            information, see Managed node group capacity types and Launch template support in the Amazon EKS
            User Guide. Defaults to None.
        ami_type(Text, optional): The AMI type for your node group. GPU instance types should use the AL2_x86_64_GPU AMI type.
            Non-GPU instances should use the AL2_x86_64 AMI type. Arm instances should use the AL2_ARM_64
            AMI type. All types use the Amazon EKS optimized Amazon Linux 2 AMI. If you specify
            launchTemplate, and your launch template uses a custom AMI, then don't specify amiType, or the
            node group deployment will fail. For more information about using launch templates with Amazon
            EKS, see Launch template support in the Amazon EKS User Guide. Defaults to None.
        remote_access(Dict, optional): The remote access (SSH) configuration to use with your node group. If you specify
            launchTemplate, then don't specify remoteAccess, or the node group deployment will fail. For
            more information about using launch templates with Amazon EKS, see Launch template support in
            the Amazon EKS User Guide. Defaults to None.
        node_role(Text): The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS
            worker node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive
            permissions for these API calls through an IAM instance profile and associated policies. Before
            you can launch nodes and register them into a cluster, you must create an IAM role for those
            nodes to use when they are launched. For more information, see Amazon EKS node IAM role in the
            Amazon EKS User Guide . If you specify launchTemplate, then don't specify  IamInstanceProfile
            in your launch template, or the node group deployment will fail. For more information about
            using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User
            Guide.
        labels(Dict, optional): The Kubernetes labels to be applied to the nodes in the node group when they are created. Defaults to None.
        taints(List, optional): The Kubernetes taints to be applied to the nodes in the node group. Defaults to None.
        tags(Dict, optional): The metadata to apply to the node group to assist with categorization and organization. Each tag
            consists of a key and an optional value, both of which you define. Node group tags do not
            propagate to any other resources associated with the node group, such as the Amazon EC2
            instances or subnets. Defaults to None.
        client_request_token(Text, optional): Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Defaults to None.
        launch_template(Dict, optional): An object representing a node group's launch template specification. If specified, then do not
            specify instanceTypes, diskSize, or remoteAccess and make sure that the launch template meets
            the requirements in launchTemplateSpecification. Defaults to None.
        update_config(Dict, optional): The node group update configuration. Defaults to None.
        capacity_type(Text, optional): The capacity type for your node group. Defaults to None.
        version(Text, optional): The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the
            cluster is used, and this is the only accepted specified value. If you specify launchTemplate,
            and your launch template uses a custom AMI, then don't specify version, or the node group
            deployment will fail. For more information about using launch templates with Amazon EKS, see
            Launch template support in the Amazon EKS User Guide. Defaults to None.
        release_version(Text, optional): The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the
            latest available AMI version for the node group's current Kubernetes version is used. For more
            information, see Amazon EKS optimized Amazon Linux 2 AMI versions in the Amazon EKS User Guide.
            If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify
            releaseVersion, or the node group deployment will fail. For more information about using launch
            templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.eks.nodegroup.present:
                - name: value
                - cluster_name: value
                - nodegroup_name: value
                - subnets: value
                - node_role: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.eks.nodegroup.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.eks.describe_nodegroup(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.eks.create_nodegroup(
                ctx,
                
                
                **{"clusterName": cluster_name, "nodegroupName": nodegroup_name, "scalingConfig": scaling_config, "diskSize": disk_size, "subnets": subnets, "instanceTypes": instance_types, "amiType": ami_type, "remoteAccess": remote_access, "nodeRole": node_role, "labels": labels, "taints": taints, "tags": tags, "clientRequestToken": client_request_token, "launchTemplate": launch_template, "updateConfig": update_config, "capacityType": capacity_type, "version": version, "releaseVersion": release_version}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.eks.describe_nodegroup(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, cluster_name: Text, nodegroup_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an Amazon EKS node group for a cluster.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        cluster_name(Text): The name of the Amazon EKS cluster that is associated with your node group.
        nodegroup_name(Text): The name of the node group to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.eks.nodegroup.absent:
                - name: value
                - cluster_name: value
                - nodegroup_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.eks.nodegroup.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.eks.describe_nodegroup(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.eks.delete_nodegroup(
                ctx,
                
                
                **{"clusterName": cluster_name, "nodegroupName": nodegroup_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.eks.describe_nodegroup(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

