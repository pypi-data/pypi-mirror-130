"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.kms.create_alias
hub.exec.boto3.client.kms.delete_alias
hub.exec.boto3.client.kms.list_aliases
hub.exec.boto3.client.kms.update_alias
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, alias_name: Text, target_key_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a friendly name for a customer master key (CMK).   Adding, deleting, or updating an alias can allow or
    deny permission to the CMK. For details, see Using ABAC in AWS KMS in the AWS Key Management Service Developer
    Guide.  You can use an alias to identify a CMK in the AWS KMS console, in the DescribeKey operation and in
    cryptographic operations, such as Encrypt and GenerateDataKey. You can also change the CMK that's associated
    with the alias (UpdateAlias) or delete the alias (DeleteAlias) at any time. These operations don't affect the
    underlying CMK.  You can associate the alias with any customer managed CMK in the same AWS Region. Each alias is
    associated with only one CMK at a time, but a CMK can have multiple aliases. A valid CMK is required. You can't
    create an alias without a CMK. The alias must be unique in the account and Region, but you can have aliases with
    the same name in different Regions. For detailed information about aliases, see Using aliases in the AWS Key
    Management Service Developer Guide. This operation does not return a response. To get the alias that you
    created, use the ListAliases operation. The CMK that you use for this operation must be in a compatible key
    state. For details, see Key state: Effect on your CMK in the AWS Key Management Service Developer Guide.  Cross-
    account use: No. You cannot perform this operation on an alias in a different AWS account.  Required permissions
    kms:CreateAlias on the alias (IAM policy).    kms:CreateAlias on the CMK (key policy).   For details, see
    Controlling access to aliases in the AWS Key Management Service Developer Guide.  Related operations:
    DeleteAlias     ListAliases     UpdateAlias

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        alias_name(Text): Specifies the alias name. This value must begin with alias/ followed by a name, such as
            alias/ExampleAlias.  The AliasName value must be string of 1-256 characters. It can contain only
            alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name
            cannot begin with alias/aws/. The alias/aws/ prefix is reserved for AWS managed CMKs.
        target_key_id(Text): Associates the alias with the specified customer managed CMK. The CMK must be in the same AWS
            Region.  A valid CMK ID is required. If you supply a null or empty string value, this operation
            returns an error. For help finding the key ID and ARN, see Finding the Key ID and ARN in the AWS
            Key Management Service Developer Guide. Specify the key ID or key ARN of the CMK. For example:
            Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-
            east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN
            for a CMK, use ListKeys or DescribeKey.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.kms.alias.present:
                - name: value
                - alias_name: value
                - target_key_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.kms.alias.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.kms.list_aliases(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.kms.create_alias(
                ctx,
                
                
                **{"AliasName": alias_name, "TargetKeyId": target_key_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.kms.list_aliases(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, alias_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified alias.   Adding, deleting, or updating an alias can allow or deny permission to the CMK.
    For details, see Using ABAC in AWS KMS in the AWS Key Management Service Developer Guide.  Because an alias is
    not a property of a CMK, you can delete and change the aliases of a CMK without affecting the CMK. Also, aliases
    do not appear in the response from the DescribeKey operation. To get the aliases of all CMKs, use the
    ListAliases operation.  Each CMK can have multiple aliases. To change the alias of a CMK, use DeleteAlias to
    delete the current alias and CreateAlias to create a new alias. To associate an existing alias with a different
    customer master key (CMK), call UpdateAlias.  Cross-account use: No. You cannot perform this operation on an
    alias in a different AWS account.  Required permissions     kms:DeleteAlias on the alias (IAM policy).
    kms:DeleteAlias on the CMK (key policy).   For details, see Controlling access to aliases in the AWS Key
    Management Service Developer Guide.  Related operations:     CreateAlias     ListAliases     UpdateAlias

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        alias_name(Text): The alias to be deleted. The alias name must begin with alias/ followed by the alias name, such
            as alias/ExampleAlias.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.kms.alias.absent:
                - name: value
                - alias_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.kms.alias.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.kms.list_aliases(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.kms.delete_alias(
                ctx,
                
                
                **{"AliasName": alias_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.kms.list_aliases(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

