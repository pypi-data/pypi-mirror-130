"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.importexport.cancel_job
hub.exec.boto3.client.importexport.create_job
hub.exec.boto3.client.importexport.list_jobs
hub.exec.boto3.client.importexport.update_job
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, job_type: Text, manifest: Text, validate_only: bool, manifest_addendum: Text = None, api_version: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    This operation initiates the process of scheduling an upload or download of your data. You include in the
    request a manifest that describes the data transfer specifics. The response to the request includes a job ID,
    which you can use in other operations, a signature that you use to identify your storage device, and the address
    where you should ship your storage device.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        job_type(Text): Specifies whether the job to initiate is an import or export job.
        manifest(Text): The UTF-8 encoded text of the manifest file.
        manifest_addendum(Text, optional): For internal use only. Defaults to None.
        validate_only(bool): Validate the manifest and parameter values in the request but do not actually create a job.
        api_version(Text, optional): Specifies the version of the client tool. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.importexport.job.present:
                - name: value
                - job_type: value
                - manifest: value
                - validate_only: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.importexport.job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.importexport.list_jobs(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.importexport.create_job(
                ctx,
                
                
                **{"JobType": job_type, "Manifest": manifest, "ManifestAddendum": manifest_addendum, "ValidateOnly": validate_only, "APIVersion": api_version}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.importexport.list_jobs(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, job_id: Text, api_version: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has
    already started or is complete.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        job_id(Text): A unique identifier which refers to a particular job.
        api_version(Text, optional): Specifies the version of the client tool. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.importexport.job.absent:
                - name: value
                - job_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.importexport.job.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.importexport.list_jobs(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.importexport.cancel_job(
                ctx,
                
                
                **{"JobId": job_id, "APIVersion": api_version}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.importexport.list_jobs(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

