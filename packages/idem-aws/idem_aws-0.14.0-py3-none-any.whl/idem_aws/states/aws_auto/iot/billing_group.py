"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.iot.create_billing_group
hub.exec.boto3.client.iot.delete_billing_group
hub.exec.boto3.client.iot.describe_billing_group
hub.exec.boto3.client.iot.list_billing_groups
hub.exec.boto3.client.iot.update_billing_group
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, billing_group_name: Text, billing_group_properties: Dict = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a billing group.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        billing_group_name(Text): The name you wish to give to the billing group.
        billing_group_properties(Dict, optional): The properties of the billing group. Defaults to None.
        tags(List, optional): Metadata which can be used to manage the billing group. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.iot.billing_group.present:
                - name: value
                - billing_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.iot.billing_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.iot.describe_billing_group(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.iot.create_billing_group(
                ctx,
                
                
                **{"billingGroupName": billing_group_name, "billingGroupProperties": billing_group_properties, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.iot.describe_billing_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, billing_group_name: Text, expected_version: int = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the billing group.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        billing_group_name(Text): The name of the billing group.
        expected_version(int, optional): The expected version of the billing group. If the version of the billing group does not match
            the expected version specified in the request, the DeleteBillingGroup request is rejected with a
            VersionConflictException. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.iot.billing_group.absent:
                - name: value
                - billing_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.iot.billing_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.iot.describe_billing_group(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.iot.delete_billing_group(
                ctx,
                
                
                **{"billingGroupName": billing_group_name, "expectedVersion": expected_version}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.iot.describe_billing_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

