"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.rds.copy_db_snapshot
hub.exec.boto3.client.rds.create_db_snapshot
hub.exec.boto3.client.rds.delete_db_snapshot
hub.exec.boto3.client.rds.describe_db_snapshots
hub.exec.boto3.client.rds.modify_db_snapshot
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, db_snapshot_identifier: Text, db_instance_identifier: Text, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a snapshot of a DB instance. The source DB instance must be in the available or storage-optimization
    state.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        db_snapshot_identifier(Text): The identifier for the DB snapshot. Constraints:   Can't be null, empty, or blank   Must contain
            from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a
            hyphen or contain two consecutive hyphens   Example: my-snapshot-id.
        db_instance_identifier(Text): The identifier of the DB instance that you want to create the snapshot of. Constraints:   Must
            match the identifier of an existing DBInstance.
        tags(List, optional): A list of tags. For more information, see Tagging Amazon RDS Resources in the Amazon RDS User
            Guide. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.rds.db_snapshot.present:
                - name: value
                - db_snapshot_identifier: value
                - db_instance_identifier: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.rds.db_snapshot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.rds.describe_db_snapshots(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.rds.create_db_snapshot(
                ctx,
                
                
                **{"DBSnapshotIdentifier": db_snapshot_identifier, "DBInstanceIdentifier": db_instance_identifier, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.rds.describe_db_snapshots(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, db_snapshot_identifier: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.  The DB snapshot must
    be in the available state to be deleted.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        db_snapshot_identifier(Text): The DB snapshot identifier. Constraints: Must be the name of an existing DB snapshot in the
            available state.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.rds.db_snapshot.absent:
                - name: value
                - db_snapshot_identifier: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.rds.db_snapshot.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.rds.describe_db_snapshots(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.rds.delete_db_snapshot(
                ctx,
                
                
                **{"DBSnapshotIdentifier": db_snapshot_identifier}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.rds.describe_db_snapshots(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

