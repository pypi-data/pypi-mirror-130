"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.application_autoscaling.delete_scheduled_action
hub.exec.boto3.client.application_autoscaling.describe_scheduled_actions
hub.exec.boto3.client.application_autoscaling.put_scheduled_action
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, service_namespace: Text, scheduled_action_name: Text, resource_id: Text, scalable_dimension: Text, schedule: Text = None, timezone: Text = None, start_time: Text = None, end_time: Text = None, scalable_target_action: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates or updates a scheduled action for an Application Auto Scaling scalable target.  Each scalable target is
    identified by a service namespace, resource ID, and scalable dimension. A scheduled action applies to the
    scalable target identified by those three attributes. You cannot create a scheduled action until you have
    registered the resource as a scalable target. When start and end times are specified with a recurring schedule
    using a cron expression or rates, they form the boundaries for when the recurring action starts and stops. To
    update a scheduled action, specify the parameters that you want to change. If you don't specify start and end
    times, the old values are deleted. For more information, see Scheduled scaling in the Application Auto Scaling
    User Guide.  If a scalable target is deregistered, the scalable target is no longer available to run scheduled
    actions. Any scheduled actions that were specified for the scalable target are deleted.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        service_namespace(Text): The namespace of the AWS service that provides the resource. For a resource provided by your own
            application or service, use custom-resource instead.
        schedule(Text, optional): The schedule for this action. The following formats are supported:   At expressions - "at(yyyy-
            mm-ddThh:mm:ss)"   Rate expressions - "rate(value unit)"   Cron expressions - "cron(fields)"
            At expressions are useful for one-time schedules. Cron expressions are useful for scheduled
            actions that run periodically at a specified date and time, and rate expressions are useful for
            scheduled actions that run at a regular interval. At and cron expressions use Universal
            Coordinated Time (UTC) by default. The cron format consists of six fields separated by white
            spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year]. For rate expressions,
            value is a positive integer and unit is minute | minutes | hour | hours | day | days. For more
            information and examples, see Example scheduled actions for Application Auto Scaling in the
            Application Auto Scaling User Guide. Defaults to None.
        timezone(Text, optional): Specifies the time zone used when setting a scheduled action by using an at or cron expression.
            If a time zone is not provided, UTC is used by default. Valid values are the canonical names of
            the IANA time zones supported by Joda-Time (such as Etc/GMT+9 or Pacific/Tahiti). For more
            information, see https://www.joda.org/joda-time/timezones.html. Defaults to None.
        scheduled_action_name(Text): The name of the scheduled action. This name must be unique among all other scheduled actions on
            the specified scalable target.
        resource_id(Text): The identifier of the resource associated with the scheduled action. This string consists of the
            resource type and unique identifier.   ECS service - The resource type is service and the unique
            identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot
            Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot
            Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR
            cluster - The resource type is instancegroup and the unique identifier is the cluster ID and
            instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0
            fleet - The resource type is fleet and the unique identifier is the fleet name. Example:
            fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is
            the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type
            is index and the unique identifier is the index name. Example: table/my-table/index/my-table-
            index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the
            cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource
            type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-
            point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This
            parameter must specify the OutputValue from the CloudFormation template stack used to access the
            resources. The unique identifier is defined by the service provider. More information is
            available in our GitHub repository.   Amazon Comprehend document classification endpoint - The
            resource type and unique identifier are specified using the endpoint ARN. Example:
            arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Amazon
            Comprehend entity recognizer endpoint - The resource type and unique identifier are specified
            using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-
            endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the
            unique identifier is the function name with a function version or alias name suffix that is not
            $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table
            - The resource type is table and the unique identifier is the table name. Example:
            keyspace/mykeyspace/table/mytable.   Amazon MSK cluster - The resource type and unique
            identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-
            east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5.
        scalable_dimension(Text): The scalable dimension. This string consists of the service namespace, resource type, and
            scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.
            ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.
            elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.
            appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.
            dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.
            dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.
            dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary
            index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB
            global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an
            Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-
            compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for
            an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The
            scalable dimension for a custom resource provided by your own application or service.
            comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units
            for an Amazon Comprehend document classification endpoint.    comprehend:entity-recognizer-
            endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity
            recognizer endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for
            a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an
            Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity
            for an Amazon Keyspaces table.    kafka:broker-storage:VolumeSize - The provisioned volume size
            (in GiB) for brokers in an Amazon MSK cluster.
        start_time(Text, optional): The date and time for this scheduled action to start, in UTC. Defaults to None.
        end_time(Text, optional): The date and time for the recurring schedule to end, in UTC. Defaults to None.
        scalable_target_action(Dict, optional): The new minimum and maximum capacity. You can set both values or just one. At the scheduled
            time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out
            to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto
            Scaling scales in to the maximum capacity. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.application_autoscaling.scheduled_action.present:
                - name: value
                - service_namespace: value
                - scheduled_action_name: value
                - resource_id: value
                - scalable_dimension: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.application_autoscaling.scheduled_action.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.application_autoscaling.describe_scheduled_actions(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.application_autoscaling.put_scheduled_action(
                ctx,
                
                
                **{"ServiceNamespace": service_namespace, "Schedule": schedule, "Timezone": timezone, "ScheduledActionName": scheduled_action_name, "ResourceId": resource_id, "ScalableDimension": scalable_dimension, "StartTime": start_time, "EndTime": end_time, "ScalableTargetAction": scalable_target_action}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.application_autoscaling.describe_scheduled_actions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, service_namespace: Text, scheduled_action_name: Text, resource_id: Text, scalable_dimension: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified scheduled action for an Application Auto Scaling scalable target. For more information,
    see Delete a scheduled action in the Application Auto Scaling User Guide.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        service_namespace(Text): The namespace of the AWS service that provides the resource. For a resource provided by your own
            application or service, use custom-resource instead.
        scheduled_action_name(Text): The name of the scheduled action.
        resource_id(Text): The identifier of the resource associated with the scheduled action. This string consists of the
            resource type and unique identifier.   ECS service - The resource type is service and the unique
            identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot
            Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot
            Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR
            cluster - The resource type is instancegroup and the unique identifier is the cluster ID and
            instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0
            fleet - The resource type is fleet and the unique identifier is the fleet name. Example:
            fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is
            the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type
            is index and the unique identifier is the index name. Example: table/my-table/index/my-table-
            index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the
            cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource
            type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-
            point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This
            parameter must specify the OutputValue from the CloudFormation template stack used to access the
            resources. The unique identifier is defined by the service provider. More information is
            available in our GitHub repository.   Amazon Comprehend document classification endpoint - The
            resource type and unique identifier are specified using the endpoint ARN. Example:
            arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Amazon
            Comprehend entity recognizer endpoint - The resource type and unique identifier are specified
            using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-
            endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the
            unique identifier is the function name with a function version or alias name suffix that is not
            $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table
            - The resource type is table and the unique identifier is the table name. Example:
            keyspace/mykeyspace/table/mytable.   Amazon MSK cluster - The resource type and unique
            identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-
            east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5.
        scalable_dimension(Text): The scalable dimension. This string consists of the service namespace, resource type, and
            scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.
            ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.
            elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.
            appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.
            dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.
            dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.
            dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary
            index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB
            global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an
            Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-
            compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for
            an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The
            scalable dimension for a custom resource provided by your own application or service.
            comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units
            for an Amazon Comprehend document classification endpoint.    comprehend:entity-recognizer-
            endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity
            recognizer endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for
            a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an
            Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity
            for an Amazon Keyspaces table.    kafka:broker-storage:VolumeSize - The provisioned volume size
            (in GiB) for brokers in an Amazon MSK cluster.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.application_autoscaling.scheduled_action.absent:
                - name: value
                - service_namespace: value
                - scheduled_action_name: value
                - resource_id: value
                - scalable_dimension: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.application_autoscaling.scheduled_action.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.application_autoscaling.describe_scheduled_actions(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.application_autoscaling.delete_scheduled_action(
                ctx,
                
                
                **{"ServiceNamespace": service_namespace, "ScheduledActionName": scheduled_action_name, "ResourceId": resource_id, "ScalableDimension": scalable_dimension}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.application_autoscaling.describe_scheduled_actions(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

