"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.acm_pca.delete_policy
hub.exec.boto3.client.acm_pca.get_policy
hub.exec.boto3.client.acm_pca.put_policy
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, resource_arn: Text, policy: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Attaches a resource-based policy to a private CA.  A policy can also be applied by sharing a private CA through
    AWS Resource Access Manager (RAM). For more information, see Attach a Policy for Cross-Account Access. The
    policy can be displayed with GetPolicy and removed with DeletePolicy.  About Policies    A policy grants access
    on a private CA to an AWS customer account, to AWS Organizations, or to an AWS Organizations unit. Policies are
    under the control of a CA administrator. For more information, see Using a Resource Based Policy with ACM
    Private CA.   A policy permits a user of AWS Certificate Manager (ACM) to issue ACM certificates signed by a CA
    in another account.   For ACM to manage automatic renewal of these certificates, the ACM user must configure a
    Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to
    confirmation against the ACM Private CA policy. For more information, see Using a Service Linked Role with ACM.
    Updates made in AWS Resource Manager (RAM) are reflected in policies. For more information, see Attach a Policy
    for Cross-Account Access.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        resource_arn(Text): The Amazon Resource Number (ARN) of the private CA to associate with the policy. The ARN of the
            CA can be found by calling the ListCertificateAuthorities action.
        policy(Text): The path and file name of a JSON-formatted IAM policy to attach to the specified private CA
            resource. If this policy does not contain all required statements or if it includes any
            statement that is not allowed, the PutPolicy action returns an InvalidPolicyException. For
            information about IAM policy and statement structure, see Overview of JSON Policies.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.acm_pca.policy.present:
                - name: value
                - resource_arn: value
                - policy: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.acm_pca.policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.acm_pca.get_policy(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.acm_pca.put_policy(
                ctx,
                
                
                **{"ResourceArn": resource_arn, "Policy": policy}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.acm_pca.get_policy(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, resource_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the resource-based policy attached to a private CA. Deletion will remove any access that the policy has
    granted. If there is no policy attached to the private CA, this action will return successful. If you delete a
    policy that was applied through AWS Resource Access Manager (RAM), the CA will be removed from all shares in
    which it was included.  The AWS Certificate Manager Service Linked Role that the policy supports is not affected
    when you delete the policy.  The current policy can be shown with GetPolicy and updated with PutPolicy.  About
    Policies    A policy grants access on a private CA to an AWS customer account, to AWS Organizations, or to an
    AWS Organizations unit. Policies are under the control of a CA administrator. For more information, see Using a
    Resource Based Policy with ACM Private CA.   A policy permits a user of AWS Certificate Manager (ACM) to issue
    ACM certificates signed by a CA in another account.   For ACM to manage automatic renewal of these certificates,
    the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity
    of the user, subject to confirmation against the ACM Private CA policy. For more information, see Using a
    Service Linked Role with ACM.   Updates made in AWS Resource Manager (RAM) are reflected in policies. For more
    information, see Attach a Policy for Cross-Account Access.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        resource_arn(Text): The Amazon Resource Number (ARN) of the private CA that will have its policy deleted. You can
            find the CA's ARN by calling the ListCertificateAuthorities action. The ARN value must have the
            form arn:aws:acm-pca:region:account:certificate-authority/01234567-89ab-cdef-0123-0123456789ab.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.acm_pca.policy.absent:
                - name: value
                - resource_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.acm_pca.policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.acm_pca.get_policy(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.acm_pca.delete_policy(
                ctx,
                
                
                **{"ResourceArn": resource_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.acm_pca.get_policy(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

