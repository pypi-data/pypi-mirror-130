"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.waf.create_size_constraint_set
hub.exec.boto3.client.waf.delete_size_constraint_set
hub.exec.boto3.client.waf.get_size_constraint_set
hub.exec.boto3.client.waf.list_size_constraint_sets
hub.exec.boto3.client.waf.update_size_constraint_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Creates a SizeConstraintSet. You
    then use UpdateSizeConstraintSet to identify the part of a web request that you want AWS WAF to check for
    length, such as the length of the User-Agent header or the length of the query string. For example, you can
    create a SizeConstraintSet that matches any requests that have a query string that is longer than 100 bytes. You
    can then configure AWS WAF to reject those requests. To create and configure a SizeConstraintSet, perform the
    following steps:   Use GetChangeToken to get the change token that you provide in the ChangeToken parameter of a
    CreateSizeConstraintSet request.   Submit a CreateSizeConstraintSet request.   Use GetChangeToken to get the
    change token that you provide in the ChangeToken parameter of an UpdateSizeConstraintSet request.   Submit an
    UpdateSizeConstraintSet request to specify the part of the request that you want AWS WAF to inspect (for
    example, the header or the URI) and the value that you want AWS WAF to watch for.   For more information about
    how to use the AWS WAF API to allow or block HTTP requests, see the AWS WAF Developer Guide.

    Args:
        name(Text): A friendly name or description of the SizeConstraintSet. You can't change Name after you create
            a SizeConstraintSet.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.waf.size_constraint_set.present:
                - name: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.size_constraint_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.waf.get_size_constraint_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.create_size_constraint_set(
                ctx,
                
                
                **{"Name": name, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.waf.get_size_constraint_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, size_constraint_set_id: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Permanently deletes a
    SizeConstraintSet. You can't delete a SizeConstraintSet if it's still used in any Rules or if it still includes
    any SizeConstraint objects (any filters). If you just want to remove a SizeConstraintSet from a Rule, use
    UpdateRule. To permanently delete a SizeConstraintSet, perform the following steps:   Update the
    SizeConstraintSet to remove filters, if any. For more information, see UpdateSizeConstraintSet.   Use
    GetChangeToken to get the change token that you provide in the ChangeToken parameter of a
    DeleteSizeConstraintSet request.   Submit a DeleteSizeConstraintSet request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        size_constraint_set_id(Text): The SizeConstraintSetId of the SizeConstraintSet that you want to delete. SizeConstraintSetId is
            returned by CreateSizeConstraintSet and by ListSizeConstraintSets.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.waf.size_constraint_set.absent:
                - name: value
                - size_constraint_set_id: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.size_constraint_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.waf.get_size_constraint_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.delete_size_constraint_set(
                ctx,
                
                
                **{"SizeConstraintSetId": size_constraint_set_id, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.waf.get_size_constraint_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

