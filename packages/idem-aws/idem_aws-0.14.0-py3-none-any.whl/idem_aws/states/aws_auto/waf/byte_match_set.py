"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.waf.create_byte_match_set
hub.exec.boto3.client.waf.delete_byte_match_set
hub.exec.boto3.client.waf.get_byte_match_set
hub.exec.boto3.client.waf.list_byte_match_sets
hub.exec.boto3.client.waf.update_byte_match_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Creates a ByteMatchSet. You then
    use UpdateByteMatchSet to identify the part of a web request that you want AWS WAF to inspect, such as the
    values of the User-Agent header or the query string. For example, you can create a ByteMatchSet that matches any
    requests with User-Agent headers that contain the string BadBot. You can then configure AWS WAF to reject those
    requests. To create and configure a ByteMatchSet, perform the following steps:   Use GetChangeToken to get the
    change token that you provide in the ChangeToken parameter of a CreateByteMatchSet request.   Submit a
    CreateByteMatchSet request.   Use GetChangeToken to get the change token that you provide in the ChangeToken
    parameter of an UpdateByteMatchSet request.   Submit an UpdateByteMatchSet request to specify the part of the
    request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS
    WAF to watch for.   For more information about how to use the AWS WAF API to allow or block HTTP requests, see
    the AWS WAF Developer Guide.

    Args:
        name(Text): A friendly name or description of the ByteMatchSet. You can't change Name after you create a
            ByteMatchSet.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.waf.byte_match_set.present:
                - name: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.byte_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.waf.get_byte_match_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.create_byte_match_set(
                ctx,
                
                
                **{"Name": name, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.waf.get_byte_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, byte_match_set_id: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Permanently deletes a
    ByteMatchSet. You can't delete a ByteMatchSet if it's still used in any Rules or if it still includes any
    ByteMatchTuple objects (any filters). If you just want to remove a ByteMatchSet from a Rule, use UpdateRule. To
    permanently delete a ByteMatchSet, perform the following steps:   Update the ByteMatchSet to remove filters, if
    any. For more information, see UpdateByteMatchSet.   Use GetChangeToken to get the change token that you provide
    in the ChangeToken parameter of a DeleteByteMatchSet request.   Submit a DeleteByteMatchSet request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        byte_match_set_id(Text): The ByteMatchSetId of the ByteMatchSet that you want to delete. ByteMatchSetId is returned by
            CreateByteMatchSet and by ListByteMatchSets.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.waf.byte_match_set.absent:
                - name: value
                - byte_match_set_id: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.byte_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.waf.get_byte_match_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.delete_byte_match_set(
                ctx,
                
                
                **{"ByteMatchSetId": byte_match_set_id, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.waf.get_byte_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

