"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.waf.create_regex_pattern_set
hub.exec.boto3.client.waf.delete_regex_pattern_set
hub.exec.boto3.client.waf.get_regex_pattern_set
hub.exec.boto3.client.waf.list_regex_pattern_sets
hub.exec.boto3.client.waf.update_regex_pattern_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Creates a RegexPatternSet. You
    then use UpdateRegexPatternSet to specify the regular expression (regex) pattern that you want AWS WAF to search
    for, such as B[a@]dB[o0]t. You can then configure AWS WAF to reject those requests. To create and configure a
    RegexPatternSet, perform the following steps:   Use GetChangeToken to get the change token that you provide in
    the ChangeToken parameter of a CreateRegexPatternSet request.   Submit a CreateRegexPatternSet request.   Use
    GetChangeToken to get the change token that you provide in the ChangeToken parameter of an UpdateRegexPatternSet
    request.   Submit an UpdateRegexPatternSet request to specify the string that you want AWS WAF to watch for.
    For more information about how to use the AWS WAF API to allow or block HTTP requests, see the AWS WAF Developer
    Guide.

    Args:
        name(Text): A friendly name or description of the RegexPatternSet. You can't change Name after you create a
            RegexPatternSet.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.waf.regex_pattern_set.present:
                - name: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.regex_pattern_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.waf.get_regex_pattern_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.create_regex_pattern_set(
                ctx,
                
                
                **{"Name": name, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.waf.get_regex_pattern_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, regex_pattern_set_id: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Permanently deletes a
    RegexPatternSet. You can't delete a RegexPatternSet if it's still used in any RegexMatchSet or if the
    RegexPatternSet is not empty.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        regex_pattern_set_id(Text): The RegexPatternSetId of the RegexPatternSet that you want to delete. RegexPatternSetId is
            returned by CreateRegexPatternSet and by ListRegexPatternSets.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.waf.regex_pattern_set.absent:
                - name: value
                - regex_pattern_set_id: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.regex_pattern_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.waf.get_regex_pattern_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.delete_regex_pattern_set(
                ctx,
                
                
                **{"RegexPatternSetId": regex_pattern_set_id, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.waf.get_regex_pattern_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

