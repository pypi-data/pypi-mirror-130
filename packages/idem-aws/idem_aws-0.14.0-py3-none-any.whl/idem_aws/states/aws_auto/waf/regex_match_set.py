"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.waf.create_regex_match_set
hub.exec.boto3.client.waf.delete_regex_match_set
hub.exec.boto3.client.waf.get_regex_match_set
hub.exec.boto3.client.waf.list_regex_match_sets
hub.exec.boto3.client.waf.update_regex_match_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Creates a RegexMatchSet. You then
    use UpdateRegexMatchSet to identify the part of a web request that you want AWS WAF to inspect, such as the
    values of the User-Agent header or the query string. For example, you can create a RegexMatchSet that contains a
    RegexMatchTuple that looks for any requests with User-Agent headers that match a RegexPatternSet with pattern
    B[a@]dB[o0]t. You can then configure AWS WAF to reject those requests. To create and configure a RegexMatchSet,
    perform the following steps:   Use GetChangeToken to get the change token that you provide in the ChangeToken
    parameter of a CreateRegexMatchSet request.   Submit a CreateRegexMatchSet request.   Use GetChangeToken to get
    the change token that you provide in the ChangeToken parameter of an UpdateRegexMatchSet request.   Submit an
    UpdateRegexMatchSet request to specify the part of the request that you want AWS WAF to inspect (for example,
    the header or the URI) and the value, using a RegexPatternSet, that you want AWS WAF to watch for.   For more
    information about how to use the AWS WAF API to allow or block HTTP requests, see the AWS WAF Developer Guide.

    Args:
        name(Text): A friendly name or description of the RegexMatchSet. You can't change Name after you create a
            RegexMatchSet.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.waf.regex_match_set.present:
                - name: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.regex_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.waf.get_regex_match_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.create_regex_match_set(
                ctx,
                
                
                **{"Name": name, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.waf.get_regex_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, regex_match_set_id: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Permanently deletes a
    RegexMatchSet. You can't delete a RegexMatchSet if it's still used in any Rules or if it still includes any
    RegexMatchTuples objects (any filters). If you just want to remove a RegexMatchSet from a Rule, use UpdateRule.
    To permanently delete a RegexMatchSet, perform the following steps:   Update the RegexMatchSet to remove
    filters, if any. For more information, see UpdateRegexMatchSet.   Use GetChangeToken to get the change token
    that you provide in the ChangeToken parameter of a DeleteRegexMatchSet request.   Submit a DeleteRegexMatchSet
    request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        regex_match_set_id(Text): The RegexMatchSetId of the RegexMatchSet that you want to delete. RegexMatchSetId is returned by
            CreateRegexMatchSet and by ListRegexMatchSets.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.waf.regex_match_set.absent:
                - name: value
                - regex_match_set_id: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.regex_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.waf.get_regex_match_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.delete_regex_match_set(
                ctx,
                
                
                **{"RegexMatchSetId": regex_match_set_id, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.waf.get_regex_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

