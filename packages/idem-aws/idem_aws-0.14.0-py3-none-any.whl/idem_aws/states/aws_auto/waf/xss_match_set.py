"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.waf.create_xss_match_set
hub.exec.boto3.client.waf.delete_xss_match_set
hub.exec.boto3.client.waf.get_xss_match_set
hub.exec.boto3.client.waf.list_xss_match_sets
hub.exec.boto3.client.waf.update_xss_match_set
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Creates an XssMatchSet, which you
    use to allow, block, or count requests that contain cross-site scripting attacks in the specified part of web
    requests. AWS WAF searches for character sequences that are likely to be malicious strings. To create and
    configure an XssMatchSet, perform the following steps:   Use GetChangeToken to get the change token that you
    provide in the ChangeToken parameter of a CreateXssMatchSet request.   Submit a CreateXssMatchSet request.   Use
    GetChangeToken to get the change token that you provide in the ChangeToken parameter of an UpdateXssMatchSet
    request.   Submit an UpdateXssMatchSet request to specify the parts of web requests in which you want to allow,
    block, or count cross-site scripting attacks.   For more information about how to use the AWS WAF API to allow
    or block HTTP requests, see the AWS WAF Developer Guide.

    Args:
        name(Text): A friendly name or description for the XssMatchSet that you're creating. You can't change Name
            after you create the XssMatchSet.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.waf.xss_match_set.present:
                - name: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.xss_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.waf.get_xss_match_set(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.create_xss_match_set(
                ctx,
                
                
                **{"Name": name, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.waf.get_xss_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, xss_match_set_id: Text, change_token: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This is AWS WAF Classic documentation. For more information, see AWS WAF Classic in the developer guide.  For
    the latest version of AWS WAF, use the AWS WAFV2 API and see the AWS WAF Developer Guide. With the latest
    version, AWS WAF has a single set of endpoints for regional and global use.   Permanently deletes an
    XssMatchSet. You can't delete an XssMatchSet if it's still used in any Rules or if it still contains any
    XssMatchTuple objects. If you just want to remove an XssMatchSet from a Rule, use UpdateRule. To permanently
    delete an XssMatchSet from AWS WAF, perform the following steps:   Update the XssMatchSet to remove filters, if
    any. For more information, see UpdateXssMatchSet.   Use GetChangeToken to get the change token that you provide
    in the ChangeToken parameter of a DeleteXssMatchSet request.   Submit a DeleteXssMatchSet request.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        xss_match_set_id(Text): The XssMatchSetId of the XssMatchSet that you want to delete. XssMatchSetId is returned by
            CreateXssMatchSet and by ListXssMatchSets.
        change_token(Text): The value returned by the most recent call to GetChangeToken.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.waf.xss_match_set.absent:
                - name: value
                - xss_match_set_id: value
                - change_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.waf.xss_match_set.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.waf.get_xss_match_set(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.waf.delete_xss_match_set(
                ctx,
                
                
                **{"XssMatchSetId": xss_match_set_id, "ChangeToken": change_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.waf.get_xss_match_set(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

