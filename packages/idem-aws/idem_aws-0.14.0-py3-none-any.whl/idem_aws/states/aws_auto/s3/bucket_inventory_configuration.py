"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.s3.delete_bucket_inventory_configuration
hub.exec.boto3.client.s3.get_bucket_inventory_configuration
hub.exec.boto3.client.s3.list_bucket_inventory_configurations
hub.exec.boto3.client.s3.put_bucket_inventory_configuration
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, bucket: Text, id_: Text, inventory_configuration: Dict, expected_bucket_owner: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    This implementation of the PUT action adds an inventory configuration (identified by the inventory ID) to the
    bucket. You can have up to 1,000 inventory configurations per bucket.  Amazon S3 inventory generates inventories
    of the objects in the bucket on a daily or weekly basis, and the results are published to a flat file. The
    bucket that is inventoried is called the source bucket, and the bucket where the inventory flat file is stored
    is called the destination bucket. The destination bucket must be in the same Amazon Web Services Region as the
    source bucket.  When you configure an inventory for a source bucket, you specify the destination bucket where
    you want the inventory to be stored, and whether to generate the inventory daily or weekly. You can also
    configure what object metadata to include and whether to inventory all object versions or only current versions.
    For more information, see Amazon S3 Inventory in the Amazon S3 User Guide.  You must create a bucket policy on
    the destination bucket to grant permissions to Amazon S3 to write objects to the bucket in the defined location.
    For an example policy, see  Granting Permissions for Amazon S3 Inventory and Storage Class Analysis.  To use
    this operation, you must have permissions to perform the s3:PutInventoryConfiguration action. The bucket owner
    has this permission by default and can grant this permission to others. For more information about permissions,
    see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to Your Amazon S3
    Resources in the Amazon S3 User Guide.  Special Errors     HTTP 400 Bad Request Error     Code: InvalidArgument
    Cause: Invalid Argument      HTTP 400 Bad Request Error     Code: TooManyConfigurations    Cause: You are
    attempting to create a new configuration but have already reached the 1,000-configuration limit.       HTTP 403
    Forbidden Error     Code: AccessDenied    Cause: You are not the owner of the specified bucket, or you do not
    have the s3:PutInventoryConfiguration bucket permission to set the configuration on the bucket.       Related
    Resources     GetBucketInventoryConfiguration     DeleteBucketInventoryConfiguration
    ListBucketInventoryConfigurations

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        bucket(Text): The name of the bucket where the inventory configuration will be stored.
        id_(Text): The ID used to identify the inventory configuration.
        inventory_configuration(Dict): Specifies the inventory configuration.
        expected_bucket_owner(Text, optional): The account ID of the expected bucket owner. If the bucket is owned by a different account, the
            request will fail with an HTTP 403 (Access Denied) error. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.s3.bucket_inventory_configuration.present:
                - name: value
                - bucket: value
                - id_: value
                - inventory_configuration: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3.bucket_inventory_configuration.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.s3.get_bucket_inventory_configuration(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.s3.put_bucket_inventory_configuration(
                ctx,
                
                
                **{"Bucket": bucket, "Id": id_, "InventoryConfiguration": inventory_configuration, "ExpectedBucketOwner": expected_bucket_owner}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.s3.get_bucket_inventory_configuration(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, bucket: Text, id_: Text, expected_bucket_owner: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an inventory configuration (identified by the inventory ID) from the bucket. To use this operation, you
    must have permissions to perform the s3:PutInventoryConfiguration action. The bucket owner has this permission
    by default. The bucket owner can grant this permission to others. For more information about permissions, see
    Permissions Related to Bucket Subresource Operations and Managing Access Permissions to Your Amazon S3
    Resources. For information about the Amazon S3 inventory feature, see Amazon S3 Inventory. Operations related to
    DeleteBucketInventoryConfiguration include:     GetBucketInventoryConfiguration
    PutBucketInventoryConfiguration     ListBucketInventoryConfigurations

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        bucket(Text): The name of the bucket containing the inventory configuration to delete.
        id_(Text): The ID used to identify the inventory configuration.
        expected_bucket_owner(Text, optional): The account ID of the expected bucket owner. If the bucket is owned by a different account, the
            request will fail with an HTTP 403 (Access Denied) error. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.s3.bucket_inventory_configuration.absent:
                - name: value
                - bucket: value
                - id_: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3.bucket_inventory_configuration.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.s3.get_bucket_inventory_configuration(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.s3.delete_bucket_inventory_configuration(
                ctx,
                
                
                **{"Bucket": bucket, "Id": id_, "ExpectedBucketOwner": expected_bucket_owner}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.s3.get_bucket_inventory_configuration(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

