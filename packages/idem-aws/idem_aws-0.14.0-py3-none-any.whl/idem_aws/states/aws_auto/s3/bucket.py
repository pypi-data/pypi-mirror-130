"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.s3.create_bucket
hub.exec.boto3.client.s3.delete_bucket
hub.exec.boto3.client.s3.head_bucket
hub.exec.boto3.client.s3.list_buckets
resource = hub.tool.boto3.resource.create(ctx, "s3", "Bucket", name)
hub.tool.boto3.resource.exec(resource, create, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete_objects, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, put_object, *args, **kwargs)
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, bucket: Text, acl: Text = None, create_bucket_configuration: Dict = None, grant_full_control: Text = None, grant_read: Text = None, grant_read_acp: Text = None, grant_write: Text = None, grant_write_acp: Text = None, object_lock_enabled_for_bucket: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new S3 bucket. To create a bucket, you must register with Amazon S3 and have a valid Amazon Web
    Services Access Key ID to authenticate requests. Anonymous requests are never allowed to create buckets. By
    creating the bucket, you become the bucket owner. Not every string is an acceptable bucket name. For information
    about bucket naming restrictions, see Bucket naming rules. If you want to create an Amazon S3 on Outposts
    bucket, see Create Bucket.  By default, the bucket is created in the US East (N. Virginia) Region. You can
    optionally specify a Region in the request body. You might choose a Region to optimize latency, minimize costs,
    or address regulatory requirements. For example, if you reside in Europe, you will probably find it advantageous
    to create buckets in the Europe (Ireland) Region. For more information, see Accessing a bucket.  If you send
    your create bucket request to the s3.amazonaws.com endpoint, the request goes to the us-east-1 Region.
    Accordingly, the signature calculations in Signature Version 4 must use us-east-1 as the Region, even if the
    location constraint in the request specifies another Region where the bucket is to be created. If you create a
    bucket in a Region other than US East (N. Virginia), your application must be able to handle 307 redirect. For
    more information, see Virtual hosting of buckets.  When creating a bucket using this operation, you can
    optionally specify the accounts or groups that should be granted specific permissions on the bucket. There are
    two ways to grant the appropriate permissions using the request headers.   Specify a canned ACL using the x-amz-
    acl request header. Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a
    predefined set of grantees and permissions. For more information, see Canned ACL.   Specify access permissions
    explicitly using the x-amz-grant-read, x-amz-grant-write, x-amz-grant-read-acp, x-amz-grant-write-acp, and
    x-amz-grant-full-control headers. These headers map to the set of permissions Amazon S3 supports in an ACL. For
    more information, see Access control list (ACL) overview. You specify each grantee as a type=value pair, where
    the type is one of the following:    id – if the value specified is the canonical user ID of an Amazon Web
    Services account    uri – if you are granting permissions to a predefined group    emailAddress – if the value
    specified is the email address of an Amazon Web Services account  Using email addresses to specify a grantee is
    only supported in the following Amazon Web Services Regions:    US East (N. Virginia)   US West (N. California)
    US West (Oregon)    Asia Pacific (Singapore)   Asia Pacific (Sydney)   Asia Pacific (Tokyo)   Europe (Ireland)
    South America (São Paulo)   For a list of all the Amazon S3 supported Regions and endpoints, see Regions and
    Endpoints in the Amazon Web Services General Reference.    For example, the following x-amz-grant-read header
    grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its
    metadata:  x-amz-grant-read: id="11112222333", id="444455556666"      You can use either a canned ACL or specify
    access permissions explicitly. You cannot do both.   Permissions  If your CreateBucket request specifies ACL
    permissions and the ACL is public-read, public-read-write, authenticated-read, or if you specify access
    permissions explicitly through any other ACL, both s3:CreateBucket and s3:PutBucketAcl permissions are needed.
    If the ACL the CreateBucket request is private, only s3:CreateBucket permission is needed.  If
    ObjectLockEnabledForBucket is set to true in your CreateBucket request, s3:PutBucketObjectLockConfiguration and
    s3:PutBucketVersioning permissions are required. The following operations are related to CreateBucket:
    PutObject     DeleteBucket

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        acl(Text, optional): The canned ACL to apply to the bucket. Defaults to None.
        bucket(Text): The name of the bucket to create.
        create_bucket_configuration(Dict, optional): The configuration information for the bucket. Defaults to None.
        grant_full_control(Text, optional): Allows grantee the read, write, read ACP, and write ACP permissions on the bucket. Defaults to None.
        grant_read(Text, optional): Allows grantee to list the objects in the bucket. Defaults to None.
        grant_read_acp(Text, optional): Allows grantee to read the bucket ACL. Defaults to None.
        grant_write(Text, optional): Allows grantee to create new objects in the bucket. For the bucket and object owners of existing
            objects, also allows deletions and overwrites of those objects. Defaults to None.
        grant_write_acp(Text, optional): Allows grantee to write the ACL for the applicable bucket. Defaults to None.
        object_lock_enabled_for_bucket(bool, optional): Specifies whether you want S3 Object Lock to be enabled for the new bucket. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.s3.bucket.present:
                - name: value
                - bucket: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3.bucket.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "s3", "Bucket", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.s3.create_bucket(
                ctx,
                
                
                **{"ACL": acl, "Bucket": bucket, "CreateBucketConfiguration": create_bucket_configuration, "GrantFullControl": grant_full_control, "GrantRead": grant_read, "GrantReadACP": grant_read_acp, "GrantWrite": grant_write, "GrantWriteACP": grant_write_acp, "ObjectLockEnabledForBucket": object_lock_enabled_for_bucket}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, bucket: Text, expected_bucket_owner: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the S3 bucket. All objects (including all object versions and delete markers) in the bucket must be
    deleted before the bucket itself can be deleted.  Related Resources     CreateBucket     DeleteObject

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        bucket(Text): Specifies the bucket being deleted.
        expected_bucket_owner(Text, optional): The account ID of the expected bucket owner. If the bucket is owned by a different account, the
            request will fail with an HTTP 403 (Access Denied) error. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.s3.bucket.absent:
                - name: value
                - bucket: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.s3.bucket.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "s3", "Bucket", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.s3.delete_bucket(
                ctx,
                
                
                **{"Bucket": bucket, "ExpectedBucketOwner": expected_bucket_owner}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

