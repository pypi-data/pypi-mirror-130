"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.sagemaker.create_model_package_group
hub.exec.boto3.client.sagemaker.delete_model_package_group
hub.exec.boto3.client.sagemaker.describe_model_package_group
hub.exec.boto3.client.sagemaker.list_model_package_groups
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, model_package_group_name: Text, model_package_group_description: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a model group. A model group contains a group of model versions.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        model_package_group_name(Text): The name of the model group.
        model_package_group_description(Text, optional): A description for the model group. Defaults to None.
        tags(List, optional): A list of key value pairs associated with the model group. For more information, see Tagging
            Amazon Web Services resources in the Amazon Web Services General Reference Guide. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.sagemaker.model_package_group.present:
                - name: value
                - model_package_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sagemaker.model_package_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.sagemaker.describe_model_package_group(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.sagemaker.create_model_package_group(
                ctx,
                
                
                **{"ModelPackageGroupName": model_package_group_name, "ModelPackageGroupDescription": model_package_group_description, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.sagemaker.describe_model_package_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, model_package_group_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified model group.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        model_package_group_name(Text): The name of the model group to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.sagemaker.model_package_group.absent:
                - name: value
                - model_package_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sagemaker.model_package_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.sagemaker.describe_model_package_group(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.sagemaker.delete_model_package_group(
                ctx,
                
                
                **{"ModelPackageGroupName": model_package_group_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.sagemaker.describe_model_package_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

