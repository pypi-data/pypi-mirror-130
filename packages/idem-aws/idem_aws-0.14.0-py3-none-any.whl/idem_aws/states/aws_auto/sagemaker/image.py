"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.sagemaker.create_image
hub.exec.boto3.client.sagemaker.delete_image
hub.exec.boto3.client.sagemaker.describe_image
hub.exec.boto3.client.sagemaker.list_images
hub.exec.boto3.client.sagemaker.update_image
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, image_name: Text, role_arn: Text, description: Text = None, display_name: Text = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a
    container image stored in Amazon Container Registry (ECR). For more information, see Bring your own SageMaker
    image.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        description(Text, optional): The description of the image. Defaults to None.
        display_name(Text, optional): The display name of the image. If not provided, ImageName is displayed. Defaults to None.
        image_name(Text): The name of the image. Must be unique to your account.
        role_arn(Text): The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on
            your behalf.
        tags(List, optional): A list of tags to apply to the image. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.sagemaker.image.present:
                - name: value
                - image_name: value
                - role_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sagemaker.image.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.sagemaker.describe_image(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.sagemaker.create_image(
                ctx,
                
                
                **{"Description": description, "DisplayName": display_name, "ImageName": image_name, "RoleArn": role_arn, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.sagemaker.describe_image(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, image_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a SageMaker image and all versions of the image. The container images aren't deleted.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        image_name(Text): The name of the image to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.sagemaker.image.absent:
                - name: value
                - image_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sagemaker.image.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.sagemaker.describe_image(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.sagemaker.delete_image(
                ctx,
                
                
                **{"ImageName": image_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.sagemaker.describe_image(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

