"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.opsworks.deregister_ecs_cluster
hub.exec.boto3.client.opsworks.describe_ecs_clusters
hub.exec.boto3.client.opsworks.register_ecs_cluster
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, ecs_cluster_arn: Text, stack_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Registers a specified Amazon ECS cluster with a stack. You can register only one cluster with a stack. A cluster
    can be registered with only one stack. For more information, see  Resource Management.  Required Permissions: To
    use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that
    explicitly grants permissions. For more information on user permissions, see  Managing User Permissions.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        ecs_cluster_arn(Text): The cluster's ARN.
        stack_id(Text): The stack ID.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.opsworks.ecs_cluster.present:
                - name: value
                - ecs_cluster_arn: value
                - stack_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.opsworks.ecs_cluster.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.opsworks.describe_ecs_clusters(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.opsworks.register_ecs_cluster(
                ctx,
                
                
                **{"EcsClusterArn": ecs_cluster_arn, "StackId": stack_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.opsworks.describe_ecs_clusters(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, ecs_cluster_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deregisters a specified Amazon ECS cluster from a stack. For more information, see  Resource Management.
    Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an
    attached policy that explicitly grants permissions. For more information on user permissions, see
    https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        ecs_cluster_arn(Text): The cluster's Amazon Resource Number (ARN).

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.opsworks.ecs_cluster.absent:
                - name: value
                - ecs_cluster_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.opsworks.ecs_cluster.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.opsworks.describe_ecs_clusters(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.opsworks.deregister_ecs_cluster(
                ctx,
                
                
                **{"EcsClusterArn": ecs_cluster_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.opsworks.describe_ecs_clusters(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

