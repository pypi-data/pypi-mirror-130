"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.opsworks.clone_stack
hub.exec.boto3.client.opsworks.create_stack
hub.exec.boto3.client.opsworks.delete_stack
hub.exec.boto3.client.opsworks.describe_stacks
hub.exec.boto3.client.opsworks.start_stack
hub.exec.boto3.client.opsworks.stop_stack
hub.exec.boto3.client.opsworks.update_stack
resource = hub.tool.boto3.resource.create(ctx, "opsworks", "Stack", name)
hub.tool.boto3.resource.exec(resource, create_layer, *args, **kwargs)
hub.tool.boto3.resource.exec(resource, delete, *args, **kwargs)
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, region: Text, service_role_arn: Text, default_instance_profile_arn: Text, vpc_id: Text = None, attributes: Dict = None, default_os: Text = None, hostname_theme: Text = None, default_availability_zone: Text = None, default_subnet_id: Text = None, custom_json: Text = None, configuration_manager: Dict = None, chef_configuration: Dict = None, use_custom_cookbooks: bool = None, use_opsworks_security_groups: bool = None, custom_cookbooks_source: Dict = None, default_ssh_key_name: Text = None, default_root_device_type: Text = None, agent_version: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new stack. For more information, see Create a New Stack.  Required Permissions: To use this action, an
    IAM user must have an attached policy that explicitly grants permissions. For more information about user
    permissions, see Managing User Permissions.

    Args:
        name(Text): The stack name.
        region(Text): The stack's AWS region, such as ap-south-1. For more information about Amazon regions, see
            Regions and Endpoints.  In the AWS CLI, this API maps to the --stack-region parameter. If the
            --stack-region parameter and the AWS CLI common parameter --region are set to the same value,
            the stack uses a regional endpoint. If the --stack-region parameter is not set, but the AWS CLI
            --region parameter is, this also results in a stack with a regional endpoint. However, if the
            --region parameter is set to us-east-1, and the --stack-region parameter is set to one of the
            following, then the stack uses a legacy or classic region: us-west-1, us-west-2, sa-east-1, eu-
            central-1, eu-west-1, ap-northeast-1, ap-southeast-1, ap-southeast-2. In this case, the actual
            API endpoint of the stack is in us-east-1. Only the preceding regions are supported as classic
            regions in the us-east-1 API endpoint. Because it is a best practice to choose the regional
            endpoint that is closest to where you manage AWS, we recommend that you use regional endpoints
            for new stacks. The AWS CLI common --region parameter always specifies a regional API endpoint;
            it cannot be used to specify a classic AWS OpsWorks Stacks region.
        vpc_id(Text, optional): The ID of the VPC that the stack is to be launched into. The VPC must be in the stack's region.
            All instances are launched into this VPC. You cannot change the ID later.   If your account
            supports EC2-Classic, the default value is no VPC.   If your account does not support
            EC2-Classic, the default value is the default VPC for the specified region.   If the VPC ID
            corresponds to a default VPC and you have specified either the DefaultAvailabilityZone or the
            DefaultSubnetId parameter only, AWS OpsWorks Stacks infers the value of the other parameter. If
            you specify neither parameter, AWS OpsWorks Stacks sets these parameters to the first valid
            Availability Zone for the specified region and the corresponding default VPC subnet ID,
            respectively. If you specify a nondefault VPC ID, note the following:   It must belong to a VPC
            in your account that is in the specified region.   You must specify a value for DefaultSubnetId.
            For more information about how to use AWS OpsWorks Stacks with a VPC, see Running a Stack in a
            VPC. For more information about default VPC and EC2-Classic, see Supported Platforms. Defaults to None.
        attributes(Dict, optional): One or more user-defined key-value pairs to be added to the stack attributes. Defaults to None.
        service_role_arn(Text): The stack's AWS Identity and Access Management (IAM) role, which allows AWS OpsWorks Stacks to
            work with AWS resources on your behalf. You must set this parameter to the Amazon Resource Name
            (ARN) for an existing IAM role. For more information about IAM ARNs, see Using Identifiers.
        default_instance_profile_arn(Text): The Amazon Resource Name (ARN) of an IAM profile that is the default profile for all of the
            stack's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        default_os(Text, optional): The stack's default operating system, which is installed on every instance unless you specify a
            different operating system when you create the instance. You can specify one of the following.
            A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2018.03,
            Amazon Linux 2017.09, Amazon Linux 2017.03, Amazon Linux 2016.09, Amazon Linux 2016.03, Amazon
            Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu
            16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS Linux 7     Red Hat Enterprise Linux
            7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base,
            Microsoft Windows Server 2012 R2 with SQL Server Express, Microsoft Windows Server 2012 R2 with
            SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI:
            Custom. You specify the custom AMI you want to use when you create instances. For more
            information, see  Using Custom AMIs.   The default option is the current Amazon Linux version.
            For more information about supported operating systems, see AWS OpsWorks Stacks Operating
            Systems. Defaults to None.
        hostname_theme(Text, optional): The stack's host name theme, with spaces replaced by underscores. The theme is used to generate
            host names for the stack's instances. By default, HostnameTheme is set to Layer_Dependent, which
            creates host names by appending integers to the layer's short name. The other themes are:
            Baked_Goods     Clouds     Europe_Cities     Fruits     Greek_Deities_and_Titans
            Legendary_creatures_from_Japan     Planets_and_Moons     Roman_Deities     Scottish_Islands
            US_Cities     Wild_Cats    To obtain a generated host name, call GetHostNameSuggestion, which
            returns a host name based on the current theme. Defaults to None.
        default_availability_zone(Text, optional): The stack's default Availability Zone, which must be in the specified region. For more
            information, see Regions and Endpoints. If you also specify a value for DefaultSubnetId, the
            subnet must be in the same zone. For more information, see the VpcId parameter description. Defaults to None.
        default_subnet_id(Text, optional): The stack's default VPC subnet ID. This parameter is required if you specify a value for the
            VpcId parameter. All instances are launched into this subnet unless you specify otherwise when
            you create the instance. If you also specify a value for DefaultAvailabilityZone, the subnet
            must be in that zone. For information on default values and when this parameter is required, see
            the VpcId parameter description. Defaults to None.
        custom_json(Text, optional): A string that contains user-defined, custom JSON. It can be used to override the corresponding
            default stack configuration attribute values or to pass data to recipes. The string should be in
            the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information
            about custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes. Defaults to None.
        configuration_manager(Dict, optional): The configuration manager. When you create a stack we recommend that you use the configuration
            manager to specify the Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows
            stacks. The default value for Linux stacks is currently 12. Defaults to None.
        chef_configuration(Dict, optional): A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version
            on Chef 11.10 stacks. For more information, see Create a New Stack. Defaults to None.
        use_custom_cookbooks(bool, optional): Whether the stack uses custom cookbooks. Defaults to None.
        use_opsworks_security_groups(bool, optional): Whether to associate the AWS OpsWorks Stacks built-in security groups with the stack's layers.
            AWS OpsWorks Stacks provides a standard set of built-in security groups, one for each layer,
            which are associated with layers by default. With UseOpsworksSecurityGroups you can instead
            provide your own custom security groups. UseOpsworksSecurityGroups has the following settings:
            True - AWS OpsWorks Stacks automatically associates the appropriate built-in security group with
            each layer (default setting). You can associate additional security groups with a layer after
            you create it, but you cannot delete the built-in security group.   False - AWS OpsWorks Stacks
            does not associate built-in security groups with layers. You must create appropriate EC2
            security groups and associate a security group with each layer that you create. However, you can
            still manually associate a built-in security group with a layer on creation; custom security
            groups are required only for those layers that need custom settings.   For more information, see
            Create a New Stack. Defaults to None.
        custom_cookbooks_source(Dict, optional): Contains the information required to retrieve an app or cookbook from a repository. For more
            information, see Adding Apps or Cookbooks and Recipes. Defaults to None.
        default_ssh_key_name(Text, optional): A default Amazon EC2 key pair name. The default value is none. If you specify a key pair name,
            AWS OpsWorks installs the public key on the instance and you can use the private key with an SSH
            client to log in to the instance. For more information, see  Using SSH to Communicate with an
            Instance and  Managing SSH Access. You can override this setting by specifying a different key
            pair, or no key pair, when you  create an instance. Defaults to None.
        default_root_device_type(Text, optional): The default root device type. This value is the default for all instances in the stack, but you
            can override it when you create an instance. The default option is instance-store. For more
            information, see Storage for the Root Device. Defaults to None.
        agent_version(Text, optional): The default AWS OpsWorks Stacks agent version. You have the following options:   Auto-update -
            Set this parameter to LATEST. AWS OpsWorks Stacks automatically installs new agent versions on
            the stack's instances as soon as they are available.   Fixed version - Set this parameter to
            your preferred agent version. To update the agent version, you must edit the stack configuration
            and specify a new version. AWS OpsWorks Stacks then automatically installs that version on the
            stack's instances.   The default setting is the most recent release of the agent. To specify an
            agent version, you must use the complete version number, not the abbreviated number shown on the
            console. For a list of available agent version numbers, call DescribeAgentVersions. AgentVersion
            cannot be set to Chef 12.2.  You can also specify an agent version when you create or update an
            instance, which overrides the stack's default setting. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.opsworks.stack.present:
                - name: value
                - region: value
                - service_role_arn: value
                - default_instance_profile_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.opsworks.stack.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "opsworks", "Stack", name)
    before = await hub.tool.boto3.resource.describe(resource)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.opsworks.create_stack(
                ctx,
                
                
                **{"Name": name, "Region": region, "VpcId": vpc_id, "Attributes": attributes, "ServiceRoleArn": service_role_arn, "DefaultInstanceProfileArn": default_instance_profile_arn, "DefaultOs": default_os, "HostnameTheme": hostname_theme, "DefaultAvailabilityZone": default_availability_zone, "DefaultSubnetId": default_subnet_id, "CustomJson": custom_json, "ConfigurationManager": configuration_manager, "ChefConfiguration": chef_configuration, "UseCustomCookbooks": use_custom_cookbooks, "UseOpsworksSecurityGroups": use_opsworks_security_groups, "CustomCookbooksSource": custom_cookbooks_source, "DefaultSshKeyName": default_ssh_key_name, "DefaultRootDeviceType": default_root_device_type, "AgentVersion": agent_version}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, stack_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a specified stack. You must first delete all instances, layers, and apps or deregister registered
    instances. For more information, see Shut Down a Stack.  Required Permissions: To use this action, an IAM user
    must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions.
    For more information on user permissions, see Managing User Permissions.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        stack_id(Text): The stack ID.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.opsworks.stack.absent:
                - name: value
                - stack_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.opsworks.stack.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    resource = hub.tool.boto3.resource.create(ctx, "opsworks", "Stack", name)

    before = await hub.tool.boto3.resource.describe(resource)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.opsworks.delete_stack(
                ctx,
                
                
                **{"StackId": stack_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.tool.boto3.resource.describe(resource)
    result["changes"] = differ.deep_diff(before, after)
    return result

