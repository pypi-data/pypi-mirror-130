"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.secretsmanager.create_secret
hub.exec.boto3.client.secretsmanager.delete_secret
hub.exec.boto3.client.secretsmanager.describe_secret
hub.exec.boto3.client.secretsmanager.list_secrets
hub.exec.boto3.client.secretsmanager.restore_secret
hub.exec.boto3.client.secretsmanager.rotate_secret
hub.exec.boto3.client.secretsmanager.update_secret
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, client_request_token: Text = None, description: Text = None, kms_key_id: Text = None, secret_binary: ByteString = None, secret_string: Text = None, tags: List = None, add_replica_regions: List = None, force_overwrite_replica_secret: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new secret. A secret in Secrets Manager consists of both the protected secret data and the important
    information needed to manage the secret. Secrets Manager stores the encrypted secret data in one of a collection
    of "versions" associated with the secret. Each version contains a copy of the encrypted secret data. Each
    version is associated with one or more "staging labels" that identify where the version is in the rotation
    cycle. The SecretVersionsToStages field of the secret contains the mapping of staging labels to the active
    versions of the secret. Versions without a staging label are considered deprecated and not included in the list.
    You provide the secret data to be encrypted by putting text in either the SecretString parameter or binary data
    in the SecretBinary parameter, but not both. If you include SecretString or SecretBinary then Secrets Manager
    also creates an initial secret version and automatically attaches the staging label AWSCURRENT to the new
    version.    If you call an operation to encrypt or decrypt the SecretString or SecretBinary for a secret in the
    same account as the calling user and that secret doesn't specify a Amazon Web Services KMS encryption key,
    Secrets Manager uses the account's default Amazon Web Services managed customer master key (CMK) with the alias
    aws/secretsmanager. If this key doesn't already exist in your account then Secrets Manager creates it for you
    automatically. All users and roles in the same Amazon Web Services account automatically have access to use the
    default CMK. Note that if an Secrets Manager API call results in Amazon Web Services creating the account's
    Amazon Web Services-managed CMK, it can result in a one-time significant delay in returning the result.   If the
    secret resides in a different Amazon Web Services account from the credentials calling an API that requires
    encryption or decryption of the secret value then you must create and use a custom Amazon Web Services KMS CMK
    because you can't access the default CMK for the account using credentials from a different Amazon Web Services
    account. Store the ARN of the CMK in the secret when you create the secret or when you update it by including it
    in the KMSKeyId. If you call an API that must encrypt or decrypt SecretString or SecretBinary using credentials
    from a different account then the Amazon Web Services KMS key policy must grant cross-account access to that
    other account's user or role for both the kms:GenerateDataKey and kms:Decrypt operations.       Minimum
    permissions  To run this command, you must have the following permissions:   secretsmanager:CreateSecret
    kms:GenerateDataKey - needed only if you use a customer-managed Amazon Web Services KMS key to encrypt the
    secret. You do not need this permission to use the account default Amazon Web Services managed CMK for Secrets
    Manager.   kms:Decrypt - needed only if you use a customer-managed Amazon Web Services KMS key to encrypt the
    secret. You do not need this permission to use the account default Amazon Web Services managed CMK for Secrets
    Manager.   secretsmanager:TagResource - needed only if you include the Tags parameter.     Related operations
    To delete a secret, use DeleteSecret.   To modify an existing secret, use UpdateSecret.   To create a new
    version of a secret, use PutSecretValue.   To retrieve the encrypted secure string and secure binary values, use
    GetSecretValue.   To retrieve all other details for a secret, use DescribeSecret. This does not include the
    encrypted secure string and secure binary values.   To retrieve the list of secret versions associated with the
    current secret, use DescribeSecret and examine the SecretVersionsToStages response value.

    Args:
        name(Text): Specifies the friendly name of the new secret. The secret name must be ASCII letters, digits, or
            the following characters : /_+=.@-  Do not end your secret name with a hyphen followed by six
            characters. If you do so, you risk confusion and unexpected results when searching for a secret
            by partial ARN. Secrets Manager automatically adds a hyphen and six random characters at the end
            of the ARN.
        client_request_token(Text, optional): (Optional) If you include SecretString or SecretBinary, then an initial version is created as
            part of the secret, and this parameter specifies a unique identifier for the new version.   If
            you use the Amazon Web Services CLI or one of the Amazon Web Services SDK to call this
            operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for
            you and includes it as the value for this parameter in the request. If you don't use the SDK and
            instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must
            generate a ClientRequestToken yourself for the new version and include the value in the request.
            This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental
            creation of duplicate versions if there are failures and retries during a rotation. We recommend
            that you generate a UUID-type value to ensure uniqueness of your versions within the specified
            secret.    If the ClientRequestToken value isn't already associated with a version of the secret
            then a new version of the secret is created.    If a version with this value already exists and
            the version SecretString and SecretBinary values are the same as those in the request, then the
            request is ignored.   If a version with this value already exists and that version's
            SecretString and SecretBinary values are different from those in the request, then the request
            fails because you cannot modify an existing version. Instead, use PutSecretValue to create a new
            version.   This value becomes the VersionId of the new version. Defaults to None.
        description(Text, optional): (Optional) Specifies a user-provided description of the secret. Defaults to None.
        kms_key_id(Text, optional): (Optional) Specifies the ARN, Key ID, or alias of the Amazon Web Services KMS customer master
            key (CMK) to be used to encrypt the SecretString or SecretBinary values in the versions stored
            in this secret. You can specify any of the supported ways to identify a Amazon Web Services KMS
            key ID. If you need to reference a CMK in a different account, you can use only the key ARN or
            the alias ARN. If you don't specify this value, then Secrets Manager defaults to using the
            Amazon Web Services account's default CMK (the one named aws/secretsmanager). If a Amazon Web
            Services KMS CMK with that name doesn't yet exist, then Secrets Manager creates it for you
            automatically the first time it needs to encrypt a version's SecretString or SecretBinary
            fields.  You can use the account default CMK to encrypt and decrypt only if you call this
            operation using credentials from the same account that owns the secret. If the secret resides in
            a different account, then you must create a custom CMK and specify the ARN in this field. Defaults to None.
        secret_binary(ByteString, optional): (Optional) Specifies binary data that you want to encrypt and store in the new version of the
            secret. To use this parameter in the command-line tools, we recommend that you store your binary
            data in a file and then use the appropriate technique for your tool to pass the contents of the
            file as a parameter. Either SecretString or SecretBinary must have a value, but not both. They
            cannot both be empty. This parameter is not available using the Secrets Manager console. It can
            be accessed only by using the Amazon Web Services CLI or one of the Amazon Web Services SDKs. Defaults to None.
        secret_string(Text, optional): (Optional) Specifies text data that you want to encrypt and store in this new version of the
            secret. Either SecretString or SecretBinary must have a value, but not both. They cannot both be
            empty. If you create a secret by using the Secrets Manager console then Secrets Manager puts the
            protected secret text in only the SecretString parameter. The Secrets Manager console stores the
            information as a JSON structure of key/value pairs that the Lambda rotation function knows how
            to parse. For storing multiple values, we recommend that you use a JSON text string argument and
            specify key/value pairs. For information on how to format a JSON parameter for the various
            command line tool environments, see Using JSON for Parameters in the CLI User Guide. For
            example:  {"username":"bob","password":"abc123xyz456"}  If your command-line tool or SDK
            requires quotation marks around the parameter, you should use single quotes to avoid confusion
            with the double quotes required in the JSON text. Defaults to None.
        tags(List, optional): (Optional) Specifies a list of user-defined tags that are attached to the secret. Each tag is a
            "Key" and "Value" pair of strings. This operation only appends tags to the existing list of
            tags. To remove tags, you must use UntagResource.    Secrets Manager tag key names are case
            sensitive. A tag with the key "ABC" is a different tag from one with key "abc".   If you check
            tags in IAM policy Condition elements as part of your security strategy, then adding or removing
            a tag can change permissions. If the successful completion of this operation would result in you
            losing your permissions for this secret, then this operation is blocked and returns an Access
            Denied error.    This parameter requires a JSON text string argument. For information on how to
            format a JSON parameter for the various command line tool environments, see Using JSON for
            Parameters in the CLI User Guide. For example:
            [{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]  If your
            command-line tool or SDK requires quotation marks around the parameter, you should use single
            quotes to avoid confusion with the double quotes required in the JSON text.  The following basic
            restrictions apply to tags:   Maximum number of tags per secret—50   Maximum key length—127
            Unicode characters in UTF-8   Maximum value length—255 Unicode characters in UTF-8   Tag keys
            and values are case sensitive.   Do not use the aws: prefix in your tag names or values because
            Amazon Web Services reserves it for Amazon Web Services use. You can't edit or delete tag names
            or values with this prefix. Tags with this prefix do not count against your tags per secret
            limit.   If you use your tagging schema across multiple services and resources, remember other
            services might have restrictions on allowed characters. Generally allowed characters: letters,
            spaces, and numbers representable in UTF-8, plus the following special characters: + - = . _ : /
            @. Defaults to None.
        add_replica_regions(List, optional): (Optional) Add a list of regions to replicate secrets. Secrets Manager replicates the KMSKeyID
            objects to the list of regions specified in the parameter. Defaults to None.
        force_overwrite_replica_secret(bool, optional): (Optional) If set, the replication overwrites a secret with the same name in the destination
            region. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.secretsmanager.secret.present:
                - name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.secretsmanager.secret.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.secretsmanager.describe_secret(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.secretsmanager.create_secret(
                ctx,
                
                
                **{"Name": name, "ClientRequestToken": client_request_token, "Description": description, "KmsKeyId": kms_key_id, "SecretBinary": secret_binary, "SecretString": secret_string, "Tags": tags, "AddReplicaRegions": add_replica_regions, "ForceOverwriteReplicaSecret": force_overwrite_replica_secret}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.secretsmanager.describe_secret(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, secret_id: Text, recovery_window_in_days: int = None, force_delete_without_recovery: bool = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an entire secret and all of the versions. You can optionally include a recovery window during which you
    can restore the secret. If you don't specify a recovery window value, the operation defaults to 30 days. Secrets
    Manager attaches a DeletionDate stamp to the secret that specifies the end of the recovery window. At the end of
    the recovery window, Secrets Manager deletes the secret permanently. At any time before recovery window ends,
    you can use RestoreSecret to remove the DeletionDate and cancel the deletion of the secret. You cannot access
    the encrypted secret information in any secret scheduled for deletion. If you need to access that information,
    you must cancel the deletion with RestoreSecret and then retrieve the information.    There is no explicit
    operation to delete a version of a secret. Instead, remove all staging labels from the VersionStage field of a
    version. That marks the version as deprecated and allows Secrets Manager to delete it as needed. Versions
    without any staging labels do not show up in ListSecretVersionIds unless you specify IncludeDeprecated.   The
    permanent secret deletion at the end of the waiting period is performed as a background task with low priority.
    There is no guarantee of a specific time after the recovery window for the actual delete operation to occur.
    Minimum permissions  To run this command, you must have the following permissions:   secretsmanager:DeleteSecret
    Related operations    To create a secret, use CreateSecret.   To cancel deletion of a version of a secret before
    the recovery window has expired, use RestoreSecret.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        secret_id(Text): Specifies the secret to delete. You can specify either the Amazon Resource Name (ARN) or the
            friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a
            complete ARN. You can specify a partial ARN too—for example, if you don’t include the final
            hyphen and six random characters that Secrets Manager adds at the end of the ARN when you
            created the secret. A partial ARN match can work as long as it uniquely matches only one secret.
            However, if your secret has a name that ends in a hyphen followed by six characters (before
            Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a
            partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a
            complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend
            that you don’t create secret names ending with a hyphen followed by six characters. If you
            specify an incomplete ARN without the random suffix, and instead provide the 'friendly name',
            you must not include the random suffix. If you do include the random suffix added by Secrets
            Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error,
            depending on your permissions.
        recovery_window_in_days(int, optional): (Optional) Specifies the number of days that Secrets Manager waits before Secrets Manager can
            delete the secret. You can't use both this parameter and the ForceDeleteWithoutRecovery
            parameter in the same API call. This value can range from 7 to 30 days with a default value of
            30. Defaults to None.
        force_delete_without_recovery(bool, optional): (Optional) Specifies that the secret is to be deleted without any recovery window. You can't use
            both this parameter and the RecoveryWindowInDays parameter in the same API call. An asynchronous
            background process performs the actual deletion, so there can be a short delay before the
            operation completes. If you write code to delete and then immediately recreate a secret with the
            same name, ensure that your code includes appropriate back off and retry logic.  Use this
            parameter with caution. This parameter causes the operation to skip the normal waiting period
            before the permanent deletion that Amazon Web Services would normally impose with the
            RecoveryWindowInDays parameter. If you delete a secret with the ForceDeleteWithouRecovery
            parameter, then you have no opportunity to recover the secret. You lose the secret permanently.
            If you use this parameter and include a previously deleted or nonexistent secret, the operation
            does not return the error ResourceNotFoundException in order to correctly handle retries. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.secretsmanager.secret.absent:
                - name: value
                - secret_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.secretsmanager.secret.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.secretsmanager.describe_secret(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.secretsmanager.delete_secret(
                ctx,
                
                
                **{"SecretId": secret_id, "RecoveryWindowInDays": recovery_window_in_days, "ForceDeleteWithoutRecovery": force_delete_without_recovery}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.secretsmanager.describe_secret(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

