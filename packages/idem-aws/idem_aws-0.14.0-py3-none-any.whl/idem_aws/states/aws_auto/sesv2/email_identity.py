"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.sesv2.create_email_identity
hub.exec.boto3.client.sesv2.delete_email_identity
hub.exec.boto3.client.sesv2.get_email_identity
hub.exec.boto3.client.sesv2.list_email_identities
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, email_identity: Text, tags: List = None, dkim_signing_attributes: Dict = None, configuration_set_name: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Starts the process of verifying an email identity. An identity is an email address or domain that you use when
    you send email. Before you can use an identity to send email, you first have to verify it. By verifying an
    identity, you demonstrate that you're the owner of the identity, and that you've given Amazon SES API v2
    permission to send email from the identity. When you verify an email address, Amazon SES sends an email to the
    address. Your email address is verified as soon as you follow the link in the verification email.  When you
    verify a domain without specifying the DkimSigningAttributes object, this operation provides a set of DKIM
    tokens. You can convert these tokens into CNAME records, which you then add to the DNS configuration for your
    domain. Your domain is verified when Amazon SES detects these records in the DNS configuration for your domain.
    This verification method is known as Easy DKIM. Alternatively, you can perform the verification process by
    providing your own public-private key pair. This verification method is known as Bring Your Own DKIM (BYODKIM).
    To use BYODKIM, your call to the CreateEmailIdentity operation has to include the DkimSigningAttributes object.
    When you specify this object, you provide a selector (a component of the DNS record name that identifies the
    public key that you want to use for DKIM authentication) and a private key. When you verify a domain, this
    operation provides a set of DKIM tokens, which you can convert into CNAME tokens. You add these CNAME tokens to
    the DNS configuration for your domain. Your domain is verified when Amazon SES detects these records in the DNS
    configuration for your domain. For some DNS providers, it can take 72 hours or more to complete the domain
    verification process. Additionally, you can associate an existing configuration set with the email identity that
    you're verifying.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        email_identity(Text): The email address or domain that you want to verify.
        tags(List, optional): An array of objects that define the tags (keys and values) that you want to associate with the
            email identity. Defaults to None.
        dkim_signing_attributes(Dict, optional): If your request includes this object, Amazon SES configures the identity to use Bring Your Own
            DKIM (BYODKIM) for DKIM authentication purposes, as opposed to the default method, Easy DKIM.
            You can only specify this object if the email identity is a domain, as opposed to an address. Defaults to None.
        configuration_set_name(Text, optional): The configuration set to use by default when sending from this identity. Note that any
            configuration set defined in the email sending request takes precedence. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.sesv2.email_identity.present:
                - name: value
                - email_identity: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sesv2.email_identity.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.sesv2.get_email_identity(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.sesv2.create_email_identity(
                ctx,
                
                
                **{"EmailIdentity": email_identity, "Tags": tags, "DkimSigningAttributes": dkim_signing_attributes, "ConfigurationSetName": configuration_set_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.sesv2.get_email_identity(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, email_identity: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an email identity. An identity can be either an email address or a domain name.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        email_identity(Text): The identity (that is, the email address or domain) that you want to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.sesv2.email_identity.absent:
                - name: value
                - email_identity: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sesv2.email_identity.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.sesv2.get_email_identity(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.sesv2.delete_email_identity(
                ctx,
                
                
                **{"EmailIdentity": email_identity}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.sesv2.get_email_identity(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

