"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.sesv2.create_email_identity_policy
hub.exec.boto3.client.sesv2.delete_email_identity_policy
hub.exec.boto3.client.sesv2.get_email_identity_policies
hub.exec.boto3.client.sesv2.update_email_identity_policy
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, email_identity: Text, policy_name: Text, policy: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates the specified sending authorization policy for the given identity (an email address or a domain).  This
    API is for the identity owner only. If you have not verified the identity, this API will return an error.
    Sending authorization is a feature that enables an identity owner to authorize other senders to use its
    identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can
    execute this operation no more than once per second.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        email_identity(Text): The email identity for which you want to create a policy.
        policy_name(Text): The name of the policy. The policy name cannot exceed 64 characters and can only include
            alphanumeric characters, dashes, and underscores.
        policy(Text): The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the
            syntax of sending authorization policies, see the Amazon SES Developer Guide.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.sesv2.email_identity_policy.present:
                - name: value
                - email_identity: value
                - policy_name: value
                - policy: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sesv2.email_identity_policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.sesv2.get_email_identity_policies(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.sesv2.create_email_identity_policy(
                ctx,
                
                
                **{"EmailIdentity": email_identity, "PolicyName": policy_name, "Policy": policy}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.sesv2.get_email_identity_policies(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, email_identity: Text, policy_name: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the specified sending authorization policy for the given identity (an email address or a domain). This
    API returns successfully even if a policy with the specified name does not exist.  This API is for the identity
    owner only. If you have not verified the identity, this API will return an error.  Sending authorization is a
    feature that enables an identity owner to authorize other senders to use its identities. For information about
    using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than
    once per second.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        email_identity(Text): The email identity for which you want to delete a policy.
        policy_name(Text): The name of the policy. The policy name cannot exceed 64 characters and can only include
            alphanumeric characters, dashes, and underscores.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.sesv2.email_identity_policy.absent:
                - name: value
                - email_identity: value
                - policy_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.sesv2.email_identity_policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.sesv2.get_email_identity_policies(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.sesv2.delete_email_identity_policy(
                ctx,
                
                
                **{"EmailIdentity": email_identity, "PolicyName": policy_name}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.sesv2.get_email_identity_policies(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

