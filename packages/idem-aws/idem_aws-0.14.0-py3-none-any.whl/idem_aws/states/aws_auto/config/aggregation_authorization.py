"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.config.delete_aggregation_authorization
hub.exec.boto3.client.config.describe_aggregation_authorizations
hub.exec.boto3.client.config.put_aggregation_authorization
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, authorized_account_id: Text, authorized_aws_region: Text, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Authorizes the aggregator account and region to collect data from the source account and region.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        authorized_account_id(Text): The 12-digit account ID of the account authorized to aggregate data.
        authorized_aws_region(Text): The region authorized to collect aggregated data.
        tags(List, optional): An array of tag object. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.config.aggregation_authorization.present:
                - name: value
                - authorized_account_id: value
                - authorized_aws_region: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.config.aggregation_authorization.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.config.describe_aggregation_authorizations(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.config.put_aggregation_authorization(
                ctx,
                
                
                **{"AuthorizedAccountId": authorized_account_id, "AuthorizedAwsRegion": authorized_aws_region, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.config.describe_aggregation_authorizations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, authorized_account_id: Text, authorized_aws_region: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the authorization granted to the specified configuration aggregator account in a specified region.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        authorized_account_id(Text): The 12-digit account ID of the account authorized to aggregate data.
        authorized_aws_region(Text): The region authorized to collect aggregated data.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.config.aggregation_authorization.absent:
                - name: value
                - authorized_account_id: value
                - authorized_aws_region: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.config.aggregation_authorization.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.config.describe_aggregation_authorizations(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.config.delete_aggregation_authorization(
                ctx,
                
                
                **{"AuthorizedAccountId": authorized_account_id, "AuthorizedAwsRegion": authorized_aws_region}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.config.describe_aggregation_authorizations(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

