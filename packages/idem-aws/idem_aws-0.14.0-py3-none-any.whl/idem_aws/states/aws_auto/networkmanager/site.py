"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.networkmanager.create_site
hub.exec.boto3.client.networkmanager.delete_site
hub.exec.boto3.client.networkmanager.get_sites
hub.exec.boto3.client.networkmanager.update_site
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, global_network_id: Text, description: Text = None, location: Dict = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new site in a global network.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        global_network_id(Text): The ID of the global network.
        description(Text, optional): A description of your site. Length Constraints: Maximum length of 256 characters. Defaults to None.
        location(Dict, optional): The site location. This information is used for visualization in the Network Manager console. If
            you specify the address, the latitude and longitude are automatically calculated.    Address:
            The physical address of the site.    Latitude: The latitude of the site.     Longitude: The
            longitude of the site. Defaults to None.
        tags(List, optional): The tags to apply to the resource during creation. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.networkmanager.site.present:
                - name: value
                - global_network_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.networkmanager.site.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.networkmanager.get_sites(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.networkmanager.create_site(
                ctx,
                
                
                **{"GlobalNetworkId": global_network_id, "Description": description, "Location": location, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.networkmanager.get_sites(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, global_network_id: Text, site_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an existing site. The site cannot be associated with any device or link.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        global_network_id(Text): The ID of the global network.
        site_id(Text): The ID of the site.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.networkmanager.site.absent:
                - name: value
                - global_network_id: value
                - site_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.networkmanager.site.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.networkmanager.get_sites(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.networkmanager.delete_site(
                ctx,
                
                
                **{"GlobalNetworkId": global_network_id, "SiteId": site_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.networkmanager.get_sites(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

