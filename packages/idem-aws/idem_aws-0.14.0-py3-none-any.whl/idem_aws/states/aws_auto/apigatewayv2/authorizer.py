"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.apigatewayv2.create_authorizer
hub.exec.boto3.client.apigatewayv2.delete_authorizer
hub.exec.boto3.client.apigatewayv2.get_authorizers
hub.exec.boto3.client.apigatewayv2.update_authorizer
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, api_id: Text, authorizer_type: Text, identity_source: List, authorizer_credentials_arn: Text = None, authorizer_payload_format_version: Text = None, authorizer_result_ttl_in_seconds: int = None, authorizer_uri: Text = None, enable_simple_responses: bool = None, identity_validation_expression: Text = None, jwt_configuration: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an Authorizer for an API.

    Args:
        name(Text): The name of the authorizer.
        api_id(Text): The API identifier.
        authorizer_credentials_arn(Text, optional): Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To
            specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use
            resource-based permissions on the Lambda function, don't specify this parameter. Supported only
            for REQUEST authorizers. Defaults to None.
        authorizer_payload_format_version(Text, optional): Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API
            Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see Working with AWS Lambda
            authorizers for HTTP APIs. Defaults to None.
        authorizer_result_ttl_in_seconds(int, optional): The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization
            caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The
            maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers. Defaults to None.
        authorizer_type(Text): The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters.
            Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        authorizer_uri(Text, optional): The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a
            well-formed Lambda function URI, for example, arn:aws:apigateway:us-
            west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-
            west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this
            form: arn:aws:apigateway:{region}:lambda:path/{service_api}                , where {region} is
            the same as the region hosting the Lambda function, path indicates that the remaining substring
            in the URI should be treated as the path to the resource, including the initial /. For Lambda
            functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
            Supported only for REQUEST authorizers. Defaults to None.
        enable_simple_responses(bool, optional): Specifies whether a Lambda authorizer returns a response in a simple format. By default, a
            Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a
            boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see Working
            with AWS Lambda authorizers for HTTP APIs. Defaults to None.
        identity_source(List): The identity source for which authorization is requested. For a REQUEST authorizer, this is
            optional. The value is a set of one or more mapping expressions of the specified request
            parameters. The identity source can be headers, query string parameters, stage variables, and
            context parameters. For example, if an Auth header and a Name query string parameter are defined
            as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for
            WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example,
            $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime
            validation for Lambda-based authorizers by verifying all of the identity-related request
            parameters are present in the request, not null, and non-empty. Only when this is true does the
            authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized
            response without calling the Lambda function. For HTTP APIs, identity sources are also used as
            the cache key when caching is enabled. To learn more, see Working with AWS Lambda authorizers
            for HTTP APIs. For JWT, a single entry that specifies where to extract the JSON Web Token (JWT)
            from inbound requests. Currently only header-based and query parameter-based selections are
            supported, for example $request.header.Authorization.
        identity_validation_expression(Text, optional): This parameter is not used. Defaults to None.
        jwt_configuration(Dict, optional): Represents the configuration of a JWT authorizer. Required for the JWT authorizer type.
            Supported only for HTTP APIs. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.apigatewayv2.authorizer.present:
                - name: value
                - api_id: value
                - authorizer_type: value
                - identity_source: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigatewayv2.authorizer.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.apigatewayv2.get_authorizers(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.apigatewayv2.create_authorizer(
                ctx,
                
                
                **{"Name": name, "ApiId": api_id, "AuthorizerCredentialsArn": authorizer_credentials_arn, "AuthorizerPayloadFormatVersion": authorizer_payload_format_version, "AuthorizerResultTtlInSeconds": authorizer_result_ttl_in_seconds, "AuthorizerType": authorizer_type, "AuthorizerUri": authorizer_uri, "EnableSimpleResponses": enable_simple_responses, "IdentitySource": identity_source, "IdentityValidationExpression": identity_validation_expression, "JwtConfiguration": jwt_configuration}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.apigatewayv2.get_authorizers(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, api_id: Text, authorizer_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an Authorizer.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        api_id(Text): The API identifier.
        authorizer_id(Text): The authorizer identifier.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.apigatewayv2.authorizer.absent:
                - name: value
                - api_id: value
                - authorizer_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.apigatewayv2.authorizer.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.apigatewayv2.get_authorizers(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.apigatewayv2.delete_authorizer(
                ctx,
                
                
                **{"ApiId": api_id, "AuthorizerId": authorizer_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.apigatewayv2.get_authorizers(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

