"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.servicecatalog_appregistry.associate_attribute_group
hub.exec.boto3.client.servicecatalog_appregistry.create_attribute_group
hub.exec.boto3.client.servicecatalog_appregistry.delete_attribute_group
hub.exec.boto3.client.servicecatalog_appregistry.disassociate_attribute_group
hub.exec.boto3.client.servicecatalog_appregistry.get_attribute_group
hub.exec.boto3.client.servicecatalog_appregistry.list_attribute_groups
hub.exec.boto3.client.servicecatalog_appregistry.update_attribute_group
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, attributes: Text, client_token: Text, description: Text = None, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new attribute group as a container for user-defined attributes. This feature enables users to have
    full control over their cloud application's metadata in a rich machine-readable format to facilitate integration
    with automated workflows and third-party tools.

    Args:
        name(Text): The name of the attribute group.
        description(Text, optional): The description of the attribute group that the user provides. Defaults to None.
        attributes(Text): A JSON string in the form of nested key-value pairs that represent the attributes in the group
            and describes an application and its components.
        tags(Dict, optional): Key-value pairs you can use to associate with the attribute group. Defaults to None.
        client_token(Text): A unique identifier that you provide to ensure idempotency. If you retry a request that
            completed successfully using the same client token and the same parameters, the retry succeeds
            without performing any further actions. If you retry a successful request using the same client
            token, but one or more of the parameters are different, the retry fails.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.servicecatalog_appregistry.attribute_group.present:
                - name: value
                - attributes: value
                - client_token: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.servicecatalog_appregistry.attribute_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.servicecatalog_appregistry.get_attribute_group(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.servicecatalog_appregistry.create_attribute_group(
                ctx,
                
                
                **{"Name": name, "description": description, "attributes": attributes, "tags": tags, "clientToken": client_token}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.servicecatalog_appregistry.get_attribute_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, attribute_group: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an attribute group, specified either by its attribute group ID or name.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        attribute_group(Text): The name or ID of the attribute group that holds the attributes to describe the application.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.servicecatalog_appregistry.attribute_group.absent:
                - name: value
                - attribute_group: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.servicecatalog_appregistry.attribute_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.servicecatalog_appregistry.get_attribute_group(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.servicecatalog_appregistry.delete_attribute_group(
                ctx,
                
                
                **{"attributeGroup": attribute_group}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.servicecatalog_appregistry.get_attribute_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

