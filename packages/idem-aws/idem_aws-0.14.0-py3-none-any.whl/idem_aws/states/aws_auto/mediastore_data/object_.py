"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.mediastore_data.delete_object
hub.exec.boto3.client.mediastore_data.describe_object
hub.exec.boto3.client.mediastore_data.get_object
hub.exec.boto3.client.mediastore_data.put_object
"""



from typing import *
import dict_tools.differ as differ


__virtualname__ = "object"
async def present(hub, ctx, name: Text, body: ByteString, path: Text, content_type: Text = None, cache_control: Text = None, storage_class: Text = None, upload_availability: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Uploads an object to the specified path. Object sizes are limited to 25 MB for standard upload availability and
    10 MB for streaming upload availability.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        body(ByteString): The bytes to be stored.
        path(Text): The path (including the file name) where the object is stored in the container. Format: <folder
            name>/<folder name>/<file name> For example, to upload the file mlaw.avi to the folder path
            premium\canada in the container movies, enter the path premium/canada/mlaw.avi. Do not include
            the container name in this path. If the path includes any folders that don't exist yet, the
            service creates them. For example, suppose you have an existing premium/usa subfolder. If you
            specify premium/canada, the service creates a canada subfolder in the premium folder. You then
            have two subfolders, usa and canada, in the premium folder.  There is no correlation between the
            path to the source and the path (folders) in the container in AWS Elemental MediaStore. For more
            information about folders and how they exist in a container, see the AWS Elemental MediaStore
            User Guide. The file name is the name that is assigned to the file that you upload. The file can
            have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name.
            The file name can include or omit an extension.
        content_type(Text, optional): The content type of the object. Defaults to None.
        cache_control(Text, optional): An optional CacheControl header that allows the caller to control the object's cache behavior.
            Headers can be passed in as specified in the HTTP at
            https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9. Headers with a custom user-
            defined value are also accepted. Defaults to None.
        storage_class(Text, optional): Indicates the storage class of a Put request. Defaults to high-performance temporal storage
            class, and objects are persisted into durable storage shortly after being received. Defaults to None.
        upload_availability(Text, optional): Indicates the availability of an object while it is still uploading. If the value is set to
            streaming, the object is available for downloading after some initial buffering but before the
            object is uploaded completely. If the value is set to standard, the object is available for
            downloading only when it is uploaded completely. The default value for this header is standard.
            To use this header, you must also set the HTTP Transfer-Encoding header to chunked. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.mediastore_data.object_.present:
                - name: value
                - body: value
                - path: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediastore_data.object.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.mediastore_data.describe_object(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.mediastore_data.put_object(
                ctx,
                
                
                **{"Body": body, "Path": path, "ContentType": content_type, "CacheControl": cache_control, "StorageClass": storage_class, "UploadAvailability": upload_availability}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.mediastore_data.describe_object(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, path: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an object at the specified path.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        path(Text): The path (including the file name) where the object is stored in the container. Format: <folder
            name>/<folder name>/<file name>.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.mediastore_data.object_.absent:
                - name: value
                - path: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.mediastore_data.object.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.mediastore_data.describe_object(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.mediastore_data.delete_object(
                ctx,
                
                
                **{"Path": path}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.mediastore_data.describe_object(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

