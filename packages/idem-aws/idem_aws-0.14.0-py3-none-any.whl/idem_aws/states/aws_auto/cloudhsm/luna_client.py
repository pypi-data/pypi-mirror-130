"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.cloudhsm.create_luna_client
hub.exec.boto3.client.cloudhsm.delete_luna_client
hub.exec.boto3.client.cloudhsm.describe_luna_client
hub.exec.boto3.client.cloudhsm.list_luna_clients
hub.exec.boto3.client.cloudhsm.modify_luna_client
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, certificate: Text, label: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    This is documentation for AWS CloudHSM Classic. For more information, see AWS CloudHSM Classic FAQs, the AWS
    CloudHSM Classic User Guide, and the AWS CloudHSM Classic API Reference.  For information about the current
    version of AWS CloudHSM, see AWS CloudHSM, the AWS CloudHSM User Guide, and the AWS CloudHSM API Reference.
    Creates an HSM client.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        label(Text, optional): The label for the client. Defaults to None.
        certificate(Text): The contents of a Base64-Encoded X.509 v3 certificate to be installed on the HSMs used by this
            client.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.cloudhsm.luna_client.present:
                - name: value
                - certificate: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.cloudhsm.luna_client.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.cloudhsm.describe_luna_client(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.cloudhsm.create_luna_client(
                ctx,
                
                
                **{"Label": label, "Certificate": certificate}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.cloudhsm.describe_luna_client(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, client_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    This is documentation for AWS CloudHSM Classic. For more information, see AWS CloudHSM Classic FAQs, the AWS
    CloudHSM Classic User Guide, and the AWS CloudHSM Classic API Reference.  For information about the current
    version of AWS CloudHSM, see AWS CloudHSM, the AWS CloudHSM User Guide, and the AWS CloudHSM API Reference.
    Deletes a client.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        client_arn(Text): The ARN of the client to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.cloudhsm.luna_client.absent:
                - name: value
                - client_arn: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.cloudhsm.luna_client.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.cloudhsm.describe_luna_client(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.cloudhsm.delete_luna_client(
                ctx,
                
                
                **{"ClientArn": client_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.cloudhsm.describe_luna_client(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

