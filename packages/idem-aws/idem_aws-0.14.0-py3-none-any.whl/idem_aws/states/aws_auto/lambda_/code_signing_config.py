"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.lambda_.create_code_signing_config
hub.exec.boto3.client.lambda_.delete_code_signing_config
hub.exec.boto3.client.lambda_.get_code_signing_config
hub.exec.boto3.client.lambda_.list_code_signing_configs
hub.exec.boto3.client.lambda_.update_code_signing_config
"""



import copy
from typing import *
import dict_tools.differ as differ

async def present(hub, ctx, name: Text, allowed_publishers: Dict, description: Text = None, code_signing_policies: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a code signing configuration. A code signing configuration defines a list of allowed signing profiles
    and defines the code-signing validation policy (action to be taken if deployment validation checks fail).

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        description(Text, optional): Descriptive name for this code signing configuration. Defaults to None.
        allowed_publishers(Dict): Signing profiles for this code signing configuration.
        code_signing_policies(Dict, optional): The code signing policies define the actions to take if the validation checks fail. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.lambda_.code_signing_config.present:
                - name: value
                - allowed_publishers: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lambda_.code_signing_config.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.lambda_.get_code_signing_config(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.lambda_.create_code_signing_config(
                ctx,
                
                
                **{"Description": description, "AllowedPublishers": allowed_publishers, "CodeSigningPolicies": code_signing_policies}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.lambda_.get_code_signing_config(name)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def absent(hub, ctx, name: Text, code_signing_config_arn: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the code signing configuration. You can delete the code signing configuration only if no function is
    using it.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        code_signing_config_arn(Text): The The Amazon Resource Name (ARN) of the code signing configuration.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.lambda_.code_signing_config.absent:
                - name: value
                - code_signing_config_arn: value
    '''

    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.lambda_.code_signing_config.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.lambda_.get_code_signing_config(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.lambda_.delete_code_signing_config(
                ctx,
                
                
                **{"CodeSigningConfigArn": code_signing_config_arn}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.lambda_.get_code_signing_config(name)
    result["changes"] = differ.deep_diff(before, after)
    return result



async def describe(hub, ctx)  -> Dict[str, Dict[str, Any]]:
    r'''
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function

    
    Returns a list of code signing configurations. A request returns up to 10,000 configurations per call. You can
    use the MaxItems parameter to return fewer configurations per call.


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe aws_auto.lambda_.code_signing_config
    '''

    
    result = {}

    ret = await hub.exec.boto3.client.lambda_.list_code_signing_configs(ctx)
    if not ret["status"]:
        hub.log.debug(f"Could not describe code_signing_config {ret['comment']}")
        return result

    for code_signing_config in ret["ret"]["TODO"]:
        new_code_signing_config = [
                {"Marker": marker, "MaxItems": max_items}
        ]
        result[code_signing_config["code_signing_configId"]] = {"aws_auto.lambda_.code_signing_config.present": new_code_signing_config}

        for i, data in enumerate(code_signing_config.get("", ())):
            sub_code_signing_config = copy.deepcopy(new_code_signing_config)

            # TODO check for subresouruces
            sub_code_signing_config.append({})
            sub_code_signing_config.append({"name": "TODOs"})
            result[f"TODOs-{i}"] = {"aws_auto.lambda_.code_signing_config.present": sub_code_signing_config}

    return result


