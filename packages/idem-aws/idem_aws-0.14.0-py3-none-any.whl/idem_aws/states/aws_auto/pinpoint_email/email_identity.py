"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.pinpoint_email.create_email_identity
hub.exec.boto3.client.pinpoint_email.delete_email_identity
hub.exec.boto3.client.pinpoint_email.get_email_identity
hub.exec.boto3.client.pinpoint_email.list_email_identities
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, email_identity: Text, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Verifies an email identity for use with Amazon Pinpoint. In Amazon Pinpoint, an identity is an email address or
    domain that you use when you send email. Before you can use an identity to send email with Amazon Pinpoint, you
    first have to verify it. By verifying an address, you demonstrate that you're the owner of the address, and that
    you've given Amazon Pinpoint permission to send email from the address. When you verify an email address, Amazon
    Pinpoint sends an email to the address. Your email address is verified as soon as you follow the link in the
    verification email.  When you verify a domain, this operation provides a set of DKIM tokens, which you can
    convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your domain. Your domain is
    verified when Amazon Pinpoint detects these records in the DNS configuration for your domain. It usually takes
    around 72 hours to complete the domain verification process.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        email_identity(Text): The email address or domain that you want to verify.
        tags(List, optional): An array of objects that define the tags (keys and values) that you want to associate with the
            email identity. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.pinpoint_email.email_identity.present:
                - name: value
                - email_identity: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.pinpoint_email.email_identity.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.pinpoint_email.get_email_identity(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.pinpoint_email.create_email_identity(
                ctx,
                
                
                **{"EmailIdentity": email_identity, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.pinpoint_email.get_email_identity(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, email_identity: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an email identity that you previously verified for use with Amazon Pinpoint. An identity can be either
    an email address or a domain name.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        email_identity(Text): The identity (that is, the email address or domain) that you want to delete from your Amazon
            Pinpoint account.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.pinpoint_email.email_identity.absent:
                - name: value
                - email_identity: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.pinpoint_email.email_identity.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.pinpoint_email.get_email_identity(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.pinpoint_email.delete_email_identity(
                ctx,
                
                
                **{"EmailIdentity": email_identity}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.pinpoint_email.get_email_identity(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

