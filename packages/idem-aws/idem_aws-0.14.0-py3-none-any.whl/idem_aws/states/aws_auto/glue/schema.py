"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.glue.create_schema
hub.exec.boto3.client.glue.delete_schema
hub.exec.boto3.client.glue.get_schema
hub.exec.boto3.client.glue.update_schema
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, schema_name: Text, data_format: Text, registry_id: Dict = None, compatibility: Text = None, description: Text = None, tags: Dict = None, schema_definition: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists
    without actually registering the version. When the schema set is created, a version checkpoint will be set to
    the first version. Compatibility mode "DISABLED" restricts any additional schema versions from being added after
    the first schema version. For all other compatibility modes, validation of compatibility settings will be
    applied only from the second version onwards when the RegisterSchemaVersion API is used. When this API is called
    without a RegistryId, this will create an entry for a "default-registry" in the registry database tables, if it
    is not already present.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        registry_id(Dict, optional):  This is a wrapper shape to contain the registry identity fields. If this is not provided, the
            default registry will be used. The ARN format for the same will be: arn:aws:glue:us-
            east-2:<customer id>:registry/default-registry:random-5-letter-id. Defaults to None.
        schema_name(Text): Name of the schema to be created of max length of 255, and may only contain letters, numbers,
            hyphen, underscore, dollar sign, or hash mark. No whitespace.
        data_format(Text): The data format of the schema definition. Currently AVRO and JSON are supported.
        compatibility(Text, optional): The compatibility mode of the schema. The possible values are:    NONE: No compatibility mode
            applies. You can use this choice in development scenarios or if you do not know the
            compatibility mode that you want to apply to schemas. Any new version added will be accepted
            without undergoing a compatibility check.    DISABLED: This compatibility choice prevents
            versioning for a particular schema. You can use this choice to prevent future versioning of a
            schema.    BACKWARD: This compatibility choice is recommended as it allows data receivers to
            read both the current and one previous schema version. This means that for instance, a new
            schema version cannot drop data fields or change the type of these fields, so they can't be read
            by readers using the previous version.    BACKWARD_ALL: This compatibility choice allows data
            receivers to read both the current and all previous schema versions. You can use this choice
            when you need to delete fields or add optional fields, and check compatibility against all
            previous schema versions.     FORWARD: This compatibility choice allows data receivers to read
            both the current and one next schema version, but not necessarily later versions. You can use
            this choice when you need to add fields or delete optional fields, but only check compatibility
            against the last schema version.    FORWARD_ALL: This compatibility choice allows data receivers
            to read written by producers of any new registered schema. You can use this choice when you need
            to add fields or delete optional fields, and check compatibility against all previous schema
            versions.    FULL: This compatibility choice allows data receivers to read data written by
            producers using the previous or next version of the schema, but not necessarily earlier or later
            versions. You can use this choice when you need to add or remove optional fields, but only check
            compatibility against the last schema version.    FULL_ALL: This compatibility choice allows
            data receivers to read data written by producers using all previous schema versions. You can use
            this choice when you need to add or remove optional fields, and check compatibility against all
            previous schema versions. Defaults to None.
        description(Text, optional): An optional description of the schema. If description is not provided, there will not be any
            automatic default value for this. Defaults to None.
        tags(Dict, optional): Amazon Web Services tags that contain a key value pair and may be searched by console, command
            line, or API. If specified, follows the Amazon Web Services tags-on-create pattern. Defaults to None.
        schema_definition(Text, optional): The schema definition using the DataFormat setting for SchemaName. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.glue.schema.present:
                - name: value
                - schema_name: value
                - data_format: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.glue.schema.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.glue.get_schema(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.glue.create_schema(
                ctx,
                
                
                **{"RegistryId": registry_id, "SchemaName": schema_name, "DataFormat": data_format, "Compatibility": compatibility, "Description": description, "Tags": tags, "SchemaDefinition": schema_definition}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.glue.get_schema(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, schema_id: Dict)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete
    operation, you can call GetSchema API after the asynchronous call. Deleting a registry will deactivate all
    online operations for the schema, such as the GetSchemaByDefinition, and RegisterSchemaVersion APIs.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        schema_id(Dict): This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.glue.schema.absent:
                - name: value
                - schema_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.glue.schema.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.glue.get_schema(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.glue.delete_schema(
                ctx,
                
                
                **{"SchemaId": schema_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.glue.get_schema(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

