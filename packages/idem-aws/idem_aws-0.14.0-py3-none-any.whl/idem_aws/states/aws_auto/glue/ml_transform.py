"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.glue.create_ml_transform
hub.exec.boto3.client.glue.delete_ml_transform
hub.exec.boto3.client.glue.get_ml_transforms
hub.exec.boto3.client.glue.list_ml_transforms
hub.exec.boto3.client.glue.update_ml_transform
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, input_record_tables: List, parameters: Dict, role: Text, description: Text = None, glue_version: Text = None, max_capacity: float = None, worker_type: Text = None, number_of_workers: int = None, timeout: int = None, max_retries: int = None, tags: Dict = None, transform_encryption: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates an Glue machine learning transform. This operation creates the transform and all the necessary
    parameters to train it. Call this operation as the first step in the process of using a machine learning
    transform (such as the FindMatches transform) for deduplicating data. You can provide an optional Description,
    in addition to the parameters that you want to use for your algorithm. You must also specify certain parameters
    for the tasks that Glue runs on your behalf as part of learning from your data and creating a high-quality
    machine learning transform. These parameters include Role, and optionally, AllocatedCapacity, Timeout, and
    MaxRetries. For more information, see Jobs.

    Args:
        name(Text): The unique name that you give the transform when you create it.
        description(Text, optional): A description of the machine learning transform that is being defined. The default is an empty
            string. Defaults to None.
        input_record_tables(List): A list of Glue table definitions used by the transform.
        parameters(Dict): The algorithmic parameters that are specific to the transform type used. Conditionally dependent
            on the transform type.
        role(Text): The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The
            required permissions include both Glue service role permissions to Glue resources, and Amazon S3
            permissions required by the transform.    This role needs Glue service role permissions to allow
            access to resources in Glue. See Attach a Policy to IAM Users That Access Glue.   This role
            needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary
            directory, scripts, and any libraries used by the task run for this transform.
        glue_version(Text, optional): This value determines which version of Glue this machine learning transform is compatible with.
            Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility
            defaults to Glue 0.9. For more information, see Glue Versions in the developer guide. Defaults to None.
        max_capacity(float, optional): The number of Glue data processing units (DPUs) that are allocated to task runs for this
            transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure
            of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
            information, see the Glue pricing page.   MaxCapacity is a mutually exclusive option with
            NumberOfWorkers and WorkerType.   If either NumberOfWorkers or WorkerType is set, then
            MaxCapacity cannot be set.   If MaxCapacity is set then neither NumberOfWorkers or WorkerType
            can be set.   If WorkerType is set, then NumberOfWorkers is required (and vice versa).
            MaxCapacity and NumberOfWorkers must both be at least 1.   When the WorkerType field is set to a
            value other than Standard, the MaxCapacity field is set automatically and becomes read-only.
            When the WorkerType field is set to a value other than Standard, the MaxCapacity field is set
            automatically and becomes read-only. Defaults to None.
        worker_type(Text, optional): The type of predefined worker that is allocated when this task runs. Accepts a value of
            Standard, G.1X, or G.2X.   For the Standard worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 50GB disk, and 2 executors per worker.   For the G.1X worker type, each worker
            provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.   For the G.2X
            worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per
            worker.    MaxCapacity is a mutually exclusive option with NumberOfWorkers and WorkerType.   If
            either NumberOfWorkers or WorkerType is set, then MaxCapacity cannot be set.   If MaxCapacity is
            set then neither NumberOfWorkers or WorkerType can be set.   If WorkerType is set, then
            NumberOfWorkers is required (and vice versa).    MaxCapacity and NumberOfWorkers must both be at
            least 1. Defaults to None.
        number_of_workers(int, optional): The number of workers of a defined workerType that are allocated when this task runs. If
            WorkerType is set, then NumberOfWorkers is required (and vice versa). Defaults to None.
        timeout(int, optional): The timeout of the task run for this transform in minutes. This is the maximum time that a task
            run for this transform can consume resources before it is terminated and enters TIMEOUT status.
            The default is 2,880 minutes (48 hours). Defaults to None.
        max_retries(int, optional): The maximum number of times to retry a task for this transform after a task run fails. Defaults to None.
        tags(Dict, optional): The tags to use with this machine learning transform. You may use tags to limit access to the
            machine learning transform. For more information about tags in Glue, see Amazon Web Services
            Tags in Glue in the developer guide. Defaults to None.
        transform_encryption(Dict, optional): The encryption-at-rest settings of the transform that apply to accessing user data. Machine
            learning transforms can access user data encrypted in Amazon S3 using KMS. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.glue.ml_transform.present:
                - name: value
                - input_record_tables: value
                - parameters: value
                - role: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.glue.ml_transform.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.glue.get_ml_transforms(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.glue.create_ml_transform(
                ctx,
                
                
                **{"Name": name, "Description": description, "InputRecordTables": input_record_tables, "Parameters": parameters, "Role": role, "GlueVersion": glue_version, "MaxCapacity": max_capacity, "WorkerType": worker_type, "NumberOfWorkers": number_of_workers, "Timeout": timeout, "MaxRetries": max_retries, "Tags": tags, "TransformEncryption": transform_encryption}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.glue.get_ml_transforms(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, transform_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes an Glue machine learning transform. Machine learning transforms are a special type of transform that use
    machine learning to learn the details of the transformation to be performed by learning from examples provided
    by humans. These transformations are then saved by Glue. If you no longer need a transform, you can delete it by
    calling DeleteMLTransforms. However, any Glue jobs that still reference the deleted transform will no longer
    succeed.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        transform_id(Text): The unique identifier of the transform to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.glue.ml_transform.absent:
                - name: value
                - transform_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.glue.ml_transform.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.glue.get_ml_transforms(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.glue.delete_ml_transform(
                ctx,
                
                
                **{"TransformId": transform_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.glue.get_ml_transforms(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

