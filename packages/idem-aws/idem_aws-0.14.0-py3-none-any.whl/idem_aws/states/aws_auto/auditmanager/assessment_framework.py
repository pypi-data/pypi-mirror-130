"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.auditmanager.create_assessment_framework
hub.exec.boto3.client.auditmanager.delete_assessment_framework
hub.exec.boto3.client.auditmanager.get_assessment_framework
hub.exec.boto3.client.auditmanager.list_assessment_frameworks
hub.exec.boto3.client.auditmanager.update_assessment_framework
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, control_sets: List, description: Text = None, compliance_type: Text = None, tags: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     Creates a custom framework in Audit Manager.

    Args:
        name(Text):  The name of the new custom framework.
        description(Text, optional):  An optional description for the new custom framework. Defaults to None.
        compliance_type(Text, optional):  The compliance type that the new custom framework supports, such as CIS or HIPAA. Defaults to None.
        control_sets(List):  The control sets to be associated with the framework.
        tags(Dict, optional):  The tags associated with the framework. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.auditmanager.assessment_framework.present:
                - name: value
                - control_sets: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.auditmanager.assessment_framework.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.auditmanager.get_assessment_framework(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.auditmanager.create_assessment_framework(
                ctx,
                
                
                **{"Name": name, "description": description, "complianceType": compliance_type, "controlSets": control_sets, "tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.auditmanager.get_assessment_framework(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, framework_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     Deletes a custom framework in Audit Manager.

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        framework_id(Text):  The identifier for the specified framework.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.auditmanager.assessment_framework.absent:
                - name: value
                - framework_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.auditmanager.assessment_framework.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.auditmanager.get_assessment_framework(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.auditmanager.delete_assessment_framework(
                ctx,
                
                
                **{"frameworkId": framework_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.auditmanager.get_assessment_framework(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

