"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.gamelift.create_game_server_group
hub.exec.boto3.client.gamelift.delete_game_server_group
hub.exec.boto3.client.gamelift.describe_game_server_group
hub.exec.boto3.client.gamelift.list_game_server_groups
hub.exec.boto3.client.gamelift.resume_game_server_group
hub.exec.boto3.client.gamelift.suspend_game_server_group
hub.exec.boto3.client.gamelift.update_game_server_group
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, game_server_group_name: Text, role_arn: Text, min_size: int, max_size: int, launch_template: Dict, instance_definitions: List, auto_scaling_policy: Dict = None, balancing_strategy: Text = None, game_server_protection_policy: Text = None, vpc_subnets: List = None, tags: List = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This operation is used with the GameLift FleetIQ solution and game server groups.  Creates a GameLift FleetIQ
    game server group for managing game hosting on a collection of Amazon EC2 instances for game hosting. This
    operation creates the game server group, creates an Auto Scaling group in your AWS account, and establishes a
    link between the two groups. You can view the status of your game server groups in the GameLift console. Game
    server group metrics and events are emitted to Amazon CloudWatch. Before creating a new game server group, you
    must have the following:    An Amazon EC2 launch template that specifies how to launch Amazon EC2 instances with
    your game server build. For more information, see  Launching an Instance from a Launch Template in the Amazon
    EC2 User Guide.    An IAM role that extends limited access to your AWS account to allow GameLift FleetIQ to
    create and interact with the Auto Scaling group. For more information, see Create IAM roles for cross-service
    interaction in the GameLift FleetIQ Developer Guide.   To create a new game server group, specify a unique group
    name, IAM role and Amazon EC2 launch template, and provide a list of instance types that can be used in the
    group. You must also set initial maximum and minimum limits on the group's instance count. You can optionally
    set an Auto Scaling policy with target tracking based on a GameLift FleetIQ metric. Once the game server group
    and corresponding Auto Scaling group are created, you have full access to change the Auto Scaling group's
    configuration as needed. Several properties that are set when creating a game server group, including
    maximum/minimum size and auto-scaling policy settings, must be updated directly in the Auto Scaling group. Keep
    in mind that some Auto Scaling group properties are periodically updated by GameLift FleetIQ as part of its
    balancing activities to optimize for availability and cost.  Learn more   GameLift FleetIQ Guide   Related
    actions   CreateGameServerGroup | ListGameServerGroups | DescribeGameServerGroup | UpdateGameServerGroup |
    DeleteGameServerGroup | ResumeGameServerGroup | SuspendGameServerGroup | DescribeGameServerInstances | All APIs
    by task

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        game_server_group_name(Text): An identifier for the new game server group. This value is used to generate unique ARN
            identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group. The name
            must be unique per Region per AWS account.
        role_arn(Text): The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2
            Auto Scaling groups.
        min_size(int): The minimum number of instances allowed in the EC2 Auto Scaling group. During automatic scaling
            events, GameLift FleetIQ and EC2 do not scale down the group below this minimum. In production,
            this value should be set to at least 1. After the Auto Scaling group is created, update this
            value directly in the Auto Scaling group using the AWS console or APIs.
        max_size(int): The maximum number of instances allowed in the EC2 Auto Scaling group. During automatic scaling
            events, GameLift FleetIQ and EC2 do not scale up the group above this maximum. After the Auto
            Scaling group is created, update this value directly in the Auto Scaling group using the AWS
            console or APIs.
        launch_template(Dict): The EC2 launch template that contains configuration settings and game server code to be deployed
            to all instances in the game server group. You can specify the template using either the
            template name or ID. For help with creating a launch template, see Creating a Launch Template
            for an Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide. After the Auto Scaling
            group is created, update this value directly in the Auto Scaling group using the AWS console or
            APIs.  If you specify network interfaces in your launch template, you must explicitly set the
            property AssociatePublicIpAddress to "true". If no network interface is specified in the launch
            template, GameLift FleetIQ uses your account's default VPC.
        instance_definitions(List): The EC2 instance types and sizes to use in the Auto Scaling group. The instance definitions must
            specify at least two different instance types that are supported by GameLift FleetIQ. For more
            information on instance types, see EC2 Instance Types in the Amazon EC2 User Guide. You can
            optionally specify capacity weighting for each instance type. If no weight value is specified
            for an instance type, it is set to the default value "1". For more information about capacity
            weighting, see  Instance Weighting for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling
            User Guide.
        auto_scaling_policy(Dict, optional): Configuration settings to define a scaling policy for the Auto Scaling group that is optimized
            for game hosting. The scaling policy uses the metric "PercentUtilizedGameServers" to maintain a
            buffer of idle game servers that can immediately accommodate new games and players. After the
            Auto Scaling group is created, update this value directly in the Auto Scaling group using the
            AWS console or APIs. Defaults to None.
        balancing_strategy(Text, optional): Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the
            game server group. Method options include the following:    SPOT_ONLY - Only Spot Instances are
            used in the game server group. If Spot Instances are unavailable or not viable for game hosting,
            the game server group provides no hosting capacity until Spot Instances can again be used. Until
            then, no new instances are started, and the existing nonviable Spot Instances are terminated
            (after current gameplay ends) and are not replaced.    SPOT_PREFERRED - (default value) Spot
            Instances are used whenever available in the game server group. If Spot Instances are
            unavailable, the game server group continues to provide hosting capacity by falling back to On-
            Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends)
            and are replaced with new On-Demand Instances.    ON_DEMAND_ONLY - Only On-Demand Instances are
            used in the game server group. No Spot Instances are used, even when available, while this
            balancing strategy is in force. Defaults to None.
        game_server_protection_policy(Text, optional): A flag that indicates whether instances in the game server group are protected from early
            termination. Unprotected instances that have active game servers running might be terminated
            during a scale-down event, causing players to be dropped from the game. Protected instances
            cannot be terminated while there are active game servers running except in the event of a forced
            game server group deletion (see ). An exception to this is with Spot Instances, which can be
            terminated by AWS regardless of protection status. This property is set to NO_PROTECTION by
            default. Defaults to None.
        vpc_subnets(List, optional): A list of virtual private cloud (VPC) subnets to use with instances in the game server group. By
            default, all GameLift FleetIQ-supported Availability Zones are used. You can use this parameter
            to specify VPCs that you've set up. This property cannot be updated after the game server group
            is created, and the corresponding Auto Scaling group will always use the property value that is
            set with this request, even if the Auto Scaling group is updated directly. Defaults to None.
        tags(List, optional): A list of labels to assign to the new game server group resource. Tags are developer-defined
            key-value pairs. Tagging AWS resources is useful for resource management, access management, and
            cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference.
            Once the resource is created, you can use TagResource, UntagResource, and ListTagsForResource to
            add, remove, and view tags, respectively. The maximum tag limit may be lower than stated. See
            the AWS General Reference for actual tagging limits. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.gamelift.game_server_group.present:
                - name: value
                - game_server_group_name: value
                - role_arn: value
                - min_size: value
                - max_size: value
                - launch_template: value
                - instance_definitions: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.gamelift.game_server_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.gamelift.describe_game_server_group(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.gamelift.create_game_server_group(
                ctx,
                
                
                **{"GameServerGroupName": game_server_group_name, "RoleArn": role_arn, "MinSize": min_size, "MaxSize": max_size, "LaunchTemplate": launch_template, "InstanceDefinitions": instance_definitions, "AutoScalingPolicy": auto_scaling_policy, "BalancingStrategy": balancing_strategy, "GameServerProtectionPolicy": game_server_protection_policy, "VpcSubnets": vpc_subnets, "Tags": tags}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.gamelift.describe_game_server_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, game_server_group_name: Text, delete_option: Text = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
     This operation is used with the GameLift FleetIQ solution and game server groups.  Terminates a game server
    group and permanently deletes the game server group record. You have several options for how these resources are
    impacted when deleting the game server group. Depending on the type of delete operation selected, this operation
    might affect these resources:   The game server group   The corresponding Auto Scaling group   All game servers
    that are currently running in the group   To delete a game server group, identify the game server group to
    delete and specify the type of delete operation to initiate. Game server groups can only be deleted if they are
    in ACTIVE or ERROR status. If the delete request is successful, a series of operations are kicked off. The game
    server group status is changed to DELETE_SCHEDULED, which prevents new game servers from being registered and
    stops automatic scaling activity. Once all game servers in the game server group are deregistered, GameLift
    FleetIQ can begin deleting resources. If any of the delete operations fail, the game server group is placed in
    ERROR status. GameLift FleetIQ emits delete events to Amazon CloudWatch.  Learn more   GameLift FleetIQ Guide
    Related actions   CreateGameServerGroup | ListGameServerGroups | DescribeGameServerGroup | UpdateGameServerGroup
    | DeleteGameServerGroup | ResumeGameServerGroup | SuspendGameServerGroup | DescribeGameServerInstances | All
    APIs by task

    Args:
        name(Text): A name, ID, or JMES search path to identify the resource.
        game_server_group_name(Text): A unique identifier for the game server group. Use either the GameServerGroup name or ARN value.
        delete_option(Text, optional): The type of delete to perform. Options include the following:    SAFE_DELETE – (default)
            Terminates the game server group and EC2 Auto Scaling group only when it has no game servers
            that are in UTILIZED status.    FORCE_DELETE – Terminates the game server group, including all
            active game servers regardless of their utilization status, and the EC2 Auto Scaling group.
            RETAIN – Does a safe delete of the game server group but retains the EC2 Auto Scaling group as
            is. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.gamelift.game_server_group.absent:
                - name: value
                - game_server_group_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.gamelift.game_server_group.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.gamelift.describe_game_server_group(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.gamelift.delete_game_server_group(
                ctx,
                
                
                **{"GameServerGroupName": game_server_group_name, "DeleteOption": delete_option}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.gamelift.describe_game_server_group(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

