"""
Autogenerated state module using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

hub.exec.boto3.client.gamelift.delete_scaling_policy
hub.exec.boto3.client.gamelift.describe_scaling_policies
hub.exec.boto3.client.gamelift.put_scaling_policy
"""



from typing import *
import dict_tools.differ as differ
async def present(hub, ctx, name: Text, fleet_id: Text, metric_name: Text, scaling_adjustment: int = None, scaling_adjustment_type: Text = None, threshold: float = None, comparison_operator: Text = None, evaluation_periods: int = None, policy_type: Text = None, target_configuration: Dict = None)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Creates or updates a scaling policy for a fleet. Scaling policies are used to automatically scale a fleet's
    hosting capacity to meet player demand. An active scaling policy instructs Amazon GameLift to track a fleet
    metric and automatically change the fleet's capacity when a certain threshold is reached. There are two types of
    scaling policies: target-based and rule-based. Use a target-based policy to quickly and efficiently manage fleet
    scaling; this option is the most commonly used. Use rule-based policies when you need to exert fine-grained
    control over auto-scaling.  Fleets can have multiple scaling policies of each type in force at the same time;
    you can have one target-based policy, one or multiple rule-based scaling policies, or both. We recommend
    caution, however, because multiple auto-scaling policies can have unintended consequences. You can temporarily
    suspend all scaling policies for a fleet by calling StopFleetActions with the fleet action AUTO_SCALING. To
    resume scaling policies, call StartFleetActions with the same fleet action. To stop just one scaling policy--or
    to permanently remove it, you must delete the policy with DeleteScalingPolicy. Learn more about how to work with
    auto-scaling in Set Up Fleet Automatic Scaling.  Target-based policy  A target-based policy tracks a single
    metric: PercentAvailableGameSessions. This metric tells us how much of a fleet's hosting capacity is ready to
    host game sessions but is not currently in use. This is the fleet's buffer; it measures the additional player
    demand that the fleet could handle at current capacity. With a target-based policy, you set your ideal buffer
    size and leave it to Amazon GameLift to take whatever action is needed to maintain that target.  For example,
    you might choose to maintain a 10% buffer for a fleet that has the capacity to host 100 simultaneous game
    sessions. This policy tells Amazon GameLift to take action whenever the fleet's available capacity falls below
    or rises above 10 game sessions. Amazon GameLift will start new instances or stop unused instances in order to
    return to the 10% buffer.  To create or update a target-based policy, specify a fleet ID and name, and set the
    policy type to "TargetBased". Specify the metric to track (PercentAvailableGameSessions) and reference a
    TargetConfiguration object with your desired buffer value. Exclude all other parameters. On a successful
    request, the policy name is returned. The scaling policy is automatically in force as soon as it's successfully
    created. If the fleet's auto-scaling actions are temporarily suspended, the new policy will be in force once the
    fleet actions are restarted.  Rule-based policy  A rule-based policy tracks specified fleet metric, sets a
    threshold value, and specifies the type of action to initiate when triggered. With a rule-based policy, you can
    select from several available fleet metrics. Each policy specifies whether to scale up or scale down (and by how
    much), so you need one policy for each type of action.  For example, a policy may make the following statement:
    "If the percentage of idle instances is greater than 20% for more than 15 minutes, then reduce the fleet
    capacity by 10%." A policy's rule statement has the following structure: If [MetricName] is [ComparisonOperator]
    [Threshold] for [EvaluationPeriods] minutes, then [ScalingAdjustmentType] to/by [ScalingAdjustment]. To
    implement the example, the rule statement would look like this: If [PercentIdleInstances] is
    [GreaterThanThreshold] [20] for [15] minutes, then [PercentChangeInCapacity] to/by [10]. To create or update a
    scaling policy, specify a unique combination of name and fleet ID, and set the policy type to "RuleBased".
    Specify the parameter values for a policy rule statement. On a successful request, the policy name is returned.
    Scaling policies are automatically in force as soon as they're successfully created. If the fleet's auto-scaling
    actions are temporarily suspended, the new policy will be in force once the fleet actions are restarted.
    Related actions   DescribeFleetCapacity | UpdateFleetCapacity | DescribeEC2InstanceLimits | PutScalingPolicy |
    DescribeScalingPolicies | DeleteScalingPolicy | StopFleetActions | StartFleetActions | All APIs by task

    Args:
        name(Text): A descriptive label that is associated with a fleet's scaling policy. Policy names do not need
            to be unique. A fleet can have only one scaling policy with the same name.
        fleet_id(Text): A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or
            ARN value. The fleet cannot be in any of the following statuses: ERROR or DELETING.
        scaling_adjustment(int, optional): Amount of adjustment to make, based on the scaling adjustment type. Defaults to None.
        scaling_adjustment_type(Text, optional): The type of adjustment to make to a fleet's instance count (see FleetCapacity):
            ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance
            count. Positive values scale up while negative values scale down.    ExactCapacity -- set the
            instance count to the scaling adjustment value.    PercentChangeInCapacity -- increase or reduce
            the current instance count by the scaling adjustment, read as a percentage. Positive values
            scale up while negative values scale down; for example, a value of "-10" scales the fleet down
            by 10%. Defaults to None.
        threshold(float, optional): Metric value used to trigger a scaling event. Defaults to None.
        comparison_operator(Text, optional): Comparison operator to use when measuring the metric against the threshold value. Defaults to None.
        evaluation_periods(int, optional): Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event
            is triggered. Defaults to None.
        metric_name(Text): Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For
            detailed descriptions of fleet metrics, see Monitor Amazon GameLift with Amazon CloudWatch.
            ActivatingGameSessions -- Game sessions in the process of being created.    ActiveGameSessions
            -- Game sessions that are currently running.    ActiveInstances -- Fleet instances that are
            currently running at least one game session.    AvailableGameSessions -- Additional game
            sessions that fleet could host simultaneously, given current capacity.
            AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes
            game sessions that are not currently accepting players. Reserved player slots are not included.
            CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or
            are reserved for a player.     IdleInstances -- Active instances that are currently hosting zero
            game sessions.     PercentAvailableGameSessions -- Unused percentage of the total number of game
            sessions that a fleet could host simultaneously, given current capacity. Use this metric for a
            target-based scaling policy.    PercentIdleInstances -- Percentage of the total number of active
            instances that are hosting zero game sessions.    QueueDepth -- Pending game session placement
            requests, in any queue, where the current fleet is the top-priority destination.    WaitTime --
            Current wait time for pending game session placement requests, in any queue, where the current
            fleet is the top-priority destination.
        policy_type(Text, optional): The type of scaling policy to create. For a target-based policy, set the parameter MetricName to
            'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set
            the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods,
            ScalingAdjustmentType, and ScalingAdjustment. Defaults to None.
        target_configuration(Dict, optional): An object that contains settings for a target-based scaling policy. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              aws_auto.gamelift.scaling_policy.present:
                - name: value
                - fleet_id: value
                - metric_name: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.gamelift.scaling_policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    
    before = await hub.exec.boto3.client.gamelift.describe_scaling_policies(name)

    if before:
        result["comment"] = f"'{name}' already exists"
    else:
        try:
            ret = await hub.exec.boto3.client.gamelift.put_scaling_policy(
                ctx,
                
                
                **{"Name": name, "FleetId": fleet_id, "ScalingAdjustment": scaling_adjustment, "ScalingAdjustmentType": scaling_adjustment_type, "Threshold": threshold, "ComparisonOperator": comparison_operator, "EvaluationPeriods": evaluation_periods, "MetricName": metric_name, "PolicyType": policy_type, "TargetConfiguration": target_configuration}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            ret["comment"] = f"Created '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    
    # TODO perform other modifications as needed here
    ...

    after = await hub.exec.boto3.client.gamelift.describe_scaling_policies(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

async def absent(hub, ctx, name: Text, fleet_id: Text)  -> Dict[str, Any]:
    r'''
    **Autogenerated function**
    
    Deletes a fleet scaling policy. Once deleted, the policy is no longer in force and GameLift removes all record
    of it. To delete a scaling policy, specify both the scaling policy name and the fleet ID it is associated with.
    To temporarily suspend scaling policies, call StopFleetActions. This operation suspends all policies for the
    fleet.  Related actions   DescribeFleetCapacity | UpdateFleetCapacity | DescribeEC2InstanceLimits |
    PutScalingPolicy | DescribeScalingPolicies | DeleteScalingPolicy | StopFleetActions | StartFleetActions | All
    APIs by task

    Args:
        name(Text): A descriptive label that is associated with a fleet's scaling policy. Policy names do not need
            to be unique.
        fleet_id(Text): A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              aws_auto.gamelift.scaling_policy.absent:
                - name: value
                - fleet_id: value
    '''
    
    result = dict(comment="", changes= None, name=name, result=True)
    ret = await hub.exec.boto3.client.gamelift.scaling_policy.id(
        ctx,
        jmes_path=name
    )
    if ret["status"]:
        # name is now the first id that matched the JMES search path
        name = ret["ret"]
    

    

    before = await hub.exec.boto3.client.gamelift.describe_scaling_policies(name)

    if not before:
        result["comment"] = f"'{name}' already absent"
    else:
        try:
            ret = await hub.exec.boto3.client.gamelift.delete_scaling_policy(
                ctx,
                
                
                **{"Name": name, "FleetId": fleet_id}
            )
            result["result"] = ret["status"]
            if not result["result"]:
                result["comment"] = ret["comment"]
                return result
            result["comment"] = f"Deleted '{name}'"
        except hub.tool.boto3.exception.ClientError as e:
            result["comment"] = f"{e.__class__.__name__}: {e}"

    

    after = await hub.exec.boto3.client.gamelift.describe_scaling_policies(name)
    result["changes"] = differ.deep_diff(before, after)
    return result

