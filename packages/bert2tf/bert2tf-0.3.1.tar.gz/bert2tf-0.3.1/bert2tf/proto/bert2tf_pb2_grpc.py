# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import bert2tf_pb2 as bert2tf__pb2


class Bert2tfRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.stream_stream(
                '/Bert2tfRPC/Call',
                request_serializer=bert2tf__pb2.Request.SerializeToString,
                response_deserializer=bert2tf__pb2.Request.FromString,
                )
        self.CallUnary = channel.unary_unary(
                '/Bert2tfRPC/CallUnary',
                request_serializer=bert2tf__pb2.Request.SerializeToString,
                response_deserializer=bert2tf__pb2.Request.FromString,
                )


class Bert2tfRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request_iterator, context):
        """Pass in a Request and a filled Request with matches will be returned.
        didn't use this interface, keep it
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallUnary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Bert2tfRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.stream_stream_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=bert2tf__pb2.Request.FromString,
                    response_serializer=bert2tf__pb2.Request.SerializeToString,
            ),
            'CallUnary': grpc.unary_unary_rpc_method_handler(
                    servicer.CallUnary,
                    request_deserializer=bert2tf__pb2.Request.FromString,
                    response_serializer=bert2tf__pb2.Request.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Bert2tfRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bert2tfRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Bert2tfRPC/Call',
            bert2tf__pb2.Request.SerializeToString,
            bert2tf__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bert2tfRPC/CallUnary',
            bert2tf__pb2.Request.SerializeToString,
            bert2tf__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
