Metadata-Version: 2.1
Name: b3q
Version: 0.3.2
Summary: Boto3 utility library that supports parameter-driven and predicate-driven retrieval of collections of AWS resources.
Home-page: https://github.com/nthparty/b3q
Author: Andrei Lapets
Author-email: a@lapets.io
License: MIT
Platform: UNKNOWN
Description-Content-Type: text/x-rst
License-File: LICENSE

===
b3q
===

Boto3 utility library that supports parameter-driven and predicate-driven retrieval of collections of AWS resources.

|pypi| |readthedocs| |actions| |coveralls|

.. |pypi| image:: https://badge.fury.io/py/b3q.svg
   :target: https://badge.fury.io/py/b3q
   :alt: PyPI version and link.

.. |readthedocs| image:: https://readthedocs.org/projects/b3q/badge/?version=latest
   :target: https://b3q.readthedocs.io/en/latest/?badge=latest
   :alt: Read the Docs documentation status.

.. |actions| image:: https://github.com/nthparty/b3q/workflows/lint-test-cover-docs/badge.svg
   :target: https://github.com/nthparty/b3q/actions/workflows/lint-test-cover-docs.yml
   :alt: GitHub Actions status.

.. |coveralls| image:: https://coveralls.io/repos/github/nthparty/b3q/badge.svg?branch=main
   :target: https://coveralls.io/github/nthparty/b3q?branch=main
   :alt: Coveralls test coverage summary.

Purpose
-------
This library makes it possible to use `Boto3 <https://boto3.readthedocs.io>`_ to retrieve a collection of AWS resources (selected according to supplied parameters, constraints, and/or predicates) within an AWS service.

Package Installation and Usage
------------------------------
The package is available on `PyPI <https://pypi.org/project/b3q/>`_::

    python -m pip install b3q

The library can be imported in the usual ways::

    import b3q
    from b3q import *

Examples
^^^^^^^^
The library make it possible to concisely retrieve all instances of an AWS resource (potentially spanning multiple pages of results). The library requires the use of the `Boto3 <https://boto3.readthedocs.io>`_ library to create a client object that can be used to retrieve information about AWS resources. In the example below, an AWS API Gateway client is created::

    >>> import boto3
    >>> client = boto3.client('apigateway')

In the example below, all custom domain name entries are retrieved::

    >>> import b3q
    >>> ns = b3q.get(client.get_domain_names)

The example below illustrates the retrieval of an API with the name ``'example_api'``::

    >>> apis = b3q.get(client.get_rest_apis, constraints={'name': 'example_api'})
    >>> api = apis[0] # Assumes there is one result.

The steps below retrieve all API deployments associated with the specific API retrieved above::

    >>> ds = b3q.get(client.get_deployments, arguments={'restApiId': api['id']})

Documentation
-------------
The documentation can be generated automatically from the source files using `Sphinx <https://www.sphinx-doc.org/>`_::

    cd docs
    python -m pip install -r requirements.txt
    sphinx-apidoc -f -E --templatedir=_templates -o _source .. ../setup.py && make html

Testing and Conventions
-----------------------
All unit tests are executed and their coverage is measured when using `nose <https://nose.readthedocs.io/>`_ (see ``setup.cfg`` for configuration details)::

    python -m pip install nose coverage
    nosetests --cover-erase

Alternatively, all unit tests are included in the module itself and can be executed using `doctest <https://docs.python.org/3/library/doctest.html>`_::

    python b3q/b3q.py -v

Style conventions are enforced using `Pylint <https://www.pylint.org/>`_::

    python -m pip install pylint
    pylint b3q

Contributions
-------------
In order to contribute to the source code, open an issue or submit a pull request on the `GitHub page <https://github.com/nthparty/b3q>`_ for this library.

Versioning
----------
The version number format for this library and the changes to the library associated with version number increments conform with `Semantic Versioning 2.0.0 <https://semver.org/#semantic-versioning-200>`_.


