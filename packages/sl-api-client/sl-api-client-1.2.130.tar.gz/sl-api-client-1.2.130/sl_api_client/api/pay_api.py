# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class PayApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_pay_sberbank_binding_by_bindingid(self, binding_id, **kwargs):  # noqa: E501
        """Деактивация связки  # noqa: E501

        Деактивация связки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pay_sberbank_binding_by_bindingid(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: Идентификатор связки (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pay_sberbank_binding_by_bindingid_with_http_info(binding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pay_sberbank_binding_by_bindingid_with_http_info(binding_id, **kwargs)  # noqa: E501
            return data

    def delete_pay_sberbank_binding_by_bindingid_with_http_info(self, binding_id, **kwargs):  # noqa: E501
        """Деактивация связки  # noqa: E501

        Деактивация связки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pay_sberbank_binding_by_bindingid_with_http_info(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: Идентификатор связки (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['binding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pay_sberbank_binding_by_bindingid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'binding_id' is set
        if ('binding_id' not in params or
                params['binding_id'] is None):
            raise ValueError("Missing the required parameter `binding_id` when calling `delete_pay_sberbank_binding_by_bindingid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'binding_id' in params:
            path_params['bindingId'] = params['binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/sberbank/binding/{bindingId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pay_check(self, **kwargs):  # noqa: E501
        """Проверка доступности оплат  # noqa: E501

        Маршрут на проверку доступности сервиса оплат для определенной компании  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_check(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pay_check_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pay_check_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pay_check_with_http_info(self, **kwargs):  # noqa: E501
        """Проверка доступности оплат  # noqa: E501

        Маршрут на проверку доступности сервиса оплат для определенной компании  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_check_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pay_check" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/check/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pay_sberbank_binding(self, **kwargs):  # noqa: E501
        """Список связок  # noqa: E501

        Список связок текущего клиента  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_sberbank_binding(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PayBinding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pay_sberbank_binding_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pay_sberbank_binding_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pay_sberbank_binding_with_http_info(self, **kwargs):  # noqa: E501
        """Список связок  # noqa: E501

        Список связок текущего клиента  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_sberbank_binding_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PayBinding]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pay_sberbank_binding" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/sberbank/binding/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PayBinding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pay_sberbank_payment_by_paymentid(self, payment_id, **kwargs):  # noqa: E501
        """Cтатуса платежа  # noqa: E501

        Запрос статуса платежа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_sberbank_payment_by_paymentid(payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Идентификатор платежа (required)
        :return: PaymentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pay_sberbank_payment_by_paymentid_with_http_info(payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pay_sberbank_payment_by_paymentid_with_http_info(payment_id, **kwargs)  # noqa: E501
            return data

    def get_pay_sberbank_payment_by_paymentid_with_http_info(self, payment_id, **kwargs):  # noqa: E501
        """Cтатуса платежа  # noqa: E501

        Запрос статуса платежа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_sberbank_payment_by_paymentid_with_http_info(payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: Идентификатор платежа (required)
        :return: PaymentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pay_sberbank_payment_by_paymentid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_pay_sberbank_payment_by_paymentid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/sberbank/payment/{paymentId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pay_sberbank_register(self, body, **kwargs):  # noqa: E501
        """Регистрация заказа  # noqa: E501

        Запрос регистрации заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayRegisterSberbankRequest body: (required)
        :return: PayRegisterSberbankResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pay_sberbank_register_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pay_sberbank_register_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_pay_sberbank_register_with_http_info(self, body, **kwargs):  # noqa: E501
        """Регистрация заказа  # noqa: E501

        Запрос регистрации заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayRegisterSberbankRequest body: (required)
        :return: PayRegisterSberbankResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pay_sberbank_register" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_pay_sberbank_register`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/sberbank/register/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayRegisterSberbankResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pay_sberbank_register_apple(self, body, **kwargs):  # noqa: E501
        """Регистрация платежа Apple Pay  # noqa: E501

        Запрос регистрации платежа Apple Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register_apple(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplePayRegisterRequest body: (required)
        :return: PaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pay_sberbank_register_apple_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pay_sberbank_register_apple_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_pay_sberbank_register_apple_with_http_info(self, body, **kwargs):  # noqa: E501
        """Регистрация платежа Apple Pay  # noqa: E501

        Запрос регистрации платежа Apple Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register_apple_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplePayRegisterRequest body: (required)
        :return: PaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pay_sberbank_register_apple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_pay_sberbank_register_apple`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/sberbank/register/apple/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pay_sberbank_register_google(self, body, **kwargs):  # noqa: E501
        """Регистрация платежа Google Pay  # noqa: E501

        Запрос регистрации платежа Google Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register_google(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GooglePayRegisterRequest body: (required)
        :return: PaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pay_sberbank_register_google_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pay_sberbank_register_google_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_pay_sberbank_register_google_with_http_info(self, body, **kwargs):  # noqa: E501
        """Регистрация платежа Google Pay  # noqa: E501

        Запрос регистрации платежа Google Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register_google_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GooglePayRegisterRequest body: (required)
        :return: PaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pay_sberbank_register_google" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_pay_sberbank_register_google`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/sberbank/register/google/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pay_sberbank_register_samsung(self, body, **kwargs):  # noqa: E501
        """Регистрация платежа Samsung Pay  # noqa: E501

        Запрос регистрации платежа Samsung Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register_samsung(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SamsungPayRegisterRequest body: (required)
        :return: PaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pay_sberbank_register_samsung_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pay_sberbank_register_samsung_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_pay_sberbank_register_samsung_with_http_info(self, body, **kwargs):  # noqa: E501
        """Регистрация платежа Samsung Pay  # noqa: E501

        Запрос регистрации платежа Samsung Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pay_sberbank_register_samsung_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SamsungPayRegisterRequest body: (required)
        :return: PaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pay_sberbank_register_samsung" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_pay_sberbank_register_samsung`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pay/sberbank/register/samsung/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
