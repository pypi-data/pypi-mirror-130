# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class InfosystemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_static_infosystems_by_infosystemid(self, infosystem_id, **kwargs):  # noqa: E501
        """Удаление инфосистемы  # noqa: E501

        Удаление информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_infosystems_by_infosystemid(infosystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_infosystems_by_infosystemid_with_http_info(infosystem_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_infosystems_by_infosystemid_with_http_info(infosystem_id, **kwargs)  # noqa: E501
            return data

    def delete_static_infosystems_by_infosystemid_with_http_info(self, infosystem_id, **kwargs):  # noqa: E501
        """Удаление инфосистемы  # noqa: E501

        Удаление информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_infosystems_by_infosystemid_with_http_info(infosystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_infosystems_by_infosystemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `delete_static_infosystems_by_infosystemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_static_infosystems_by_infosystemid_items_by_itemid(self, infosystem_id, item_id, **kwargs):  # noqa: E501
        """Удаление элемента информационной системы  # noqa: E501

        Удаление элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_infosystems_by_infosystemid_items_by_itemid(infosystem_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str item_id: Идентификатор элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, **kwargs)  # noqa: E501
            return data

    def delete_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(self, infosystem_id, item_id, **kwargs):  # noqa: E501
        """Удаление элемента информационной системы  # noqa: E501

        Удаление элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str item_id: Идентификатор элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_infosystems_by_infosystemid_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `delete_static_infosystems_by_infosystemid_items_by_itemid`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_static_infosystems_by_infosystemid_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/items/{itemId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_static_infosystems_by_infosystemid_properties_by_propertykey(self, infosystem_id, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_infosystems_by_infosystemid_properties_by_propertykey(infosystem_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, **kwargs)  # noqa: E501
            return data

    def delete_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(self, infosystem_id, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_infosystems_by_infosystemid_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `delete_static_infosystems_by_infosystemid_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_static_infosystems_by_infosystemid_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/properties/{propertyKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_infosystembyname_by_infosystemname(self, infosystem_name, **kwargs):  # noqa: E501
        """Запрос информации об инфосистеме  # noqa: E501

        Запрос информации об инфосистеме  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystembyname_by_infosystemname(infosystem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_name: Название инфосистемы (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_infosystembyname_by_infosystemname_with_http_info(infosystem_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_infosystembyname_by_infosystemname_with_http_info(infosystem_name, **kwargs)  # noqa: E501
            return data

    def get_static_infosystembyname_by_infosystemname_with_http_info(self, infosystem_name, **kwargs):  # noqa: E501
        """Запрос информации об инфосистеме  # noqa: E501

        Запрос информации об инфосистеме  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystembyname_by_infosystemname_with_http_info(infosystem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_name: Название инфосистемы (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_infosystembyname_by_infosystemname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_name' is set
        if ('infosystem_name' not in params or
                params['infosystem_name'] is None):
            raise ValueError("Missing the required parameter `infosystem_name` when calling `get_static_infosystembyname_by_infosystemname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_name' in params:
            path_params['infosystemName'] = params['infosystem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystemByName/{infosystemName}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Infosystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_infosystems(self, **kwargs):  # noqa: E501
        """Запрос списка информационных систем  # noqa: E501

        Запрос списка информационных систем  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Infosystem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_infosystems_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_static_infosystems_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_static_infosystems_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка информационных систем  # noqa: E501

        Запрос списка информационных систем  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Infosystem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_infosystems" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Infosystem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_infosystems_by_infosystemid(self, infosystem_id, **kwargs):  # noqa: E501
        """Запрос информаци об информационной системе  # noqa: E501

        Запрос информации об информационной системе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid(infosystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_infosystems_by_infosystemid_with_http_info(infosystem_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_infosystems_by_infosystemid_with_http_info(infosystem_id, **kwargs)  # noqa: E501
            return data

    def get_static_infosystems_by_infosystemid_with_http_info(self, infosystem_id, **kwargs):  # noqa: E501
        """Запрос информаци об информационной системе  # noqa: E501

        Запрос информации об информационной системе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid_with_http_info(infosystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_infosystems_by_infosystemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `get_static_infosystems_by_infosystemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Infosystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_infosystems_by_infosystemid_items_by_itemid(self, infosystem_id, item_id, **kwargs):  # noqa: E501
        """Запрос элемента информационной системы  # noqa: E501

        Запрос элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid_items_by_itemid(infosystem_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str item_id: Идентификатор элемента (required)
        :return: InfoItemWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, **kwargs)  # noqa: E501
            return data

    def get_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(self, infosystem_id, item_id, **kwargs):  # noqa: E501
        """Запрос элемента информационной системы  # noqa: E501

        Запрос элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str item_id: Идентификатор элемента (required)
        :return: InfoItemWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_infosystems_by_infosystemid_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `get_static_infosystems_by_infosystemid_items_by_itemid`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_static_infosystems_by_infosystemid_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/items/{itemId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InfoItemWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_infosystems_by_infosystemid_properties(self, infosystem_id, **kwargs):  # noqa: E501
        """Запрос списка свойств информационных элементов  # noqa: E501

        Запрос списка свойств информационных элементов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid_properties(infosystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_infosystems_by_infosystemid_properties_with_http_info(infosystem_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_infosystems_by_infosystemid_properties_with_http_info(infosystem_id, **kwargs)  # noqa: E501
            return data

    def get_static_infosystems_by_infosystemid_properties_with_http_info(self, infosystem_id, **kwargs):  # noqa: E501
        """Запрос списка свойств информационных элементов  # noqa: E501

        Запрос списка свойств информационных элементов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid_properties_with_http_info(infosystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_infosystems_by_infosystemid_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `get_static_infosystems_by_infosystemid_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/properties/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_infosystems_by_infosystemid_properties_by_propertykey(self, infosystem_id, property_key, **kwargs):  # noqa: E501
        """Запрос свойства  # noqa: E501

        Запрос свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid_properties_by_propertykey(infosystem_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, **kwargs)  # noqa: E501
            return data

    def get_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(self, infosystem_id, property_key, **kwargs):  # noqa: E501
        """Запрос свойства  # noqa: E501

        Запрос свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_infosystems_by_infosystemid_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `get_static_infosystems_by_infosystemid_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_static_infosystems_by_infosystemid_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/properties/{propertyKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystembyname_by_infosystemname_request(self, infosystem_name, body, **kwargs):  # noqa: E501
        """Поиск по элементам инфосистем  # noqa: E501

        Поиск по элементам инфосистем. Минимальное количество символов в тексте для поиска: 3.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystembyname_by_infosystemname_request(infosystem_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_name: Название инфосистемы (required)
        :param SearchRequest body:  (required)
        :return: InfoItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystembyname_by_infosystemname_request_with_http_info(infosystem_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystembyname_by_infosystemname_request_with_http_info(infosystem_name, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystembyname_by_infosystemname_request_with_http_info(self, infosystem_name, body, **kwargs):  # noqa: E501
        """Поиск по элементам инфосистем  # noqa: E501

        Поиск по элементам инфосистем. Минимальное количество символов в тексте для поиска: 3.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystembyname_by_infosystemname_request_with_http_info(infosystem_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_name: Название инфосистемы (required)
        :param SearchRequest body:  (required)
        :return: InfoItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystembyname_by_infosystemname_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_name' is set
        if ('infosystem_name' not in params or
                params['infosystem_name'] is None):
            raise ValueError("Missing the required parameter `infosystem_name` when calling `post_static_infosystembyname_by_infosystemname_request`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystembyname_by_infosystemname_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_name' in params:
            path_params['infosystemName'] = params['infosystem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystemByName/{infosystemName}/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InfoItemsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems(self, body, **kwargs):  # noqa: E501
        """Создание информационной системы  # noqa: E501

        Создание информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Infosystem body: (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание информационной системы  # noqa: E501

        Создание информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Infosystem body: (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Infosystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Обновление информационной системы  # noqa: E501

        Обновление информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param Infosystem body:  (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_with_http_info(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Обновление информационной системы  # noqa: E501

        Обновление информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_with_http_info(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param Infosystem body:  (required)
        :return: Infosystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Infosystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid_items(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Создание элемента информационной системы  # noqa: E501

        Создание элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_items(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param InfoItemWithRelations body:  (required)
        :return: InfoItemWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_items_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_items_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_items_with_http_info(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Создание элемента информационной системы  # noqa: E501

        Создание элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_items_with_http_info(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param InfoItemWithRelations body:  (required)
        :return: InfoItemWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid_items`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InfoItemWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid_items_by_itemid(self, infosystem_id, item_id, body, **kwargs):  # noqa: E501
        """Обновление элемента информационной системы  # noqa: E501

        Обновление элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_items_by_itemid(infosystem_id, item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str item_id: Идентификатор элемента (required)
        :param InfoItemWithRelations body:  (required)
        :return: InfoItemWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(self, infosystem_id, item_id, body, **kwargs):  # noqa: E501
        """Обновление элемента информационной системы  # noqa: E501

        Обновление элемента информационной системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_items_by_itemid_with_http_info(infosystem_id, item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str item_id: Идентификатор элемента (required)
        :param InfoItemWithRelations body:  (required)
        :return: InfoItemWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid_items_by_itemid`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_static_infosystems_by_infosystemid_items_by_itemid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/items/{itemId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InfoItemWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid_properties(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Создание свойства  # noqa: E501

        Создание свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_properties(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_properties_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_properties_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_properties_with_http_info(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Создание свойства  # noqa: E501

        Создание свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_properties_with_http_info(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid_properties`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/properties/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid_properties_by_propertykey(self, infosystem_id, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_properties_by_propertykey(infosystem_id, property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(self, infosystem_id, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_properties_by_propertykey_with_http_info(infosystem_id, property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'property_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `post_static_infosystems_by_infosystemid_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/properties/{propertyKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid_query(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Запрос списка элементов  # noqa: E501

        Запрос списка элементов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_query(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param InfosystemQuery body: (required)
        :return: list[InfoItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_query_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_query_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_query_with_http_info(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Запрос списка элементов  # noqa: E501

        Запрос списка элементов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_query_with_http_info(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param InfosystemQuery body: (required)
        :return: list[InfoItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid_query`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/query/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InfoItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid_querywithrelations(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Запрос списка элементов  # noqa: E501

        Запрос списка элементов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_querywithrelations(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param InfosystemQuery body: (required)
        :return: list[InfoItemWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_querywithrelations_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_querywithrelations_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_querywithrelations_with_http_info(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Запрос списка элементов  # noqa: E501

        Запрос списка элементов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_querywithrelations_with_http_info(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param InfosystemQuery body: (required)
        :return: list[InfoItemWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid_querywithrelations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid_querywithrelations`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid_querywithrelations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/queryWithRelations/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InfoItemWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_infosystems_by_infosystemid_request(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Поиск по элементам инфосистем  # noqa: E501

        Поиск по элементам инфосистем. Минимальное количество символов в тексте для поиска: 3.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_request(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param SearchRequest body:  (required)
        :return: InfoItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_infosystems_by_infosystemid_request_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_infosystems_by_infosystemid_request_with_http_info(infosystem_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_infosystems_by_infosystemid_request_with_http_info(self, infosystem_id, body, **kwargs):  # noqa: E501
        """Поиск по элементам инфосистем  # noqa: E501

        Поиск по элементам инфосистем. Минимальное количество символов в тексте для поиска: 3.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_infosystems_by_infosystemid_request_with_http_info(infosystem_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str infosystem_id: Идентификатор информационной системы (required)
        :param SearchRequest body:  (required)
        :return: InfoItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['infosystem_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_infosystems_by_infosystemid_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'infosystem_id' is set
        if ('infosystem_id' not in params or
                params['infosystem_id'] is None):
            raise ValueError("Missing the required parameter `infosystem_id` when calling `post_static_infosystems_by_infosystemid_request`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_infosystems_by_infosystemid_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'infosystem_id' in params:
            path_params['infosystemId'] = params['infosystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/infosystems/{infosystemId}/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InfoItemsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
