# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class DiscountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_dc_binding(self, **kwargs):  # noqa: E501
        """Запрос отвязки привязанной карты  # noqa: E501

        Запрос отвязки привязанной карты к текущему x-uid запроса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dc_binding(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dc_binding_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_dc_binding_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_dc_binding_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос отвязки привязанной карты  # noqa: E501

        Запрос отвязки привязанной карты к текущему x-uid запроса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dc_binding_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dc_binding" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/binding/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dc_card_by_cardnumber(self, card_number, **kwargs):  # noqa: E501
        """Удаление информации по карте  # noqa: E501

        Удаление информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dc_card_by_cardnumber(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dc_card_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dc_card_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
            return data

    def delete_dc_card_by_cardnumber_with_http_info(self, card_number, **kwargs):  # noqa: E501
        """Удаление информации по карте  # noqa: E501

        Удаление информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dc_card_by_cardnumber_with_http_info(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dc_card_by_cardnumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_number' is set
        if ('card_number' not in params or
                params['card_number'] is None):
            raise ValueError("Missing the required parameter `card_number` when calling `delete_dc_card_by_cardnumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_number' in params:
            path_params['cardNumber'] = params['card_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/card/{cardNumber}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dc_binding(self, **kwargs):  # noqa: E501
        """Запрос привязанной карты  # noqa: E501

        Запрос привязанной карты к текущему x-uid запроса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_binding(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dc_binding_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dc_binding_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dc_binding_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос привязанной карты  # noqa: E501

        Запрос привязанной карты к текущему x-uid запроса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_binding_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dc_binding" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/binding/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DcCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dc_binding_by_cardnumber(self, card_number, **kwargs):  # noqa: E501
        """Запрос информации покарте (безопасный)  # noqa: E501

        Запрос информации покарте с ограниченым выводом  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_binding_by_cardnumber(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :return: DcCardMask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dc_binding_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dc_binding_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
            return data

    def get_dc_binding_by_cardnumber_with_http_info(self, card_number, **kwargs):  # noqa: E501
        """Запрос информации покарте (безопасный)  # noqa: E501

        Запрос информации покарте с ограниченым выводом  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_binding_by_cardnumber_with_http_info(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :return: DcCardMask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dc_binding_by_cardnumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_number' is set
        if ('card_number' not in params or
                params['card_number'] is None):
            raise ValueError("Missing the required parameter `card_number` when calling `get_dc_binding_by_cardnumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_number' in params:
            path_params['cardNumber'] = params['card_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/binding/{cardNumber}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DcCardMask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dc_card(self, **kwargs):  # noqa: E501
        """Запрос списка карта  # noqa: E501

        Запрос списка карта  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_card(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение от начала выборки
        :return: list[DcCard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dc_card_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dc_card_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dc_card_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка карта  # noqa: E501

        Запрос списка карта  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_card_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение от начала выборки
        :return: list[DcCard]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dc_card" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/card/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DcCard]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dc_card_by_cardnumber(self, card_number, **kwargs):  # noqa: E501
        """Запрос информации по карте  # noqa: E501

        Запрос информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_card_by_cardnumber(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dc_card_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dc_card_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
            return data

    def get_dc_card_by_cardnumber_with_http_info(self, card_number, **kwargs):  # noqa: E501
        """Запрос информации по карте  # noqa: E501

        Запрос информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dc_card_by_cardnumber_with_http_info(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dc_card_by_cardnumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_number' is set
        if ('card_number' not in params or
                params['card_number'] is None):
            raise ValueError("Missing the required parameter `card_number` when calling `get_dc_card_by_cardnumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_number' in params:
            path_params['cardNumber'] = params['card_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/card/{cardNumber}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DcCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_binding_confirmation(self, body, **kwargs):  # noqa: E501
        """Подтверждение привязки по номеру карты  # noqa: E501

        Подтверждение привязки карты к пользователю x-uid по номеру карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_confirmation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcCardConfirmation body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_binding_confirmation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_binding_confirmation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dc_binding_confirmation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Подтверждение привязки по номеру карты  # noqa: E501

        Подтверждение привязки карты к пользователю x-uid по номеру карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_confirmation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcCardConfirmation body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_binding_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_binding_confirmation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/binding/confirmation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_binding_phone_confirmation(self, body, **kwargs):  # noqa: E501
        """Подтверждение привязки по номеру телефона  # noqa: E501

        Подтверждение привязки карты к пользователю x-uid по номеру телефона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_phone_confirmation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcCardByPhoneConfirmation body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_binding_phone_confirmation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_binding_phone_confirmation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dc_binding_phone_confirmation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Подтверждение привязки по номеру телефона  # noqa: E501

        Подтверждение привязки карты к пользователю x-uid по номеру телефона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_phone_confirmation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcCardByPhoneConfirmation body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_binding_phone_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_binding_phone_confirmation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/binding/phone/confirmation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_binding_phone_request(self, body, **kwargs):  # noqa: E501
        """Запрос кода подтверждения по номеру телефона  # noqa: E501

        Запрос кода подтверждения для привязки карты по номеру телефона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_phone_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcBindingByPhoneRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_binding_phone_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_binding_phone_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dc_binding_phone_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос кода подтверждения по номеру телефона  # noqa: E501

        Запрос кода подтверждения для привязки карты по номеру телефона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_phone_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcBindingByPhoneRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_binding_phone_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_binding_phone_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/binding/phone/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_binding_request(self, body, **kwargs):  # noqa: E501
        """Запрос кода подтверждения по номеру карты  # noqa: E501

        Запрос кода подтверждения для привязки по номеру карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcBindingRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_binding_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_binding_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dc_binding_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос кода подтверждения по номеру карты  # noqa: E501

        Запрос кода подтверждения для привязки по номеру карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_binding_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcBindingRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_binding_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_binding_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/binding/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_card(self, body, **kwargs):  # noqa: E501
        """Создание информации по карте  # noqa: E501

        Создание информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcCard body: (required)
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_card_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_card_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dc_card_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание информации по карте  # noqa: E501

        Создание информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcCard body: (required)
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/card/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DcCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_card_by_cardnumber(self, card_number, body, **kwargs):  # noqa: E501
        """Обновление информации по карте  # noqa: E501

        Обновление информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card_by_cardnumber(card_number, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :param DcCard body: (required)
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_card_by_cardnumber_with_http_info(card_number, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_card_by_cardnumber_with_http_info(card_number, body, **kwargs)  # noqa: E501
            return data

    def post_dc_card_by_cardnumber_with_http_info(self, card_number, body, **kwargs):  # noqa: E501
        """Обновление информации по карте  # noqa: E501

        Обновление информации по карте  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card_by_cardnumber_with_http_info(card_number, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :param DcCard body: (required)
        :return: DcCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_number', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_card_by_cardnumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_number' is set
        if ('card_number' not in params or
                params['card_number'] is None):
            raise ValueError("Missing the required parameter `card_number` when calling `post_dc_card_by_cardnumber`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_card_by_cardnumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_number' in params:
            path_params['cardNumber'] = params['card_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/card/{cardNumber}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DcCard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_card_import(self, body, **kwargs):  # noqa: E501
        """Массовый импорт карт  # noqa: E501

        Массовый импорт карт  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card_import(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DcCard] body: (required)
        :return: DcCardImportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_card_import_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_card_import_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dc_card_import_with_http_info(self, body, **kwargs):  # noqa: E501
        """Массовый импорт карт  # noqa: E501

        Массовый импорт карт  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card_import_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DcCard] body: (required)
        :return: DcCardImportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_card_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_card_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/card/import/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DcCardImportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dc_card_search(self, body, **kwargs):  # noqa: E501
        """Простая агрегация  # noqa: E501

        Простая агрегация по привязанным картам. Нужна для сервиса Millstream Pusher, работает крайне медленно, но это пока не критично.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcAggregationReq body: (required)
        :return: DcAggregationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dc_card_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dc_card_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dc_card_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """Простая агрегация  # noqa: E501

        Простая агрегация по привязанным картам. Нужна для сервиса Millstream Pusher, работает крайне медленно, но это пока не критично.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dc_card_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DcAggregationReq body: (required)
        :return: DcAggregationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dc_card_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dc_card_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dc/card/search/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DcAggregationResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
