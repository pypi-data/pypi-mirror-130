# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class OrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_dynamic_order_by_orderid(self, order_id, **kwargs):  # noqa: E501
        """Удаление заказа  # noqa: E501

        Удаление заказа по идентификатору. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_order_by_orderid(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dynamic_order_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dynamic_order_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def delete_dynamic_order_by_orderid_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Удаление заказа  # noqa: E501

        Удаление заказа по идентификатору. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_order_by_orderid_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dynamic_order_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `delete_dynamic_order_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/{orderId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dynamic_order_by_orderid_items_by_orderitemid(self, order_id, order_item_id, **kwargs):  # noqa: E501
        """Удаление позиции из заказа  # noqa: E501

        Удалить позицию из заказа. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_order_by_orderid_items_by_orderitemid(order_id, order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str order_item_id: Идентификатор позиции заказа (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(order_id, order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(order_id, order_item_id, **kwargs)  # noqa: E501
            return data

    def delete_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(self, order_id, order_item_id, **kwargs):  # noqa: E501
        """Удаление позиции из заказа  # noqa: E501

        Удалить позицию из заказа. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(order_id, order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str order_item_id: Идентификатор позиции заказа (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dynamic_order_by_orderid_items_by_orderitemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `delete_dynamic_order_by_orderid_items_by_orderitemid`")  # noqa: E501
        # verify the required parameter 'order_item_id' is set
        if ('order_item_id' not in params or
                params['order_item_id'] is None):
            raise ValueError("Missing the required parameter `order_item_id` when calling `delete_dynamic_order_by_orderid_items_by_orderitemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501
        if 'order_item_id' in params:
            path_params['orderItemId'] = params['order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/{orderId}/items/{orderItemId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dynamic_order_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление свойства товара из системы по идентификатору товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_order_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dynamic_order_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dynamic_order_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def delete_dynamic_order_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление свойства товара из системы по идентификатору товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_order_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dynamic_order_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_dynamic_order_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/properties/{propertyKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_order_by_orderid(self, order_id, **kwargs):  # noqa: E501
        """Запрос информации о заказе  # noqa: E501

        Запрос информации о заказе. Используется только **для модераторов и сервисных пользователей**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_by_orderid(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_order_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_order_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def get_dynamic_order_by_orderid_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Запрос информации о заказе  # noqa: E501

        Запрос информации о заказе. Используется только **для модераторов и сервисных пользователей**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_by_orderid_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_order_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `get_dynamic_order_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/{orderId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_order_number_by_ordernumber(self, order_number, **kwargs):  # noqa: E501
        """Запрос информации о заказе по номеру заказа  # noqa: E501

        Запрос информации о заказе по его ID. Используется только **для модераторов и сервисных пользователей**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_number_by_ordernumber(order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_number: Номер заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_order_number_by_ordernumber_with_http_info(order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_order_number_by_ordernumber_with_http_info(order_number, **kwargs)  # noqa: E501
            return data

    def get_dynamic_order_number_by_ordernumber_with_http_info(self, order_number, **kwargs):  # noqa: E501
        """Запрос информации о заказе по номеру заказа  # noqa: E501

        Запрос информации о заказе по его ID. Используется только **для модераторов и сервисных пользователей**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_number_by_ordernumber_with_http_info(order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_number: Номер заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_order_number_by_ordernumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `get_dynamic_order_number_by_ordernumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_number' in params:
            path_params['orderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/number/{orderNumber}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_order_properties(self, **kwargs):  # noqa: E501
        """Запрос списка свойств  # noqa: E501

        Запрос списка свойств товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_order_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_order_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dynamic_order_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка свойств  # noqa: E501

        Запрос списка свойств товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_order_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/properties/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_order_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства  # noqa: E501

        Запрос свойства определенного товара по идентификатору  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_order_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_order_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def get_dynamic_order_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства  # noqa: E501

        Запрос свойства определенного товара по идентификатору  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_order_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_order_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_dynamic_order_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/properties/{propertyKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_orderuser_by_userid(self, user_id, **kwargs):  # noqa: E501
        """Запрос списка заказов пользователя  # noqa: E501

        Вывод всего списка заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_orderuser_by_userid(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: list[OrderWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_orderuser_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_orderuser_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_dynamic_orderuser_by_userid_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Запрос списка заказов пользователя  # noqa: E501

        Вывод всего списка заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_orderuser_by_userid_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: list[OrderWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_orderuser_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_dynamic_orderuser_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/orderUser/{userId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_orderuser_by_userid_by_orderid(self, order_id, user_id, **kwargs):  # noqa: E501
        """Запрос информации о заказе  # noqa: E501

        Запрос информации о заказе пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_orderuser_by_userid_by_orderid(order_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str user_id: Идентификатор пользователя (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_orderuser_by_userid_by_orderid_with_http_info(order_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_orderuser_by_userid_by_orderid_with_http_info(order_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_dynamic_orderuser_by_userid_by_orderid_with_http_info(self, order_id, user_id, **kwargs):  # noqa: E501
        """Запрос информации о заказе  # noqa: E501

        Запрос информации о заказе пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_orderuser_by_userid_by_orderid_with_http_info(order_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str user_id: Идентификатор пользователя (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_orderuser_by_userid_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `get_dynamic_orderuser_by_userid_by_orderid`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_dynamic_orderuser_by_userid_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/orderUser/{userId}/{orderId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_bulk(self, body, **kwargs):  # noqa: E501
        """Массовая вставка заказов  # noqa: E501

        Массовая вставка заказов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_bulk(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[OrderWithRelations] body: (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_bulk_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_bulk_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_bulk_with_http_info(self, body, **kwargs):  # noqa: E501
        """Массовая вставка заказов  # noqa: E501

        Массовая вставка заказов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_bulk_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[OrderWithRelations] body: (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/bulk/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_by_orderid(self, order_id, body, **kwargs):  # noqa: E501
        """Обновление информации о заказе  # noqa: E501

        Обновление информации о заказе. Используется только **для модераторов и сервисных пользователей**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_by_orderid(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param OrderWithRelations body: Объект обновляемого заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_by_orderid_with_http_info(order_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_by_orderid_with_http_info(order_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_by_orderid_with_http_info(self, order_id, body, **kwargs):  # noqa: E501
        """Обновление информации о заказе  # noqa: E501

        Обновление информации о заказе. Используется только **для модераторов и сервисных пользователей**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_by_orderid_with_http_info(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param OrderWithRelations body: Объект обновляемого заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `post_dynamic_order_by_orderid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/{orderId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_by_orderid_items(self, order_id, body, **kwargs):  # noqa: E501
        """Добавление товара в заказ  # noqa: E501

        Добавление товара в заказ. Если таковой заказ уже имеется в корзине (совпадение по catalogItemId), то увеличивается quantity на соответствующее число и возвращается ранее существующий обновленный orderItem. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_by_orderid_items(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param OrderItem body: (required)
        :return: OrderItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_by_orderid_items_with_http_info(order_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_by_orderid_items_with_http_info(order_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_by_orderid_items_with_http_info(self, order_id, body, **kwargs):  # noqa: E501
        """Добавление товара в заказ  # noqa: E501

        Добавление товара в заказ. Если таковой заказ уже имеется в корзине (совпадение по catalogItemId), то увеличивается quantity на соответствующее число и возвращается ранее существующий обновленный orderItem. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_by_orderid_items_with_http_info(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param OrderItem body: (required)
        :return: OrderItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_by_orderid_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `post_dynamic_order_by_orderid_items`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_by_orderid_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/{orderId}/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_by_orderid_items_by_orderitemid(self, order_id, order_item_id, body, **kwargs):  # noqa: E501
        """Обновление позиции в заказе  # noqa: E501

        Обновление записи о позиции в заказе. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_by_orderid_items_by_orderitemid(order_id, order_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param OrderItem body: (required)
        :return: OrderItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(order_id, order_item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(order_id, order_item_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(self, order_id, order_item_id, body, **kwargs):  # noqa: E501
        """Обновление позиции в заказе  # noqa: E501

        Обновление записи о позиции в заказе. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_by_orderid_items_by_orderitemid_with_http_info(order_id, order_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param OrderItem body: (required)
        :return: OrderItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'order_item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_by_orderid_items_by_orderitemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `post_dynamic_order_by_orderid_items_by_orderitemid`")  # noqa: E501
        # verify the required parameter 'order_item_id' is set
        if ('order_item_id' not in params or
                params['order_item_id'] is None):
            raise ValueError("Missing the required parameter `order_item_id` when calling `post_dynamic_order_by_orderid_items_by_orderitemid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_by_orderid_items_by_orderitemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501
        if 'order_item_id' in params:
            path_params['orderItemId'] = params['order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/{orderId}/items/{orderItemId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_export(self, body, **kwargs):  # noqa: E501
        """Запрос заказов по фильтру  # noqa: E501

        Выгрузка заказов по фильтру  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_export(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderExport body: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_export_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_export_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_export_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос заказов по фильтру  # noqa: E501

        Выгрузка заказов по фильтру  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_export_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderExport body: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/export/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_properties(self, body, **kwargs):  # noqa: E501
        """Создание свойства  # noqa: E501

        Добавление в систему нового свойства для определенного товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_properties(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_properties_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_properties_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_properties_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание свойства  # noqa: E501

        Добавление в систему нового свойства для определенного товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_properties_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/properties/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_properties_by_propertykey(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление уже существующего свойства товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_properties_by_propertykey(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_properties_by_propertykey_with_http_info(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление уже существующего свойства товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_properties_by_propertykey_with_http_info(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `post_dynamic_order_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/properties/{propertyKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_request(self, body, **kwargs):  # noqa: E501
        """Поиск (QueryDSL) с агрегацией собираемых данных  # noqa: E501

        Поиск (QueryDSL) с агрегацией собираемых данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Поиск (QueryDSL) с агрегацией собираемых данных  # noqa: E501

        Поиск (QueryDSL) с агрегацией собираемых данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_order_status(self, body, **kwargs):  # noqa: E501
        """Обновление статусов заказов  # noqa: E501

        Обновление статусов заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_status(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[OrderStatus] body: Массив обновляемых заказов (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_order_status_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_order_status_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_order_status_with_http_info(self, body, **kwargs):  # noqa: E501
        """Обновление статусов заказов  # noqa: E501

        Обновление статусов заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_order_status_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[OrderStatus] body: Массив обновляемых заказов (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_order_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_order_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/order/status/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_orderquery(self, body, **kwargs):  # noqa: E501
        """Запрос списка заказов  # noqa: E501

        Упрощенный запрос списка заказов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderquery(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderQuery body: (required)
        :return: list[OrderWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_orderquery_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_orderquery_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_orderquery_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос списка заказов  # noqa: E501

        Упрощенный запрос списка заказов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderquery_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderQuery body: (required)
        :return: list[OrderWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_orderquery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_orderquery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/orderQuery/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_orderuser_by_userid(self, user_id, body, **kwargs):  # noqa: E501
        """Создание нового заказа  # noqa: E501

        Добавление нового заказа в корзину пользователя. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderuser_by_userid(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param OrderWithRelations body: (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_orderuser_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_orderuser_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_orderuser_by_userid_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """Создание нового заказа  # noqa: E501

        Добавление нового заказа в корзину пользователя. Используется только для модераторов и сервисных пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderuser_by_userid_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param OrderWithRelations body: (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_orderuser_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_dynamic_orderuser_by_userid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_orderuser_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/orderUser/{userId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_orderuser_by_userid_by_orderid(self, order_id, user_id, body, **kwargs):  # noqa: E501
        """Обновление информации о заказе  # noqa: E501

        **Для использования в клиенте.** Обновление информации о заказе. Генерирует событие \"orders.status_changed\" при успешном обновлении статуса. Поле \"items\" разрешено менять для заказов в статусе \"cart\" (товары **перезаписываются**, а НЕ обновляются). Разрешенные смены статусов   * c \"cart\" на \"create\" или \"cancelled\"   * с \"create\" на \"cancelled\"   * с \"confirmed\" на \"cancelled\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderuser_by_userid_by_orderid(order_id, user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str user_id: Идентификатор пользователя (required)
        :param OrderWithRelations body: Объект обновляемого заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_orderuser_by_userid_by_orderid_with_http_info(order_id, user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_orderuser_by_userid_by_orderid_with_http_info(order_id, user_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_orderuser_by_userid_by_orderid_with_http_info(self, order_id, user_id, body, **kwargs):  # noqa: E501
        """Обновление информации о заказе  # noqa: E501

        **Для использования в клиенте.** Обновление информации о заказе. Генерирует событие \"orders.status_changed\" при успешном обновлении статуса. Поле \"items\" разрешено менять для заказов в статусе \"cart\" (товары **перезаписываются**, а НЕ обновляются). Разрешенные смены статусов   * c \"cart\" на \"create\" или \"cancelled\"   * с \"create\" на \"cancelled\"   * с \"confirmed\" на \"cancelled\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderuser_by_userid_by_orderid_with_http_info(order_id, user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param str user_id: Идентификатор пользователя (required)
        :param OrderWithRelations body: Объект обновляемого заказа (required)
        :return: OrderWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_orderuser_by_userid_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `post_dynamic_orderuser_by_userid_by_orderid`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_dynamic_orderuser_by_userid_by_orderid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_orderuser_by_userid_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/orderUser/{userId}/{orderId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_orderuser_by_userid_request(self, user_id, body, **kwargs):  # noqa: E501
        """Поиск (QueryDSL) с агрегацией собираемых данных по пользовательским заказам  # noqa: E501

        Поиск (QueryDSL) с агрегацией собираемых данных по пользовательским заказам  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderuser_by_userid_request(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param SearchRequest body: (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_orderuser_by_userid_request_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_orderuser_by_userid_request_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_orderuser_by_userid_request_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """Поиск (QueryDSL) с агрегацией собираемых данных по пользовательским заказам  # noqa: E501

        Поиск (QueryDSL) с агрегацией собираемых данных по пользовательским заказам  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_orderuser_by_userid_request_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param SearchRequest body: (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_orderuser_by_userid_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_dynamic_orderuser_by_userid_request`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_orderuser_by_userid_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/orderUser/{userId}/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
