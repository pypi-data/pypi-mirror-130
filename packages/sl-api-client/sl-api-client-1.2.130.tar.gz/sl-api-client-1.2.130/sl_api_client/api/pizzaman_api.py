# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class PizzamanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_pizzamia_pizzaman_promocode_by_promoid(self, promo_id, **kwargs):  # noqa: E501
        """Удалить акцию с промокодами  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pizzamia_pizzaman_promocode_by_promoid(promo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_id: ID промоакции (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pizzamia_pizzaman_promocode_by_promoid_with_http_info(promo_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pizzamia_pizzaman_promocode_by_promoid_with_http_info(promo_id, **kwargs)  # noqa: E501
            return data

    def delete_pizzamia_pizzaman_promocode_by_promoid_with_http_info(self, promo_id, **kwargs):  # noqa: E501
        """Удалить акцию с промокодами  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pizzamia_pizzaman_promocode_by_promoid_with_http_info(promo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_id: ID промоакции (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promo_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pizzamia_pizzaman_promocode_by_promoid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promo_id' is set
        if ('promo_id' not in params or
                params['promo_id'] is None):
            raise ValueError("Missing the required parameter `promo_id` when calling `delete_pizzamia_pizzaman_promocode_by_promoid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'promo_id' in params:
            path_params['promoId'] = params['promo_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/promocode/{promoId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pizzamia_pizzaman_health(self, **kwargs):  # noqa: E501
        """Возвращает HealthCheck  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_health(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Health
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pizzamia_pizzaman_health_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pizzamia_pizzaman_health_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pizzamia_pizzaman_health_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает HealthCheck  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_health_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Health
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pizzamia_pizzaman_health" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/health/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Health',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pizzamia_pizzaman_history(self, **kwargs):  # noqa: E501
        """Возвращает список всех историй  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Ограничить выдачу
        :param int offset: Пропустить первые элементы
        :return: list[History]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pizzamia_pizzaman_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pizzamia_pizzaman_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pizzamia_pizzaman_history_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает список всех историй  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Ограничить выдачу
        :param int offset: Пропустить первые элементы
        :return: list[History]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pizzamia_pizzaman_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/history/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[History]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pizzamia_pizzaman_history_winners_by_histid(self, hist_id, **kwargs):  # noqa: E501
        """Возвращает список всех победителей  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_history_winners_by_histid(hist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hist_id: ID акции (required)
        :param int limit: Ограничить выдачу
        :param int offset: Пропустить первые элементы
        :return: list[Winner]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pizzamia_pizzaman_history_winners_by_histid_with_http_info(hist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pizzamia_pizzaman_history_winners_by_histid_with_http_info(hist_id, **kwargs)  # noqa: E501
            return data

    def get_pizzamia_pizzaman_history_winners_by_histid_with_http_info(self, hist_id, **kwargs):  # noqa: E501
        """Возвращает список всех победителей  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_history_winners_by_histid_with_http_info(hist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hist_id: ID акции (required)
        :param int limit: Ограничить выдачу
        :param int offset: Пропустить первые элементы
        :return: list[Winner]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hist_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pizzamia_pizzaman_history_winners_by_histid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hist_id' is set
        if ('hist_id' not in params or
                params['hist_id'] is None):
            raise ValueError("Missing the required parameter `hist_id` when calling `get_pizzamia_pizzaman_history_winners_by_histid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hist_id' in params:
            path_params['histId'] = params['hist_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/history/winners/{histId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Winner]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pizzamia_pizzaman_promocode(self, **kwargs):  # noqa: E501
        """Возвращает список всех промокодов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_promocode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Ограничить выдачу
        :param int offset: Пропустить первые элементы
        :return: list[Promocode]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pizzamia_pizzaman_promocode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pizzamia_pizzaman_promocode_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pizzamia_pizzaman_promocode_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает список всех промокодов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pizzamia_pizzaman_promocode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Ограничить выдачу
        :param int offset: Пропустить первые элементы
        :return: list[Promocode]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pizzamia_pizzaman_promocode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/promocode/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Promocode]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pizzamia_pizzaman_promocode(self, body, **kwargs):  # noqa: E501
        """Создать новые промокоды  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pizzamia_pizzaman_promocode(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Promocode body: (required)
        :return: Promocode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pizzamia_pizzaman_promocode_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pizzamia_pizzaman_promocode_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_pizzamia_pizzaman_promocode_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создать новые промокоды  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pizzamia_pizzaman_promocode_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Promocode body: (required)
        :return: Promocode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pizzamia_pizzaman_promocode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_pizzamia_pizzaman_promocode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/promocode/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Promocode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pizzamia_pizzaman_promotion_activate_by_promoid(self, promo_id, **kwargs):  # noqa: E501
        """Привязывает свободный промокод к пользователю  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pizzamia_pizzaman_promotion_activate_by_promoid(promo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_id: ID промоакции (required)
        :return: PromotionActivateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pizzamia_pizzaman_promotion_activate_by_promoid_with_http_info(promo_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pizzamia_pizzaman_promotion_activate_by_promoid_with_http_info(promo_id, **kwargs)  # noqa: E501
            return data

    def post_pizzamia_pizzaman_promotion_activate_by_promoid_with_http_info(self, promo_id, **kwargs):  # noqa: E501
        """Привязывает свободный промокод к пользователю  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pizzamia_pizzaman_promotion_activate_by_promoid_with_http_info(promo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_id: ID промоакции (required)
        :return: PromotionActivateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promo_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pizzamia_pizzaman_promotion_activate_by_promoid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promo_id' is set
        if ('promo_id' not in params or
                params['promo_id'] is None):
            raise ValueError("Missing the required parameter `promo_id` when calling `post_pizzamia_pizzaman_promotion_activate_by_promoid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'promo_id' in params:
            path_params['promoId'] = params['promo_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/promotion/activate/{promoId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PromotionActivateResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pizzamia_pizzaman_promotion_launch_by_promoid(self, promo_id, **kwargs):  # noqa: E501
        """Запуск промо-акции  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pizzamia_pizzaman_promotion_launch_by_promoid(promo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_id: ID промоакции (required)
        :return: PromotionLaunchResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pizzamia_pizzaman_promotion_launch_by_promoid_with_http_info(promo_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pizzamia_pizzaman_promotion_launch_by_promoid_with_http_info(promo_id, **kwargs)  # noqa: E501
            return data

    def post_pizzamia_pizzaman_promotion_launch_by_promoid_with_http_info(self, promo_id, **kwargs):  # noqa: E501
        """Запуск промо-акции  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pizzamia_pizzaman_promotion_launch_by_promoid_with_http_info(promo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_id: ID промоакции (required)
        :return: PromotionLaunchResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promo_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pizzamia_pizzaman_promotion_launch_by_promoid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promo_id' is set
        if ('promo_id' not in params or
                params['promo_id'] is None):
            raise ValueError("Missing the required parameter `promo_id` when calling `post_pizzamia_pizzaman_promotion_launch_by_promoid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'promo_id' in params:
            path_params['promoId'] = params['promo_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/pizzamia/pizzaman/promotion/launch/{promoId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PromotionLaunchResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
