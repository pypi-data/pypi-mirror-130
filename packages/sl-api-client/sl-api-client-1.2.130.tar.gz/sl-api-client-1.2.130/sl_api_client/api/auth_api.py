# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_auth_user_by_userid(self, user_id, **kwargs):  # noqa: E501
        """Удаление пользователей из Users и Router API  # noqa: E501

        Удаление профиля пользователя из сервисов Users API и Router API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_auth_user_by_userid(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_auth_user_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_auth_user_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def delete_auth_user_by_userid_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Удаление пользователей из Users и Router API  # noqa: E501

        Удаление профиля пользователя из сервисов Users API и Router API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_auth_user_by_userid_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auth_user_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_auth_user_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/user/{userId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_batch_useradd(self, file, settings, **kwargs):  # noqa: E501
        """Пакетное добавление пользователей  # noqa: E501

        Позволяет массово добавить новых пользователей в систему. При пакетном добавлении пользователей в систему текст должен быть предствален в виде json структуры следующего вида: ```JSON { \"groups\": [\"users\", \"moderators\"], \"columns\": { \"email\": 0, \"phone\": 1, \"login\": 2, \"firstName\": 3, \"middleName\": 4, \"lastName\": 5, \"profilePicture\": 6, \"birthday\": 7, \"country\":8, \"region\": 9, \"city\": 10, \"area\": 11, \"street\": 12, \"house\": 13, \"block\": 14 \"apartment\": 15 }   } ``` * В элементе _groups_ необходимо перечислить имена групп в которые будут добавляться пользователи. Если этот элемент не указан или содержит пустой список, то пользователи будут добавлены в группу **Users**. * В элементе _columns_ необходимо перечислить сопоставление столбцов в файле (столбцы нумеруются с 0), с именами свойств. Следует учесть что хотя бы одно из свойств **email**, **phone** или **login** должно быть обязательно задано. Все остальные свойства - не обязательны.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_batch_useradd(file, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Содержимое документа (required)
        :param str settings: Текстовое описание столбцов в файле, подробное описание указанно в шапке спецификации. (required)
        :return: BatchUserQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_batch_useradd_with_http_info(file, settings, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_batch_useradd_with_http_info(file, settings, **kwargs)  # noqa: E501
            return data

    def post_auth_batch_useradd_with_http_info(self, file, settings, **kwargs):  # noqa: E501
        """Пакетное добавление пользователей  # noqa: E501

        Позволяет массово добавить новых пользователей в систему. При пакетном добавлении пользователей в систему текст должен быть предствален в виде json структуры следующего вида: ```JSON { \"groups\": [\"users\", \"moderators\"], \"columns\": { \"email\": 0, \"phone\": 1, \"login\": 2, \"firstName\": 3, \"middleName\": 4, \"lastName\": 5, \"profilePicture\": 6, \"birthday\": 7, \"country\":8, \"region\": 9, \"city\": 10, \"area\": 11, \"street\": 12, \"house\": 13, \"block\": 14 \"apartment\": 15 }   } ``` * В элементе _groups_ необходимо перечислить имена групп в которые будут добавляться пользователи. Если этот элемент не указан или содержит пустой список, то пользователи будут добавлены в группу **Users**. * В элементе _columns_ необходимо перечислить сопоставление столбцов в файле (столбцы нумеруются с 0), с именами свойств. Следует учесть что хотя бы одно из свойств **email**, **phone** или **login** должно быть обязательно задано. Все остальные свойства - не обязательны.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_batch_useradd_with_http_info(file, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Содержимое документа (required)
        :param str settings: Текстовое описание столбцов в файле, подробное описание указанно в шапке спецификации. (required)
        :return: BatchUserQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_batch_useradd" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `post_auth_batch_useradd`")  # noqa: E501
        # verify the required parameter 'settings' is set
        if ('settings' not in params or
                params['settings'] is None):
            raise ValueError("Missing the required parameter `settings` when calling `post_auth_batch_useradd`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'settings' in params:
            form_params.append(('settings', params['settings']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/batch/useradd/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchUserQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_batch_userupdate(self, body, **kwargs):  # noqa: E501
        """Пакетное обновление пользователей  # noqa: E501

        Позволяет обновить информацию всех пользователей, добавленных пакетным методом.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_batch_userupdate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestBatchUpdateUser body: (required)
        :return: list[ResponseBatchUpdateModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_batch_userupdate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_batch_userupdate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_batch_userupdate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Пакетное обновление пользователей  # noqa: E501

        Позволяет обновить информацию всех пользователей, добавленных пакетным методом.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_batch_userupdate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestBatchUpdateUser body: (required)
        :return: list[ResponseBatchUpdateModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_batch_userupdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_batch_userupdate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/batch/userupdate/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResponseBatchUpdateModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_check_communication(self, body, **kwargs):  # noqa: E501
        """Проверка средства связи  # noqa: E501

        Осуществляет запрос на проверку средства связи (телефонны номер или email).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_check_communication(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyQuery body: Данные для подтверждения (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_check_communication_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_check_communication_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_check_communication_with_http_info(self, body, **kwargs):  # noqa: E501
        """Проверка средства связи  # noqa: E501

        Осуществляет запрос на проверку средства связи (телефонны номер или email).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_check_communication_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyQuery body: Данные для подтверждения (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_check_communication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_check_communication`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/check/communication/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_invite(self, body, **kwargs):  # noqa: E501
        """Создание пользователей с инвайтом  # noqa: E501

        Позволяет создать новых пользователей в системе с приглашением по инвайту на email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_invite(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InviteQuery body: (required)
        :return: SignupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_invite_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_invite_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_invite_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание пользователей с инвайтом  # noqa: E501

        Позволяет создать новых пользователей в системе с приглашением по инвайту на email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_invite_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InviteQuery body: (required)
        :return: SignupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_invite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_invite`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/invite/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_recovery_password(self, body, **kwargs):  # noqa: E501
        """Запрос на восстановления пароля  # noqa: E501

        Функция позволяет осуществить процедуру восстановления пароля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_recovery_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyQuery body: Данные для восстановления (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_recovery_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_recovery_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_recovery_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос на восстановления пароля  # noqa: E501

        Функция позволяет осуществить процедуру восстановления пароля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_recovery_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyQuery body: Данные для восстановления (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_recovery_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_recovery_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/auth/recovery/password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_recovery_password_confirmation(self, body, **kwargs):  # noqa: E501
        """Подтверждение кода авторизации при восстановлении пароля  # noqa: E501

        Подтверждение кода авторизации при восстановлении пароля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_recovery_password_confirmation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfirmationQuery body: (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_recovery_password_confirmation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_recovery_password_confirmation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_recovery_password_confirmation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Подтверждение кода авторизации при восстановлении пароля  # noqa: E501

        Подтверждение кода авторизации при восстановлении пароля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_recovery_password_confirmation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfirmationQuery body: (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_recovery_password_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_recovery_password_confirmation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/recovery/password/confirmation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Signin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_signin_code(self, body, **kwargs):  # noqa: E501
        """Запросить код авторизации  # noqa: E501

        Запрос кода авторизации. Если пользователь не найден, то происходит автоматическая регистрация.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_code(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodeQuery body: (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_signin_code_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_signin_code_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_signin_code_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запросить код авторизации  # noqa: E501

        Запрос кода авторизации. Если пользователь не найден, то происходит автоматическая регистрация.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_code_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodeQuery body: (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_signin_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_signin_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/auth/signin/code/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_signin_code_confirmation(self, body, **kwargs):  # noqa: E501
        """Подтверждение кода авторизации  # noqa: E501

        Запрос позволяет осуществить подтверждение кода авторизации  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_code_confirmation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfirmationQuery body: (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_signin_code_confirmation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_signin_code_confirmation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_signin_code_confirmation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Подтверждение кода авторизации  # noqa: E501

        Запрос позволяет осуществить подтверждение кода авторизации  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_code_confirmation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfirmationQuery body: (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_signin_code_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_signin_code_confirmation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/signin/code/confirmation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Signin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_signin_password(self, body, **kwargs):  # noqa: E501
        """Парольная авторизация  # noqa: E501

        Позволяет авторизоваться пользователю в системе. Доступны значения в зависимости от настроек login, email, phone. Email; Phone - только числа, от 11 символов и более, другие символы недопустимы; Login - Логин более 2-х символов. Первый символ - буква.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordQuery body: Данные для авторизации (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_signin_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_signin_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_signin_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """Парольная авторизация  # noqa: E501

        Позволяет авторизоваться пользователю в системе. Доступны значения в зависимости от настроек login, email, phone. Email; Phone - только числа, от 11 символов и более, другие символы недопустимы; Login - Логин более 2-х символов. Первый символ - буква.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordQuery body: Данные для авторизации (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_signin_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_signin_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/auth/signin/password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Signin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_signin_social(self, body, **kwargs):  # noqa: E501
        """Авторизация через соц сеть  # noqa: E501

        Позволяет осуществить авторизацию через привязанную к системе социальную сеть. Если пользователь не найден, происходит автоматическая регистрация.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_social(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SocialQuery body: (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_signin_social_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_signin_social_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_signin_social_with_http_info(self, body, **kwargs):  # noqa: E501
        """Авторизация через соц сеть  # noqa: E501

        Позволяет осуществить авторизацию через привязанную к системе социальную сеть. Если пользователь не найден, происходит автоматическая регистрация.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signin_social_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SocialQuery body: (required)
        :return: Signin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_signin_social" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_signin_social`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/auth/signin/social/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Signin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_signup_password(self, body, **kwargs):  # noqa: E501
        """Регистрация по паролю  # noqa: E501

        Регистрация по паролю. Если регистрация происходит по email, то для авторизации требуется выполнить запрос /signin/code/confirmation/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signup_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignupQuery body: (required)
        :return: SignupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_signup_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_signup_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_signup_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """Регистрация по паролю  # noqa: E501

        Регистрация по паролю. Если регистрация происходит по email, то для авторизации требуется выполнить запрос /signin/code/confirmation/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_signup_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignupQuery body: (required)
        :return: SignupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_signup_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_signup_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/auth/signup/password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_auth_verify_communication(self, body, **kwargs):  # noqa: E501
        """Подтверждение средства связи  # noqa: E501

        Запрос на подтверждение средства связи (телефонный номер или email).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_verify_communication(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyCheckQuery body: Данные для подтверждения (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_auth_verify_communication_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_auth_verify_communication_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_auth_verify_communication_with_http_info(self, body, **kwargs):  # noqa: E501
        """Подтверждение средства связи  # noqa: E501

        Запрос на подтверждение средства связи (телефонный номер или email).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_verify_communication_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyCheckQuery body: Данные для подтверждения (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_verify_communication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_auth_verify_communication`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/auth/verify/communication/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
