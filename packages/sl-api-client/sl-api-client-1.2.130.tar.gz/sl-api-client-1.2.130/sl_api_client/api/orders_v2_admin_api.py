# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class OrdersV2AdminApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_v2_orders_admin(self, limit, offset, **kwargs):  # noqa: E501
        """Список заказов для админки  # noqa: E501

        Список заказов для админки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_admin(limit, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Количество заказов (required)
        :param int offset: Смещение относительно первого (required)
        :return: OrderV2List
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_admin_with_http_info(limit, offset, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_admin_with_http_info(limit, offset, **kwargs)  # noqa: E501
            return data

    def get_v2_orders_admin_with_http_info(self, limit, offset, **kwargs):  # noqa: E501
        """Список заказов для админки  # noqa: E501

        Список заказов для админки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_admin_with_http_info(limit, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Количество заказов (required)
        :param int offset: Смещение относительно первого (required)
        :return: OrderV2List
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_admin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_v2_orders_admin`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_v2_orders_admin`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_v2_orders_admin`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_v2_orders_admin`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2List',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v2_orders_admin_by_orderid(self, order_id, **kwargs):  # noqa: E501
        """Получение заказа по ID  # noqa: E501

        Получение заказа по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_admin_by_orderid(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_admin_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_admin_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def get_v2_orders_admin_by_orderid_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Получение заказа по ID  # noqa: E501

        Получение заказа по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_admin_by_orderid_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_admin_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `get_v2_orders_admin_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/{orderId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v2_orders_admin_cart_by_userid(self, user_id, **kwargs):  # noqa: E501
        """Получить корзину по инетификатору пользователя  # noqa: E501

        Получить корзину по инетификатору пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_admin_cart_by_userid(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_admin_cart_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_admin_cart_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_v2_orders_admin_cart_by_userid_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Получить корзину по инетификатору пользователя  # noqa: E501

        Получить корзину по инетификатору пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_admin_cart_by_userid_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_admin_cart_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_v2_orders_admin_cart_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/cart/{userId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_v2_orders_admin_by_orderid(self, order_id, body, **kwargs):  # noqa: E501
        """Обновление заказа  # noqa: E501

        Обновление заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_by_orderid(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param OrderV2Patch body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_v2_orders_admin_by_orderid_with_http_info(order_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_v2_orders_admin_by_orderid_with_http_info(order_id, body, **kwargs)  # noqa: E501
            return data

    def patch_v2_orders_admin_by_orderid_with_http_info(self, order_id, body, **kwargs):  # noqa: E501
        """Обновление заказа  # noqa: E501

        Обновление заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_by_orderid_with_http_info(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param OrderV2Patch body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_v2_orders_admin_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `patch_v2_orders_admin_by_orderid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_v2_orders_admin_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/{orderId}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_v2_orders_admin_cart_by_userid(self, user_id, body, x_content_signature, **kwargs):  # noqa: E501
        """Обновление корзины заказов пользователя  # noqa: E501

        Обновление корзины заказов. См. https://gitlab.itnap.ru/shop-loyalty/orders-v2/wikis/orders/cart#workflow-%D0%BA%D0%BE%D1%80%D0%B7%D0%B8%D0%BD%D1%8B   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_cart_by_userid(user_id, body, x_content_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param CartPatch body: (required)
        :param str x_content_signature: Подпись содержимого запроса модификации корзины (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_v2_orders_admin_cart_by_userid_with_http_info(user_id, body, x_content_signature, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_v2_orders_admin_cart_by_userid_with_http_info(user_id, body, x_content_signature, **kwargs)  # noqa: E501
            return data

    def patch_v2_orders_admin_cart_by_userid_with_http_info(self, user_id, body, x_content_signature, **kwargs):  # noqa: E501
        """Обновление корзины заказов пользователя  # noqa: E501

        Обновление корзины заказов. См. https://gitlab.itnap.ru/shop-loyalty/orders-v2/wikis/orders/cart#workflow-%D0%BA%D0%BE%D1%80%D0%B7%D0%B8%D0%BD%D1%8B   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_cart_by_userid_with_http_info(user_id, body, x_content_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param CartPatch body: (required)
        :param str x_content_signature: Подпись содержимого запроса модификации корзины (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body', 'x_content_signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_v2_orders_admin_cart_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `patch_v2_orders_admin_cart_by_userid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_v2_orders_admin_cart_by_userid`")  # noqa: E501
        # verify the required parameter 'x_content_signature' is set
        if ('x_content_signature' not in params or
                params['x_content_signature'] is None):
            raise ValueError("Missing the required parameter `x_content_signature` when calling `patch_v2_orders_admin_cart_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_content_signature' in params:
            header_params['x-content-signature'] = params['x_content_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/cart/{userId}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_v2_orders_admin_pay_refund(self, body, x_content_signature, **kwargs):  # noqa: E501
        """Возврат средств  # noqa: E501

        Возврат средств  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_pay_refund(body, x_content_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body1 body: (required)
        :param str x_content_signature: Подпись содержимого запроса модификации корзины (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_v2_orders_admin_pay_refund_with_http_info(body, x_content_signature, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_v2_orders_admin_pay_refund_with_http_info(body, x_content_signature, **kwargs)  # noqa: E501
            return data

    def patch_v2_orders_admin_pay_refund_with_http_info(self, body, x_content_signature, **kwargs):  # noqa: E501
        """Возврат средств  # noqa: E501

        Возврат средств  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_pay_refund_with_http_info(body, x_content_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body1 body: (required)
        :param str x_content_signature: Подпись содержимого запроса модификации корзины (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_content_signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_v2_orders_admin_pay_refund" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_v2_orders_admin_pay_refund`")  # noqa: E501
        # verify the required parameter 'x_content_signature' is set
        if ('x_content_signature' not in params or
                params['x_content_signature'] is None):
            raise ValueError("Missing the required parameter `x_content_signature` when calling `patch_v2_orders_admin_pay_refund`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_content_signature' in params:
            header_params['x-content-signature'] = params['x_content_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/pay/refund/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_v2_orders_admin_pay_reverse(self, body, x_content_signature, **kwargs):  # noqa: E501
        """Отмена оплаты заказа  # noqa: E501

        Отмена оплаты заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_pay_reverse(body, x_content_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: (required)
        :param str x_content_signature: Подпись содержимого запроса модификации корзины (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_v2_orders_admin_pay_reverse_with_http_info(body, x_content_signature, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_v2_orders_admin_pay_reverse_with_http_info(body, x_content_signature, **kwargs)  # noqa: E501
            return data

    def patch_v2_orders_admin_pay_reverse_with_http_info(self, body, x_content_signature, **kwargs):  # noqa: E501
        """Отмена оплаты заказа  # noqa: E501

        Отмена оплаты заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_v2_orders_admin_pay_reverse_with_http_info(body, x_content_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: (required)
        :param str x_content_signature: Подпись содержимого запроса модификации корзины (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_content_signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_v2_orders_admin_pay_reverse" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_v2_orders_admin_pay_reverse`")  # noqa: E501
        # verify the required parameter 'x_content_signature' is set
        if ('x_content_signature' not in params or
                params['x_content_signature'] is None):
            raise ValueError("Missing the required parameter `x_content_signature` when calling `patch_v2_orders_admin_pay_reverse`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_content_signature' in params:
            header_params['x-content-signature'] = params['x_content_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/pay/reverse/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_admin_by_orderid_status(self, order_id, body, **kwargs):  # noqa: E501
        """Изменение статуса заказа  # noqa: E501

        Изменение статуса заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_admin_by_orderid_status(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param Body3 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_admin_by_orderid_status_with_http_info(order_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_admin_by_orderid_status_with_http_info(order_id, body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_admin_by_orderid_status_with_http_info(self, order_id, body, **kwargs):  # noqa: E501
        """Изменение статуса заказа  # noqa: E501

        Изменение статуса заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_admin_by_orderid_status_with_http_info(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param Body3 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_admin_by_orderid_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `post_v2_orders_admin_by_orderid_status`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_admin_by_orderid_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/{orderId}/status/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_admin_request(self, body, **kwargs):  # noqa: E501
        """Поиск заказов в админке  # noqa: E501

        Поиск заказов в админке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_admin_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: OrdersV2QueryDslResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_admin_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_admin_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_admin_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Поиск заказов в админке  # noqa: E501

        Поиск заказов в админке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_admin_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: OrdersV2QueryDslResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_admin_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_admin_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/admin/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersV2QueryDslResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
