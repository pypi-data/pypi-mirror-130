# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_dynamic_user_by_userid(self, user_id, **kwargs):  # noqa: E501
        """Удаление пользователя  # noqa: E501

        Удаление пользователя из системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_user_by_userid(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dynamic_user_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dynamic_user_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def delete_dynamic_user_by_userid_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Удаление пользователя  # noqa: E501

        Удаление пользователя из системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_user_by_userid_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dynamic_user_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_dynamic_user_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/{userId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dynamic_user_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление указанного свойства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_user_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dynamic_user_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dynamic_user_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def delete_dynamic_user_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление указанного свойства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_user_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dynamic_user_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_dynamic_user_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/properties/{propertyKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_user_by_userid(self, user_id, **kwargs):  # noqa: E501
        """Запрос информации о пользователе  # noqa: E501

        Запрос информации о пользователе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_user_by_userid(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_user_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_user_by_userid_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_dynamic_user_by_userid_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Запрос информации о пользователе  # noqa: E501

        Запрос информации о пользователе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_user_by_userid_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_user_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_dynamic_user_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/{userId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_user_properties(self, **kwargs):  # noqa: E501
        """Запрос списка свойств  # noqa: E501

        Запрос списка свойств конкретного пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_user_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_user_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_user_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dynamic_user_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка свойств  # noqa: E501

        Запрос списка свойств конкретного пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_user_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_user_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/properties/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_user_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства пользователя  # noqa: E501

        Выводит структуру запрашиваемого свойства по его идентификатору  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_user_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_user_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_user_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def get_dynamic_user_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства пользователя  # noqa: E501

        Выводит структуру запрашиваемого свойства по его идентификатору  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_user_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_user_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_dynamic_user_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/properties/{propertyKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_finduserbycommunication(self, body, **kwargs):  # noqa: E501
        """Запрос пользователя по средству связи или логину  # noqa: E501

        Запрос пользователя по средству связи или логину  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_finduserbycommunication(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserQueryByCommunication body: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_finduserbycommunication_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_finduserbycommunication_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_finduserbycommunication_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос пользователя по средству связи или логину  # noqa: E501

        Запрос пользователя по средству связи или логину  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_finduserbycommunication_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserQueryByCommunication body: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_finduserbycommunication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_finduserbycommunication`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/findUserByCommunication/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user(self, body, **kwargs):  # noqa: E501
        """Создание нового пользователя  # noqa: E501

        Создание нового пользователя в системе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserWithRelations body: Объект создаваемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового пользователя  # noqa: E501

        Создание нового пользователя в системе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserWithRelations body: Объект создаваемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_by_userid(self, user_id, body, **kwargs):  # noqa: E501
        """Обновлении информации о пользователе  # noqa: E501

        Обновление информации о пользователе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_by_userid(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param UserWithRelations body: Объект обновляемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_by_userid_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """Обновлении информации о пользователе  # noqa: E501

        Обновление информации о пользователе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_by_userid_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param UserWithRelations body: Объект обновляемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_dynamic_user_by_userid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/{userId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_by_userid_communicationconfirm(self, user_id, body, **kwargs):  # noqa: E501
        """Изменение статуса подтверждения средства связи  # noqa: E501

        Изменить статус подтверждения средства связи. При обращении по этому маршруту у всех средств связи, удовлетворяющих условию запроса `confirm` сбрасывается на `false` (если resetOther не  установлен в False), после чего для конкретного пользователя выставляется значение `true`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_by_userid_communicationconfirm(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param CommunicationConfirm body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_by_userid_communicationconfirm_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_by_userid_communicationconfirm_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_by_userid_communicationconfirm_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """Изменение статуса подтверждения средства связи  # noqa: E501

        Изменить статус подтверждения средства связи. При обращении по этому маршруту у всех средств связи, удовлетворяющих условию запроса `confirm` сбрасывается на `false` (если resetOther не  установлен в False), после чего для конкретного пользователя выставляется значение `true`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_by_userid_communicationconfirm_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param CommunicationConfirm body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_by_userid_communicationconfirm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_dynamic_user_by_userid_communicationconfirm`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_by_userid_communicationconfirm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/{userId}/communicationConfirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_by_userid_groups(self, user_id, body, **kwargs):  # noqa: E501
        """Изменение списка групп пользователя  # noqa: E501

        Изменить список групп у пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_by_userid_groups(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param UserGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_by_userid_groups_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_by_userid_groups_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_by_userid_groups_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """Изменение списка групп пользователя  # noqa: E501

        Изменить список групп у пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_by_userid_groups_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param UserGroups body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_by_userid_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_dynamic_user_by_userid_groups`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_by_userid_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/{userId}/groups/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_count(self, body, **kwargs):  # noqa: E501
        """Запрос записей по заданным параметрам  # noqa: E501

        Количества записей, соответствующих критериям поиска  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_count(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CountQuery body: (required)
        :return: CountQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_count_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_count_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_count_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос записей по заданным параметрам  # noqa: E501

        Количества записей, соответствующих критериям поиска  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_count_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CountQuery body: (required)
        :return: CountQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/count/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_create(self, body, **kwargs):  # noqa: E501
        """Создание нового пользователя для внешних запросов  # noqa: E501

        Создание нового пользователя для внешних запросов. Внешние запросы позволяют добавлять в систему пользователя с уже подтвержденным каналом связи.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserWithRelations body: Объект создаваемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового пользователя для внешних запросов  # noqa: E501

        Создание нового пользователя для внешних запросов. Внешние запросы позволяют добавлять в систему пользователя с уже подтвержденным каналом связи.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserWithRelations body: Объект создаваемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_properties(self, body, **kwargs):  # noqa: E501
        """Создание свойства  # noqa: E501

        Создание нового свойства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_properties(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_properties_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_properties_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_properties_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание свойства  # noqa: E501

        Создание нового свойства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_properties_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/properties/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_properties_by_propertykey(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_properties_by_propertykey(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_properties_by_propertykey_with_http_info(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_properties_by_propertykey_with_http_info(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `post_dynamic_user_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/properties/{propertyKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_reindex_by_cid(self, cid, **kwargs):  # noqa: E501
        """Переиндексация пользователей для компаний   # noqa: E501

        Переиндексация пользователей в elastic для компании  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_reindex_by_cid(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cid: Идентификатор компании (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_reindex_by_cid_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_reindex_by_cid_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_reindex_by_cid_with_http_info(self, cid, **kwargs):  # noqa: E501
        """Переиндексация пользователей для компаний   # noqa: E501

        Переиндексация пользователей в elastic для компании  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_reindex_by_cid_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cid: Идентификатор компании (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_reindex_by_cid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `post_dynamic_user_reindex_by_cid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/reindex/{cid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_request(self, body, **kwargs):  # noqa: E501
        """Поиск пользователей с созданием агрегаций  # noqa: E501

        Поиск пользователей с поддержкой агрегаций  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: UsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Поиск пользователей с созданием агрегаций  # noqa: E501

        Поиск пользователей с поддержкой агрегаций  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: UsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UsersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_search(self, body, **kwargs):  # noqa: E501
        """Запрос списка пользователей к elastic  # noqa: E501

        Запрос списка пользователей к elastic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BaseSearch body: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос списка пользователей к elastic  # noqa: E501

        Запрос списка пользователей к elastic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BaseSearch body: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/search/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_searchafter(self, body, **kwargs):  # noqa: E501
        """Запрос определенного количества пользователей по заданным параметрам  # noqa: E501

        Аналог запроса request без создания агрегаций. Постраничная загрузка происходит без использования offset. Запрос выбирает конкретно заданное количество (limit) пользователей после указанного идентификатора с учетом сортировки. В поле **after** должен указываться идентификатор пользователя с которого будет начата выборка.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_searchafter(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AfterSearch body: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_searchafter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_searchafter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_searchafter_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос определенного количества пользователей по заданным параметрам  # noqa: E501

        Аналог запроса request без создания агрегаций. Постраничная загрузка происходит без использования offset. Запрос выбирает конкретно заданное количество (limit) пользователей после указанного идентификатора с учетом сортировки. В поле **after** должен указываться идентификатор пользователя с которого будет начата выборка.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_searchafter_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AfterSearch body: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_searchafter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_searchafter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/searchAfter/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_user_update_by_userid(self, user_id, body, **kwargs):  # noqa: E501
        """Обновление информации о пользователе для внешних запросов  # noqa: E501

        Обновление информации о пользователе для внешних запросов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_update_by_userid(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param UserWithRelations body: Объект обновляемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_user_update_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_user_update_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_user_update_by_userid_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """Обновление информации о пользователе для внешних запросов  # noqa: E501

        Обновление информации о пользователе для внешних запросов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_user_update_by_userid_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param UserWithRelations body: Объект обновляемого пользователя (required)
        :return: UserWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_user_update_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_dynamic_user_update_by_userid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_user_update_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/update/{userId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_userquery(self, body, **kwargs):  # noqa: E501
        """Запрос списка пользователей  # noqa: E501

        Запрос списка пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_userquery(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserQuery body: (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_userquery_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_userquery_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_userquery_with_http_info(self, body, **kwargs):  # noqa: E501
        """Запрос списка пользователей  # noqa: E501

        Запрос списка пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_userquery_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserQuery body: (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_userquery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_userquery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/userQuery/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_userquerywithrelations(self, list_ids, **kwargs):  # noqa: E501
        """Запрос списка пользователей  # noqa: E501

        Запрос списка пользователей по id. Устаревшая версия запроса.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_userquerywithrelations(list_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ListIds list_ids: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_userquerywithrelations_with_http_info(list_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_userquerywithrelations_with_http_info(list_ids, **kwargs)  # noqa: E501
            return data

    def post_dynamic_userquerywithrelations_with_http_info(self, list_ids, **kwargs):  # noqa: E501
        """Запрос списка пользователей  # noqa: E501

        Запрос списка пользователей по id. Устаревшая версия запроса.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_userquerywithrelations_with_http_info(list_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ListIds list_ids: (required)
        :return: list[UserWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_userquerywithrelations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_ids' is set
        if ('list_ids' not in params or
                params['list_ids'] is None):
            raise ValueError("Missing the required parameter `list_ids` when calling `post_dynamic_userquerywithrelations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'list_ids' in params:
            body_params = params['list_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/userQueryWithRelations/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_dynamic_user_by_userid_communication(self, user_id, body, **kwargs):  # noqa: E501
        """Добавление средства связи  # noqa: E501

        Добавить средство связи для конкретного пользователя по userID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_dynamic_user_by_userid_communication(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param Communication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_dynamic_user_by_userid_communication_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_dynamic_user_by_userid_communication_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def put_dynamic_user_by_userid_communication_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """Добавление средства связи  # noqa: E501

        Добавить средство связи для конкретного пользователя по userID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_dynamic_user_by_userid_communication_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param Communication body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_dynamic_user_by_userid_communication" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `put_dynamic_user_by_userid_communication`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_dynamic_user_by_userid_communication`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/user/{userId}/communication/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
