# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class LoyaltyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_loyalty_card_history(self, **kwargs):  # noqa: E501
        """Запрос истории привязанной карты  # noqa: E501

        Запрос истории привязанной карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_card_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[LoyaltyHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_card_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_card_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loyalty_card_history_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос истории привязанной карты  # noqa: E501

        Запрос истории привязанной карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_card_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[LoyaltyHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_card_history" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_loyalty_card_history`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_loyalty_card_history`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/card/history/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LoyaltyHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_card_history_by_cardnumber(self, card_number, **kwargs):  # noqa: E501
        """Запрос истории карты  # noqa: E501

        Запрос истории карты для административной панели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_card_history_by_cardnumber(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[LoyaltyHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_card_history_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_card_history_by_cardnumber_with_http_info(card_number, **kwargs)  # noqa: E501
            return data

    def get_loyalty_card_history_by_cardnumber_with_http_info(self, card_number, **kwargs):  # noqa: E501
        """Запрос истории карты  # noqa: E501

        Запрос истории карты для административной панели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_card_history_by_cardnumber_with_http_info(card_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_number: Номер карты (required)
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[LoyaltyHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_number', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_card_history_by_cardnumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_number' is set
        if ('card_number' not in params or
                params['card_number'] is None):
            raise ValueError("Missing the required parameter `card_number` when calling `get_loyalty_card_history_by_cardnumber`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_loyalty_card_history_by_cardnumber`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_loyalty_card_history_by_cardnumber`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'card_number' in params:
            path_params['cardNumber'] = params['card_number']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/card/history/{cardNumber}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LoyaltyHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_cloudloyalty_card(self, **kwargs):  # noqa: E501
        """Получение информации о бонусном счете клиента  # noqa: E501

        При запросе из профиля пользователя берется подтвержденный телефон (если таковой не имеется то возращается ошибка 404), далее с этим номером происходит запрос по маршруту /get-balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_cloudloyalty_card(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CloudLoyaltyBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_cloudloyalty_card_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_cloudloyalty_card_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loyalty_cloudloyalty_card_with_http_info(self, **kwargs):  # noqa: E501
        """Получение информации о бонусном счете клиента  # noqa: E501

        При запросе из профиля пользователя берется подтвержденный телефон (если таковой не имеется то возращается ошибка 404), далее с этим номером происходит запрос по маршруту /get-balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_cloudloyalty_card_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CloudLoyaltyBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_cloudloyalty_card" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/cloudloyalty/card/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudLoyaltyBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_cloudloyalty_card_history(self, **kwargs):  # noqa: E501
        """История начислений и списаний  # noqa: E501

        При запросе используется externalId в системе Napoleon, запрос отправляется по маршруту /get-history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_cloudloyalty_card_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit: указывает максимальное число возвращаемых записей Максмальное значение - 100, минимальное - 1. 
        :param float offset: указывает смещение, с которого начнется возвращение данных Начало отсчета - 0. 
        :return: CloudLoyaltyHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_cloudloyalty_card_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_cloudloyalty_card_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loyalty_cloudloyalty_card_history_with_http_info(self, **kwargs):  # noqa: E501
        """История начислений и списаний  # noqa: E501

        При запросе используется externalId в системе Napoleon, запрос отправляется по маршруту /get-history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_cloudloyalty_card_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit: указывает максимальное число возвращаемых записей Максмальное значение - 100, минимальное - 1. 
        :param float offset: указывает смещение, с которого начнется возвращение данных Начало отсчета - 0. 
        :return: CloudLoyaltyHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_cloudloyalty_card_history" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_loyalty_cloudloyalty_card_history`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_loyalty_cloudloyalty_card_history`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_loyalty_cloudloyalty_card_history`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/cloudloyalty/card/history/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudLoyaltyHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_mechanics_invite_code(self, **kwargs):  # noqa: E501
        """Запрос кода приглашения пользователя  # noqa: E501

        Запрос кода приглашения пользователя. Код генерируется единожды для каждого аккаута, что позволяет пользователю распространять код в социальных сетях.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_mechanics_invite_code(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyInviteCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_mechanics_invite_code_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_mechanics_invite_code_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loyalty_mechanics_invite_code_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос кода приглашения пользователя  # noqa: E501

        Запрос кода приглашения пользователя. Код генерируется единожды для каждого аккаута, что позволяет пользователю распространять код в социальных сетях.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_mechanics_invite_code_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyInviteCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_mechanics_invite_code" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/invite/code/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyInviteCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_mechanics_profile_instagram_group(self, **kwargs):  # noqa: E501
        """Запрос идентификатора группы в социальной сети  # noqa: E501

        Запрос идентификатора группы в социальной сети при вступлении в которую будет применяться текущая механика  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_mechanics_profile_instagram_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyInstagramId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_mechanics_profile_instagram_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_mechanics_profile_instagram_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loyalty_mechanics_profile_instagram_group_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос идентификатора группы в социальной сети  # noqa: E501

        Запрос идентификатора группы в социальной сети при вступлении в которую будет применяться текущая механика  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_mechanics_profile_instagram_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyInstagramId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_mechanics_profile_instagram_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/profile/instagram/group/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyInstagramId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_mechanics_profile_vk_group(self, **kwargs):  # noqa: E501
        """Запрос идентификатора группы в социальной сети  # noqa: E501

        Запрос идентификатора группы в социальной сети при вступлении в которую будет применяться текущая механика  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_mechanics_profile_vk_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyVkId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_mechanics_profile_vk_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_mechanics_profile_vk_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loyalty_mechanics_profile_vk_group_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос идентификатора группы в социальной сети  # noqa: E501

        Запрос идентификатора группы в социальной сети при вступлении в которую будет применяться текущая механика  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_mechanics_profile_vk_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyVkId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_mechanics_profile_vk_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/profile/vk/group/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyVkId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_oas_card_history(self, **kwargs):  # noqa: E501
        """Запрос истории привязанной карты  # noqa: E501

        Запрос истории привязанной карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_oas_card_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_oas_card_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_oas_card_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loyalty_oas_card_history_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос истории привязанной карты  # noqa: E501

        Запрос истории привязанной карты  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_oas_card_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_oas_card_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/oas/card/history/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loyalty_oas_promocode(self, promocode, **kwargs):  # noqa: E501
        """Запрос на проверку промокода для ОАС  # noqa: E501

        Проверка промокодов для проекта ОАС  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_oas_promocode(promocode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promocode: Проверяемый промокод (required)
        :return: OasPromocode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loyalty_oas_promocode_with_http_info(promocode, **kwargs)  # noqa: E501
        else:
            (data) = self.get_loyalty_oas_promocode_with_http_info(promocode, **kwargs)  # noqa: E501
            return data

    def get_loyalty_oas_promocode_with_http_info(self, promocode, **kwargs):  # noqa: E501
        """Запрос на проверку промокода для ОАС  # noqa: E501

        Проверка промокодов для проекта ОАС  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loyalty_oas_promocode_with_http_info(promocode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promocode: Проверяемый промокод (required)
        :return: OasPromocode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promocode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loyalty_oas_promocode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promocode' is set
        if ('promocode' not in params or
                params['promocode'] is None):
            raise ValueError("Missing the required parameter `promocode` when calling `get_loyalty_oas_promocode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'promocode' in params:
            query_params.append(('promocode', params['promocode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/oas/promocode/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OasPromocode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loyalty_cloudloyalty_card_new(self, **kwargs):  # noqa: E501
        """Создание нового бонусного счета клиента  # noqa: E501

        При запросе из профиля пользователя берется подтвержденный телефон (если таковой не имеется то возращается ошибка 404), далее с текущим номером происходит запрос /new-client **Перед запросом обязательно производится проверка существования ранее выпущенной карты по данному идентификатору пользователя или номеру телефона.**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_cloudloyalty_card_new(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CloudLoyaltyBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loyalty_cloudloyalty_card_new_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_loyalty_cloudloyalty_card_new_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_loyalty_cloudloyalty_card_new_with_http_info(self, **kwargs):  # noqa: E501
        """Создание нового бонусного счета клиента  # noqa: E501

        При запросе из профиля пользователя берется подтвержденный телефон (если таковой не имеется то возращается ошибка 404), далее с текущим номером происходит запрос /new-client **Перед запросом обязательно производится проверка существования ранее выпущенной карты по данному идентификатору пользователя или номеру телефона.**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_cloudloyalty_card_new_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CloudLoyaltyBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loyalty_cloudloyalty_card_new" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/cloudloyalty/card/new/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudLoyaltyBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loyalty_mechanics_card_binding(self, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за привязанную карту лояльности  # noqa: E501

        Запрос начисления бонусов за привязанную карту лояльности. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_card_binding(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loyalty_mechanics_card_binding_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_loyalty_mechanics_card_binding_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_loyalty_mechanics_card_binding_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за привязанную карту лояльности  # noqa: E501

        Запрос начисления бонусов за привязанную карту лояльности. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_card_binding_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loyalty_mechanics_card_binding" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/card/binding/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loyalty_mechanics_invite_apply(self, invite, **kwargs):  # noqa: E501
        """Запрос начисления бонусов по приглашению  # noqa: E501

        Запрос начисления бонусов за привязанную карту лояльности. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике Так же бонусы начисляются на карту выпустившую код приглашения   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_invite_apply(invite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoyaltyInviteCode invite: (required)
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loyalty_mechanics_invite_apply_with_http_info(invite, **kwargs)  # noqa: E501
        else:
            (data) = self.post_loyalty_mechanics_invite_apply_with_http_info(invite, **kwargs)  # noqa: E501
            return data

    def post_loyalty_mechanics_invite_apply_with_http_info(self, invite, **kwargs):  # noqa: E501
        """Запрос начисления бонусов по приглашению  # noqa: E501

        Запрос начисления бонусов за привязанную карту лояльности. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике Так же бонусы начисляются на карту выпустившую код приглашения   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_invite_apply_with_http_info(invite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoyaltyInviteCode invite: (required)
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invite']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loyalty_mechanics_invite_apply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invite' is set
        if ('invite' not in params or
                params['invite'] is None):
            raise ValueError("Missing the required parameter `invite` when calling `post_loyalty_mechanics_invite_apply`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invite' in params:
            body_params = params['invite']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/invite/apply/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loyalty_mechanics_order_first(self, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за первый заказ в приложении  # noqa: E501

        Запрос начисления бонусов за заполненный профиль. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * У аккаунта x-uid в order есть минимум один заказа в статусе complete   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_order_first(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loyalty_mechanics_order_first_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_loyalty_mechanics_order_first_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_loyalty_mechanics_order_first_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за первый заказ в приложении  # noqa: E501

        Запрос начисления бонусов за заполненный профиль. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * У аккаунта x-uid в order есть минимум один заказа в статусе complete   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_order_first_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loyalty_mechanics_order_first" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/order/first/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loyalty_mechanics_profile_apply(self, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за заполненный профиль  # noqa: E501

        Запрос начисления бонусов за заполненный профиль. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * Заполненны основные поля профиля (добавлено подтвержденное средство связи, заполнены firstName, lastName, birthday, location)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_profile_apply(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loyalty_mechanics_profile_apply_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_loyalty_mechanics_profile_apply_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_loyalty_mechanics_profile_apply_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за заполненный профиль  # noqa: E501

        Запрос начисления бонусов за заполненный профиль. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * Заполненны основные поля профиля (добавлено подтвержденное средство связи, заполнены firstName, lastName, birthday, location)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_profile_apply_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loyalty_mechanics_profile_apply" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/profile/apply/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loyalty_mechanics_profile_instagram_group_apply(self, invite, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за вступление в группу  # noqa: E501

        Запрос начисления бонусов за вступление в группу. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * Пользователь с указанным идентификатором социальной сети состоит в группе  **invite содержит в id идентификатор пользователя**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_profile_instagram_group_apply(invite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoyaltyInstagramId invite: (required)
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loyalty_mechanics_profile_instagram_group_apply_with_http_info(invite, **kwargs)  # noqa: E501
        else:
            (data) = self.post_loyalty_mechanics_profile_instagram_group_apply_with_http_info(invite, **kwargs)  # noqa: E501
            return data

    def post_loyalty_mechanics_profile_instagram_group_apply_with_http_info(self, invite, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за вступление в группу  # noqa: E501

        Запрос начисления бонусов за вступление в группу. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * Пользователь с указанным идентификатором социальной сети состоит в группе  **invite содержит в id идентификатор пользователя**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_profile_instagram_group_apply_with_http_info(invite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoyaltyInstagramId invite: (required)
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invite']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loyalty_mechanics_profile_instagram_group_apply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invite' is set
        if ('invite' not in params or
                params['invite'] is None):
            raise ValueError("Missing the required parameter `invite` when calling `post_loyalty_mechanics_profile_instagram_group_apply`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invite' in params:
            body_params = params['invite']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/profile/instagram/group/apply/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_loyalty_mechanics_profile_vk_group_apply(self, invite, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за вступление в группу  # noqa: E501

        Запрос начисления бонусов за вступление в группу. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * Пользователь с указанным идентификатором социальной сети состоит в группе  **invite содержит в id идентификатор пользователя**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_profile_vk_group_apply(invite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoyaltyVkId invite: (required)
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_loyalty_mechanics_profile_vk_group_apply_with_http_info(invite, **kwargs)  # noqa: E501
        else:
            (data) = self.post_loyalty_mechanics_profile_vk_group_apply_with_http_info(invite, **kwargs)  # noqa: E501
            return data

    def post_loyalty_mechanics_profile_vk_group_apply_with_http_info(self, invite, **kwargs):  # noqa: E501
        """Запрос начисления бонусов за вступление в группу  # noqa: E501

        Запрос начисления бонусов за вступление в группу. При запросе производится проверка следующих условий: * К аккаунту x-uid привязана карта лояльности * Ранее по данной карте не производилось начислений бонусов по данной механике * Пользователь с указанным идентификатором социальной сети состоит в группе  **invite содержит в id идентификатор пользователя**   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_loyalty_mechanics_profile_vk_group_apply_with_http_info(invite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoyaltyVkId invite: (required)
        :return: LoyaltyHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invite']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_loyalty_mechanics_profile_vk_group_apply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invite' is set
        if ('invite' not in params or
                params['invite'] is None):
            raise ValueError("Missing the required parameter `invite` when calling `post_loyalty_mechanics_profile_vk_group_apply`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invite' in params:
            body_params = params['invite']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/loyalty/mechanics/profile/vk/group/apply/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoyaltyHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
