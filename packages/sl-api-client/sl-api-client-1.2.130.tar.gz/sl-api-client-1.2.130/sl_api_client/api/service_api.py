# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class ServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_service_groups_by_groupid(self, group_id, **kwargs):  # noqa: E501
        """delete_service_groups_by_groupid  # noqa: E501

        Удаление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_groups_by_groupid(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def delete_service_groups_by_groupid_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """delete_service_groups_by_groupid  # noqa: E501

        Удаление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_groups_by_groupid_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_groups_by_groupid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_service_groups_by_groupid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/groups/{groupId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_items_by_itemid(self, item_id, **kwargs):  # noqa: E501
        """delete_service_items_by_itemid  # noqa: E501

        Удаление услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_items_by_itemid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def delete_service_items_by_itemid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """delete_service_items_by_itemid  # noqa: E501

        Удаление услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_items_by_itemid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_service_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/items/{itemId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_price(self, **kwargs):  # noqa: E501
        """delete_service_price  # noqa: E501

        Удаление прайса. По отдельности shopId и serviceId не являются обязательными, но хотя бы один из них должен быть установлен.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_price(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shop_id: Идентификатор магазина
        :param str service_id: Идентификатор услуги
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_price_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_price_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_service_price_with_http_info(self, **kwargs):  # noqa: E501
        """delete_service_price  # noqa: E501

        Удаление прайса. По отдельности shopId и serviceId не являются обязательными, но хотя бы один из них должен быть установлен.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_price_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shop_id: Идентификатор магазина
        :param str service_id: Идентификатор услуги
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shop_id', 'service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_price" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'shop_id' in params:
            query_params.append(('shopId', params['shop_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/price/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """delete_service_properties_by_propertykey  # noqa: E501

        Удаление свойства услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def delete_service_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """delete_service_properties_by_propertykey  # noqa: E501

        Удаление свойства услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_service_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/properties/{propertyKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_resources_by_resourceid(self, item_id, **kwargs):  # noqa: E501
        """delete_service_resources_by_resourceid  # noqa: E501

        Удаление ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_by_resourceid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_resources_by_resourceid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_resources_by_resourceid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def delete_service_resources_by_resourceid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """delete_service_resources_by_resourceid  # noqa: E501

        Удаление ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_by_resourceid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_resources_by_resourceid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_service_resources_by_resourceid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/{resourceId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_resources_items(self, **kwargs):  # noqa: E501
        """delete_service_resources_items  # noqa: E501

        Удаление доступности услуг ресурса. По отдельности serviceId и resourceId не являются обязательными, но хотя бы один из них должен быть установлен.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_id: Идентификатор ресурса
        :param str service_id: Идентификатор услуги
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_resources_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_resources_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_service_resources_items_with_http_info(self, **kwargs):  # noqa: E501
        """delete_service_resources_items  # noqa: E501

        Удаление доступности услуг ресурса. По отдельности serviceId и resourceId не являются обязательными, но хотя бы один из них должен быть установлен.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_id: Идентификатор ресурса
        :param str service_id: Идентификатор услуги
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id', 'service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_resources_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'resource_id' in params:
            query_params.append(('resourceId', params['resource_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/items/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_resources_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """delete_service_resources_properties_by_propertykey  # noqa: E501

        Удаление свойства ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_resources_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_resources_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def delete_service_resources_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """delete_service_resources_properties_by_propertykey  # noqa: E501

        Удаление свойства ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_resources_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_service_resources_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/properties/{propertyKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_resources_time_by_resourceid_by_shopid_date_by_date(self, item_id, shop_id, _date, **kwargs):  # noqa: E501
        """delete_service_resources_time_by_resourceid_by_shopid_date_by_date  # noqa: E501

        Удаление расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_time_by_resourceid_by_shopid_date_by_date(item_id, shop_id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str _date: Дата рассписания по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, **kwargs)  # noqa: E501
            return data

    def delete_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(self, item_id, shop_id, _date, **kwargs):  # noqa: E501
        """delete_service_resources_time_by_resourceid_by_shopid_date_by_date  # noqa: E501

        Удаление расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str _date: Дата рассписания по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'shop_id', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_resources_time_by_resourceid_by_shopid_date_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501
        # verify the required parameter 'shop_id' is set
        if ('shop_id' not in params or
                params['shop_id'] is None):
            raise ValueError("Missing the required parameter `shop_id` when calling `delete_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `delete_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'shop_id' in params:
            path_params['shopId'] = params['shop_id']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/{resourceId}/{shopId}/date/{date}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_resources_time_by_resourceid_by_shopid_week(self, item_id, shop_id, **kwargs):  # noqa: E501
        """delete_service_resources_time_by_resourceid_by_shopid_week  # noqa: E501

        Удаление расписания ресурса в магазине на неделю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_time_by_resourceid_by_shopid_week(item_id, shop_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, **kwargs)  # noqa: E501
            return data

    def delete_service_resources_time_by_resourceid_by_shopid_week_with_http_info(self, item_id, shop_id, **kwargs):  # noqa: E501
        """delete_service_resources_time_by_resourceid_by_shopid_week  # noqa: E501

        Удаление расписания ресурса в магазине на неделю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'shop_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_resources_time_by_resourceid_by_shopid_week" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_service_resources_time_by_resourceid_by_shopid_week`")  # noqa: E501
        # verify the required parameter 'shop_id' is set
        if ('shop_id' not in params or
                params['shop_id'] is None):
            raise ValueError("Missing the required parameter `shop_id` when calling `delete_service_resources_time_by_resourceid_by_shopid_week`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'shop_id' in params:
            path_params['shopId'] = params['shop_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/{resourceId}/{shopId}/week/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_time(self, **kwargs):  # noqa: E501
        """delete_service_time  # noqa: E501

        Удаление занятых временных слотов. По отдельности shopId и resourceId не являются обязательными, но хотя бы один из них должен быть установлен.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shop_id: Идентификатор магазина
        :param str resource_id: Идентификатор ресурса
        :param int time: Таймштамп начала интервала (Unix)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_service_time_with_http_info(self, **kwargs):  # noqa: E501
        """delete_service_time  # noqa: E501

        Удаление занятых временных слотов. По отдельности shopId и resourceId не являются обязательными, но хотя бы один из них должен быть установлен.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shop_id: Идентификатор магазина
        :param str resource_id: Идентификатор ресурса
        :param int time: Таймштамп начала интервала (Unix)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shop_id', 'resource_id', 'time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'shop_id' in params:
            query_params.append(('shopId', params['shop_id']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resourceId', params['resource_id']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/time/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_groups(self, **kwargs):  # noqa: E501
        """get_service_groups  # noqa: E501

        Запрос списка групп и объектов располагающихся в корне.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ServiceGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_groups_with_http_info(self, **kwargs):  # noqa: E501
        """get_service_groups  # noqa: E501

        Запрос списка групп и объектов располагающихся в корне.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ServiceGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_groups_by_groupid(self, group_id, **kwargs):  # noqa: E501
        """get_service_groups_by_groupid  # noqa: E501

        Получить список объектов указанной группы и саму группу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_groups_by_groupid(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: ServiceGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_service_groups_by_groupid_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """get_service_groups_by_groupid  # noqa: E501

        Получить список объектов указанной группы и саму группу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_groups_by_groupid_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: ServiceGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_groups_by_groupid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_service_groups_by_groupid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/groups/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_items_by_itemid(self, item_id, **kwargs):  # noqa: E501
        """get_service_items_by_itemid  # noqa: E501

        Получить услугу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_items_by_itemid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: ServiceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_service_items_by_itemid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """get_service_items_by_itemid  # noqa: E501

        Получить услугу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_items_by_itemid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: ServiceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_service_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/items/{itemId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_options(self, **kwargs):  # noqa: E501
        """get_service_options  # noqa: E501

        Запрос списка параметров сервиса.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ServiceOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_options_with_http_info(self, **kwargs):  # noqa: E501
        """get_service_options  # noqa: E501

        Запрос списка параметров сервиса.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ServiceOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/options/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_properties(self, **kwargs):  # noqa: E501
        """get_service_properties  # noqa: E501

        Запрос списка свойств услуг  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_properties_with_http_info(self, **kwargs):  # noqa: E501
        """get_service_properties  # noqa: E501

        Запрос списка свойств услуг  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/properties/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """get_service_properties_by_propertykey  # noqa: E501

        Запрос свойства услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def get_service_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """get_service_properties_by_propertykey  # noqa: E501

        Запрос свойства услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_service_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/properties/{propertyKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources(self, **kwargs):  # noqa: E501
        """get_service_resources  # noqa: E501

        Список ресурсов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[ServiceResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_resources_with_http_info(self, **kwargs):  # noqa: E501
        """get_service_resources  # noqa: E501

        Список ресурсов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[ServiceResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_service_resources`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_service_resources`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources_by_resourceid(self, item_id, **kwargs):  # noqa: E501
        """get_service_resources_by_resourceid  # noqa: E501

        Получить ресурс  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_by_resourceid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :return: ServiceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_by_resourceid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_by_resourceid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_service_resources_by_resourceid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """get_service_resources_by_resourceid  # noqa: E501

        Получить ресурс  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_by_resourceid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :return: ServiceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources_by_resourceid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_service_resources_by_resourceid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/{resourceId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources_properties(self, **kwargs):  # noqa: E501
        """get_service_resources_properties  # noqa: E501

        Запрос списка свойств ресурсов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_resources_properties_with_http_info(self, **kwargs):  # noqa: E501
        """get_service_resources_properties  # noqa: E501

        Запрос списка свойств ресурсов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/properties/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """get_service_resources_properties_by_propertykey  # noqa: E501

        Запрос свойства ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def get_service_resources_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """get_service_resources_properties_by_propertykey  # noqa: E501

        Запрос свойства ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_service_resources_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/properties/{propertyKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources_time_by_resourceid_by_shopid_date(self, item_id, shop_id, begin, end, **kwargs):  # noqa: E501
        """get_service_resources_time_by_resourceid_by_shopid_date  # noqa: E501

        Расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_by_resourceid_by_shopid_date(item_id, shop_id, begin, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str begin: Дата начала выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param str end: Дата окончания выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: list[ServiceDate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_time_by_resourceid_by_shopid_date_with_http_info(item_id, shop_id, begin, end, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_time_by_resourceid_by_shopid_date_with_http_info(item_id, shop_id, begin, end, **kwargs)  # noqa: E501
            return data

    def get_service_resources_time_by_resourceid_by_shopid_date_with_http_info(self, item_id, shop_id, begin, end, **kwargs):  # noqa: E501
        """get_service_resources_time_by_resourceid_by_shopid_date  # noqa: E501

        Расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_by_resourceid_by_shopid_date_with_http_info(item_id, shop_id, begin, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str begin: Дата начала выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param str end: Дата окончания выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: list[ServiceDate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'shop_id', 'begin', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources_time_by_resourceid_by_shopid_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_service_resources_time_by_resourceid_by_shopid_date`")  # noqa: E501
        # verify the required parameter 'shop_id' is set
        if ('shop_id' not in params or
                params['shop_id'] is None):
            raise ValueError("Missing the required parameter `shop_id` when calling `get_service_resources_time_by_resourceid_by_shopid_date`")  # noqa: E501
        # verify the required parameter 'begin' is set
        if ('begin' not in params or
                params['begin'] is None):
            raise ValueError("Missing the required parameter `begin` when calling `get_service_resources_time_by_resourceid_by_shopid_date`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_service_resources_time_by_resourceid_by_shopid_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'shop_id' in params:
            path_params['shopId'] = params['shop_id']  # noqa: E501

        query_params = []
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/{resourceId}/{shopId}/date/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceDate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources_time_by_resourceid_by_shopid_date_by_date(self, item_id, shop_id, _date, **kwargs):  # noqa: E501
        """get_service_resources_time_by_resourceid_by_shopid_date_by_date  # noqa: E501

        Расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_by_resourceid_by_shopid_date_by_date(item_id, shop_id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str _date: Дата рассписания по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: ServiceDate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, **kwargs)  # noqa: E501
            return data

    def get_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(self, item_id, shop_id, _date, **kwargs):  # noqa: E501
        """get_service_resources_time_by_resourceid_by_shopid_date_by_date  # noqa: E501

        Расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str _date: Дата рассписания по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: ServiceDate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'shop_id', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources_time_by_resourceid_by_shopid_date_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501
        # verify the required parameter 'shop_id' is set
        if ('shop_id' not in params or
                params['shop_id'] is None):
            raise ValueError("Missing the required parameter `shop_id` when calling `get_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `get_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'shop_id' in params:
            path_params['shopId'] = params['shop_id']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/{resourceId}/{shopId}/date/{date}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceDate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources_time_by_resourceid_by_shopid_week(self, item_id, shop_id, **kwargs):  # noqa: E501
        """get_service_resources_time_by_resourceid_by_shopid_week  # noqa: E501

        Расписания ресурса в магазине на неделю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_by_resourceid_by_shopid_week(item_id, shop_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :return: ServiceWeek
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, **kwargs)  # noqa: E501
            return data

    def get_service_resources_time_by_resourceid_by_shopid_week_with_http_info(self, item_id, shop_id, **kwargs):  # noqa: E501
        """get_service_resources_time_by_resourceid_by_shopid_week  # noqa: E501

        Расписания ресурса в магазине на неделю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :return: ServiceWeek
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'shop_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources_time_by_resourceid_by_shopid_week" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_service_resources_time_by_resourceid_by_shopid_week`")  # noqa: E501
        # verify the required parameter 'shop_id' is set
        if ('shop_id' not in params or
                params['shop_id'] is None):
            raise ValueError("Missing the required parameter `shop_id` when calling `get_service_resources_time_by_resourceid_by_shopid_week`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'shop_id' in params:
            path_params['shopId'] = params['shop_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/{resourceId}/{shopId}/week/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceWeek',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_resources_time_date(self, **kwargs):  # noqa: E501
        """get_service_resources_time_date  # noqa: E501

        Расписание по датам. Все параметры не являются обязательными и применяются как пересечение (and)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_date(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shop_id: Идентификатор магазина
        :param str resource_id: Идентификатор ресурса
        :param str begin: Дата начала выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21
        :param str end: Дата окончания выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21
        :return: list[ServiceDateLinked]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_resources_time_date_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_resources_time_date_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_resources_time_date_with_http_info(self, **kwargs):  # noqa: E501
        """get_service_resources_time_date  # noqa: E501

        Расписание по датам. Все параметры не являются обязательными и применяются как пересечение (and)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_resources_time_date_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shop_id: Идентификатор магазина
        :param str resource_id: Идентификатор ресурса
        :param str begin: Дата начала выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21
        :param str end: Дата окончания выборки включительно по RFC 3339, section 5.6, for example, 2017-07-21
        :return: list[ServiceDateLinked]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shop_id', 'resource_id', 'begin', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_resources_time_date" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'shop_id' in params:
            query_params.append(('shopId', params['shop_id']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resourceId', params['resource_id']))  # noqa: E501
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/date/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceDateLinked]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_groups(self, body, **kwargs):  # noqa: E501
        """post_service_groups  # noqa: E501

        Создание группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceGroup body: (required)
        :return: ServiceGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_groups  # noqa: E501

        Создание группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceGroup body: (required)
        :return: ServiceGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/groups/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_groups_by_groupid(self, group_id, body, **kwargs):  # noqa: E501
        """post_service_groups_by_groupid  # noqa: E501

        Обновление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_groups_by_groupid(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :param ServiceGroup body: (required)
        :return: ServiceGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_groups_by_groupid_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_groups_by_groupid_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def post_service_groups_by_groupid_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """post_service_groups_by_groupid  # noqa: E501

        Обновление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_groups_by_groupid_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :param ServiceGroup body: (required)
        :return: ServiceGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_groups_by_groupid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `post_service_groups_by_groupid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_groups_by_groupid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/groups/{groupId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_items(self, body, **kwargs):  # noqa: E501
        """post_service_items  # noqa: E501

        Создание услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_items(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceItem body: (required)
        :return: ServiceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_items_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_items_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_items_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_items  # noqa: E501

        Создание услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_items_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceItem body: (required)
        :return: ServiceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_items_by_itemid(self, item_id, body, **kwargs):  # noqa: E501
        """post_service_items_by_itemid  # noqa: E501

        Обновление услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_items_by_itemid(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param ServiceItem body: (required)
        :return: ServiceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_items_by_itemid_with_http_info(item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_items_by_itemid_with_http_info(item_id, body, **kwargs)  # noqa: E501
            return data

    def post_service_items_by_itemid_with_http_info(self, item_id, body, **kwargs):  # noqa: E501
        """post_service_items_by_itemid  # noqa: E501

        Обновление услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_items_by_itemid_with_http_info(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param ServiceItem body: (required)
        :return: ServiceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_service_items_by_itemid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/items/{itemId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_price(self, body, **kwargs):  # noqa: E501
        """post_service_price  # noqa: E501

        Вставка или обновление прайса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_price(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ServicePriceInShop] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_price_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_price_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_price_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_price  # noqa: E501

        Вставка или обновление прайса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_price_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ServicePriceInShop] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_price" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_price`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/price/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_price_query(self, body, **kwargs):  # noqa: E501
        """post_service_price_query  # noqa: E501

        Запрос поиска стоимости услуг  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_price_query(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServicePriceQuery body: (required)
        :return: list[ServicePriceInShopResponce]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_price_query_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_price_query_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_price_query_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_price_query  # noqa: E501

        Запрос поиска стоимости услуг  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_price_query_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServicePriceQuery body: (required)
        :return: list[ServicePriceInShopResponce]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_price_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_price_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/price/query/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServicePriceInShopResponce]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_properties(self, body, **kwargs):  # noqa: E501
        """post_service_properties  # noqa: E501

        Создание свойства для услуг  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_properties(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_properties_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_properties_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_properties_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_properties  # noqa: E501

        Создание свойства для услуг  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_properties_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/properties/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_properties_by_propertykey(self, property_key, body, **kwargs):  # noqa: E501
        """post_service_properties_by_propertykey  # noqa: E501

        Обновление свойства услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_properties_by_propertykey(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
            return data

    def post_service_properties_by_propertykey_with_http_info(self, property_key, body, **kwargs):  # noqa: E501
        """post_service_properties_by_propertykey  # noqa: E501

        Обновление свойства услуги  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_properties_by_propertykey_with_http_info(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `post_service_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/properties/{propertyKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources(self, body, **kwargs):  # noqa: E501
        """post_service_resources  # noqa: E501

        Создание ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceResource body: (required)
        :return: ServiceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_resources  # noqa: E501

        Создание ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceResource body: (required)
        :return: ServiceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources_by_resourceid(self, item_id, body, **kwargs):  # noqa: E501
        """post_service_resources_by_resourceid  # noqa: E501

        Обновление ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_by_resourceid(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param ServiceResource body: (required)
        :return: ServiceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_by_resourceid_with_http_info(item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_by_resourceid_with_http_info(item_id, body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_by_resourceid_with_http_info(self, item_id, body, **kwargs):  # noqa: E501
        """post_service_resources_by_resourceid  # noqa: E501

        Обновление ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_by_resourceid_with_http_info(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param ServiceResource body: (required)
        :return: ServiceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources_by_resourceid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_service_resources_by_resourceid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources_by_resourceid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/{resourceId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources_items(self, body, **kwargs):  # noqa: E501
        """post_service_resources_items  # noqa: E501

        Вставка или обновление доступности в услуг ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_items(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ServiceServiceInResource] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_items_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_items_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_items_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_resources_items  # noqa: E501

        Вставка или обновление доступности в услуг ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_items_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ServiceServiceInResource] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources_items_query(self, body, **kwargs):  # noqa: E501
        """post_service_resources_items_query  # noqa: E501

        Запрос поиска ресурсов по услугам  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_items_query(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceResourceQuery body: (required)
        :return: list[ServiceServiceInResourceResponce]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_items_query_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_items_query_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_items_query_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_resources_items_query  # noqa: E501

        Запрос поиска ресурсов по услугам  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_items_query_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceResourceQuery body: (required)
        :return: list[ServiceServiceInResourceResponce]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources_items_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources_items_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/items/query/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceServiceInResourceResponce]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources_properties(self, body, **kwargs):  # noqa: E501
        """post_service_resources_properties  # noqa: E501

        Создание свойства для ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_properties(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_properties_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_properties_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_properties_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_resources_properties  # noqa: E501

        Создание свойства для ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_properties_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/properties/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources_properties_by_propertykey(self, property_key, body, **kwargs):  # noqa: E501
        """post_service_resources_properties_by_propertykey  # noqa: E501

        Обновление свойства ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_properties_by_propertykey(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_properties_by_propertykey_with_http_info(self, property_key, body, **kwargs):  # noqa: E501
        """post_service_resources_properties_by_propertykey  # noqa: E501

        Обновление свойства ресурса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_properties_by_propertykey_with_http_info(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `post_service_resources_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/properties/{propertyKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources_time_by_resourceid_by_shopid_date_by_date(self, item_id, shop_id, _date, body, **kwargs):  # noqa: E501
        """post_service_resources_time_by_resourceid_by_shopid_date_by_date  # noqa: E501

        Вставка или обновление расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_time_by_resourceid_by_shopid_date_by_date(item_id, shop_id, _date, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str _date: Дата рассписания по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param ServiceDay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(self, item_id, shop_id, _date, body, **kwargs):  # noqa: E501
        """post_service_resources_time_by_resourceid_by_shopid_date_by_date  # noqa: E501

        Вставка или обновление расписания ресурса в магазине по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_time_by_resourceid_by_shopid_date_by_date_with_http_info(item_id, shop_id, _date, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param str _date: Дата рассписания по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param ServiceDay body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'shop_id', '_date', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources_time_by_resourceid_by_shopid_date_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501
        # verify the required parameter 'shop_id' is set
        if ('shop_id' not in params or
                params['shop_id'] is None):
            raise ValueError("Missing the required parameter `shop_id` when calling `post_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `post_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources_time_by_resourceid_by_shopid_date_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'shop_id' in params:
            path_params['shopId'] = params['shop_id']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/{resourceId}/{shopId}/date/{date}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_resources_time_by_resourceid_by_shopid_week(self, item_id, shop_id, body, **kwargs):  # noqa: E501
        """post_service_resources_time_by_resourceid_by_shopid_week  # noqa: E501

        Вставка или обновление расписания ресурса в магазине на неделю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_time_by_resourceid_by_shopid_week(item_id, shop_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param ServiceWeek body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, body, **kwargs)  # noqa: E501
            return data

    def post_service_resources_time_by_resourceid_by_shopid_week_with_http_info(self, item_id, shop_id, body, **kwargs):  # noqa: E501
        """post_service_resources_time_by_resourceid_by_shopid_week  # noqa: E501

        Вставка или обновление расписания ресурса в магазине на неделю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_resources_time_by_resourceid_by_shopid_week_with_http_info(item_id, shop_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор ресурса (required)
        :param str shop_id: Идентификатор магазина (required)
        :param ServiceWeek body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'shop_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_resources_time_by_resourceid_by_shopid_week" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_service_resources_time_by_resourceid_by_shopid_week`")  # noqa: E501
        # verify the required parameter 'shop_id' is set
        if ('shop_id' not in params or
                params['shop_id'] is None):
            raise ValueError("Missing the required parameter `shop_id` when calling `post_service_resources_time_by_resourceid_by_shopid_week`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_resources_time_by_resourceid_by_shopid_week`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'shop_id' in params:
            path_params['shopId'] = params['shop_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/resources/time/{resourceId}/{shopId}/week/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_time(self, body, **kwargs):  # noqa: E501
        """post_service_time  # noqa: E501

        Вставка или обновление занятых временных слотов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ServiceTimeblock] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_time  # noqa: E501

        Вставка или обновление занятых временных слотов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ServiceTimeblock] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/time/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_service_time_query(self, body, **kwargs):  # noqa: E501
        """post_service_time_query  # noqa: E501

        Запрос поиска временных слотов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_time_query(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceTimeQuery body: (required)
        :return: list[ServiceTimeblock]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_service_time_query_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_service_time_query_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_service_time_query_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_service_time_query  # noqa: E501

        Запрос поиска временных слотов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_service_time_query_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceTimeQuery body: (required)
        :return: list[ServiceTimeblock]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_service_time_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_service_time_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/service/time/query/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceTimeblock]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
