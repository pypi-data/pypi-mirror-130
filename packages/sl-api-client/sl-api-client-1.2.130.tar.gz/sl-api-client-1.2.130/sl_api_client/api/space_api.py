# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class SpaceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_dynamic_space_by_spacekey(self, space_key, **kwargs):  # noqa: E501
        """Удалить пространство  # noqa: E501

        Удаление пространства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_space_by_spacekey(space_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dynamic_space_by_spacekey_with_http_info(space_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dynamic_space_by_spacekey_with_http_info(space_key, **kwargs)  # noqa: E501
            return data

    def delete_dynamic_space_by_spacekey_with_http_info(self, space_key, **kwargs):  # noqa: E501
        """Удалить пространство  # noqa: E501

        Удаление пространства пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_space_by_spacekey_with_http_info(space_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dynamic_space_by_spacekey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'space_key' is set
        if ('space_key' not in params or
                params['space_key'] is None):
            raise ValueError("Missing the required parameter `space_key` when calling `delete_dynamic_space_by_spacekey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'space_key' in params:
            path_params['spaceKey'] = params['space_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/{spaceKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dynamic_space_by_spacekey_tuples_by_tupleid(self, space_key, tuple_id, space_version, **kwargs):  # noqa: E501
        """Удалить кортеж  # noqa: E501

        Удалить кортеж из системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_space_by_spacekey_tuples_by_tupleid(space_key, tuple_id, space_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param str tuple_id: Идентификатор кортежа (required)
        :param int space_version: Версия пространства пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, **kwargs)  # noqa: E501
            return data

    def delete_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(self, space_key, tuple_id, space_version, **kwargs):  # noqa: E501
        """Удалить кортеж  # noqa: E501

        Удалить кортеж из системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param str tuple_id: Идентификатор кортежа (required)
        :param int space_version: Версия пространства пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_key', 'tuple_id', 'space_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dynamic_space_by_spacekey_tuples_by_tupleid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'space_key' is set
        if ('space_key' not in params or
                params['space_key'] is None):
            raise ValueError("Missing the required parameter `space_key` when calling `delete_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501
        # verify the required parameter 'tuple_id' is set
        if ('tuple_id' not in params or
                params['tuple_id'] is None):
            raise ValueError("Missing the required parameter `tuple_id` when calling `delete_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501
        # verify the required parameter 'space_version' is set
        if ('space_version' not in params or
                params['space_version'] is None):
            raise ValueError("Missing the required parameter `space_version` when calling `delete_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'space_key' in params:
            path_params['spaceKey'] = params['space_key']  # noqa: E501
        if 'tuple_id' in params:
            path_params['tupleId'] = params['tuple_id']  # noqa: E501

        query_params = []
        if 'space_version' in params:
            query_params.append(('spaceVersion', params['space_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/{spaceKey}/tuples/{tupleId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_space_by_spacekey(self, space_key, **kwargs):  # noqa: E501
        """Запросить информацию о пространстве  # noqa: E501

        Запрос информации о пространстве по ключу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_space_by_spacekey(space_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :return: UserSpaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_space_by_spacekey_with_http_info(space_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_space_by_spacekey_with_http_info(space_key, **kwargs)  # noqa: E501
            return data

    def get_dynamic_space_by_spacekey_with_http_info(self, space_key, **kwargs):  # noqa: E501
        """Запросить информацию о пространстве  # noqa: E501

        Запрос информации о пространстве по ключу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_space_by_spacekey_with_http_info(space_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :return: UserSpaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_space_by_spacekey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'space_key' is set
        if ('space_key' not in params or
                params['space_key'] is None):
            raise ValueError("Missing the required parameter `space_key` when calling `get_dynamic_space_by_spacekey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'space_key' in params:
            path_params['spaceKey'] = params['space_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/{spaceKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSpaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dynamic_space_by_spacekey_tuples_by_tupleid(self, space_key, tuple_id, space_version, **kwargs):  # noqa: E501
        """Запросить кортеж пространства  # noqa: E501

        Запрос кортежа пространства по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_space_by_spacekey_tuples_by_tupleid(space_key, tuple_id, space_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param str tuple_id: Идентификатор кортежа (required)
        :param int space_version: Версия пространства пользователя (required)
        :return: Tuple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, **kwargs)  # noqa: E501
            return data

    def get_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(self, space_key, tuple_id, space_version, **kwargs):  # noqa: E501
        """Запросить кортеж пространства  # noqa: E501

        Запрос кортежа пространства по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param str tuple_id: Идентификатор кортежа (required)
        :param int space_version: Версия пространства пользователя (required)
        :return: Tuple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_key', 'tuple_id', 'space_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dynamic_space_by_spacekey_tuples_by_tupleid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'space_key' is set
        if ('space_key' not in params or
                params['space_key'] is None):
            raise ValueError("Missing the required parameter `space_key` when calling `get_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501
        # verify the required parameter 'tuple_id' is set
        if ('tuple_id' not in params or
                params['tuple_id'] is None):
            raise ValueError("Missing the required parameter `tuple_id` when calling `get_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501
        # verify the required parameter 'space_version' is set
        if ('space_version' not in params or
                params['space_version'] is None):
            raise ValueError("Missing the required parameter `space_version` when calling `get_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'space_key' in params:
            path_params['spaceKey'] = params['space_key']  # noqa: E501
        if 'tuple_id' in params:
            path_params['tupleId'] = params['tuple_id']  # noqa: E501

        query_params = []
        if 'space_version' in params:
            query_params.append(('spaceVersion', params['space_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/{spaceKey}/tuples/{tupleId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tuple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_space(self, body, **kwargs):  # noqa: E501
        """Создать пространство  # noqa: E501

        Создание пространства в зависимости от spaceKey и версии схемы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserSpace body: (required)
        :return: UserSpaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_space_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_space_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_space_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создать пространство  # noqa: E501

        Создание пространства в зависимости от spaceKey и версии схемы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserSpace body: (required)
        :return: UserSpaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSpaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_space_by_spacekey_query(self, space_key, space_version, body, **kwargs):  # noqa: E501
        """Запросить кортежи пространства  # noqa: E501

        Запрос кортежей пространства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space_by_spacekey_query(space_key, space_version, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param int space_version: Версия пространства пользователя (required)
        :param TupleQuery body: (required)
        :return: list[Tuple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_space_by_spacekey_query_with_http_info(space_key, space_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_space_by_spacekey_query_with_http_info(space_key, space_version, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_space_by_spacekey_query_with_http_info(self, space_key, space_version, body, **kwargs):  # noqa: E501
        """Запросить кортежи пространства  # noqa: E501

        Запрос кортежей пространства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space_by_spacekey_query_with_http_info(space_key, space_version, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param int space_version: Версия пространства пользователя (required)
        :param TupleQuery body: (required)
        :return: list[Tuple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_key', 'space_version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_space_by_spacekey_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'space_key' is set
        if ('space_key' not in params or
                params['space_key'] is None):
            raise ValueError("Missing the required parameter `space_key` when calling `post_dynamic_space_by_spacekey_query`")  # noqa: E501
        # verify the required parameter 'space_version' is set
        if ('space_version' not in params or
                params['space_version'] is None):
            raise ValueError("Missing the required parameter `space_version` when calling `post_dynamic_space_by_spacekey_query`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_space_by_spacekey_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'space_key' in params:
            path_params['spaceKey'] = params['space_key']  # noqa: E501

        query_params = []
        if 'space_version' in params:
            query_params.append(('spaceVersion', params['space_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/{spaceKey}/query/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Tuple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_space_by_spacekey_tuples(self, space_key, space_version, body, **kwargs):  # noqa: E501
        """Вставить кортеж  # noqa: E501

        Вставка кортежа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space_by_spacekey_tuples(space_key, space_version, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param int space_version: Версия пространства пользователя (required)
        :param Tuple body: (required)
        :return: Tuple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_space_by_spacekey_tuples_with_http_info(space_key, space_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_space_by_spacekey_tuples_with_http_info(space_key, space_version, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_space_by_spacekey_tuples_with_http_info(self, space_key, space_version, body, **kwargs):  # noqa: E501
        """Вставить кортеж  # noqa: E501

        Вставка кортежа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space_by_spacekey_tuples_with_http_info(space_key, space_version, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param int space_version: Версия пространства пользователя (required)
        :param Tuple body: (required)
        :return: Tuple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_key', 'space_version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_space_by_spacekey_tuples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'space_key' is set
        if ('space_key' not in params or
                params['space_key'] is None):
            raise ValueError("Missing the required parameter `space_key` when calling `post_dynamic_space_by_spacekey_tuples`")  # noqa: E501
        # verify the required parameter 'space_version' is set
        if ('space_version' not in params or
                params['space_version'] is None):
            raise ValueError("Missing the required parameter `space_version` when calling `post_dynamic_space_by_spacekey_tuples`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_space_by_spacekey_tuples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'space_key' in params:
            path_params['spaceKey'] = params['space_key']  # noqa: E501

        query_params = []
        if 'space_version' in params:
            query_params.append(('spaceVersion', params['space_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/{spaceKey}/tuples/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tuple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dynamic_space_by_spacekey_tuples_by_tupleid(self, space_key, tuple_id, space_version, body, **kwargs):  # noqa: E501
        """Обновить кортеж  # noqa: E501

        Обновляет ранее созданный кортеж   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space_by_spacekey_tuples_by_tupleid(space_key, tuple_id, space_version, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param str tuple_id: Идентификатор кортежа (required)
        :param int space_version: Версия пространства пользователя (required)
        :param Tuple body: (required)
        :return: Tuple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, body, **kwargs)  # noqa: E501
            return data

    def post_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(self, space_key, tuple_id, space_version, body, **kwargs):  # noqa: E501
        """Обновить кортеж  # noqa: E501

        Обновляет ранее созданный кортеж   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dynamic_space_by_spacekey_tuples_by_tupleid_with_http_info(space_key, tuple_id, space_version, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str space_key: Ключ пространства пользователя (required)
        :param str tuple_id: Идентификатор кортежа (required)
        :param int space_version: Версия пространства пользователя (required)
        :param Tuple body: (required)
        :return: Tuple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_key', 'tuple_id', 'space_version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dynamic_space_by_spacekey_tuples_by_tupleid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'space_key' is set
        if ('space_key' not in params or
                params['space_key'] is None):
            raise ValueError("Missing the required parameter `space_key` when calling `post_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501
        # verify the required parameter 'tuple_id' is set
        if ('tuple_id' not in params or
                params['tuple_id'] is None):
            raise ValueError("Missing the required parameter `tuple_id` when calling `post_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501
        # verify the required parameter 'space_version' is set
        if ('space_version' not in params or
                params['space_version'] is None):
            raise ValueError("Missing the required parameter `space_version` when calling `post_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dynamic_space_by_spacekey_tuples_by_tupleid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'space_key' in params:
            path_params['spaceKey'] = params['space_key']  # noqa: E501
        if 'tuple_id' in params:
            path_params['tupleId'] = params['tuple_id']  # noqa: E501

        query_params = []
        if 'space_version' in params:
            query_params.append(('spaceVersion', params['space_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/dynamic/space/{spaceKey}/tuples/{tupleId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tuple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
