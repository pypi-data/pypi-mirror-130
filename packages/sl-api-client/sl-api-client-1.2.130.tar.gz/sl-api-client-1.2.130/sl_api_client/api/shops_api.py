# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class ShopsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_static_shops_groups_by_groupid(self, group_id, **kwargs):  # noqa: E501
        """Удаление группы  # noqa: E501

        Удаление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_groups_by_groupid(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_shops_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_shops_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def delete_static_shops_groups_by_groupid_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Удаление группы  # noqa: E501

        Удаление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_groups_by_groupid_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_shops_groups_by_groupid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_static_shops_groups_by_groupid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/{groupId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_static_shops_groups_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_groups_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_shops_groups_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_shops_groups_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def delete_static_shops_groups_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства  # noqa: E501

        Удаление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_groups_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_shops_groups_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_static_shops_groups_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/properties/{propertyKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_static_shops_items_by_itemid(self, item_id, **kwargs):  # noqa: E501
        """Удаление магазина  # noqa: E501

        Удаление магазина  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_items_by_itemid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_shops_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_shops_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def delete_static_shops_items_by_itemid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Удаление магазина  # noqa: E501

        Удаление магазина  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_items_by_itemid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_shops_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_static_shops_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/items/{itemId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid(self, item_id, catalog_item_id, **kwargs):  # noqa: E501
        """Удаление связи магазина и товара  # noqa: E501

        Удаление связи магазина и товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid(item_id, catalog_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param str catalog_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(item_id, catalog_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(item_id, catalog_item_id, **kwargs)  # noqa: E501
            return data

    def delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(self, item_id, catalog_item_id, **kwargs):  # noqa: E501
        """Удаление связи магазина и товара  # noqa: E501

        Удаление связи магазина и товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(item_id, catalog_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param str catalog_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'catalog_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid`")  # noqa: E501
        # verify the required parameter 'catalog_item_id' is set
        if ('catalog_item_id' not in params or
                params['catalog_item_id'] is None):
            raise ValueError("Missing the required parameter `catalog_item_id` when calling `delete_static_shops_items_by_itemid_catalogitem_by_catalogitemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'catalog_item_id' in params:
            path_params['CatalogItemId'] = params['catalog_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/items/{itemId}/catalogItem/{CatalogItemId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_static_shops_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства магазина  # noqa: E501

        Удаление свойства магазина  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_shops_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_shops_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def delete_static_shops_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Удаление свойства магазина  # noqa: E501

        Удаление свойства магазина  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_shops_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_shops_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_static_shops_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/properties/{propertyKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_shops_groups(self, **kwargs):  # noqa: E501
        """Запрос списка групп и объектов корневой группы  # noqa: E501

        Запрос списка свойств элементов и объектов в корневой группе магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ShopsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_shops_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_static_shops_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_static_shops_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка групп и объектов корневой группы  # noqa: E501

        Запрос списка свойств элементов и объектов в корневой группе магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ShopsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_shops_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_shops_groups_by_groupid(self, group_id, **kwargs):  # noqa: E501
        """Получить список объектов указанной группы  # noqa: E501

        Получить список объектов указанной группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups_by_groupid(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: ShopsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_shops_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_shops_groups_by_groupid_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_static_shops_groups_by_groupid_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Получить список объектов указанной группы  # noqa: E501

        Получить список объектов указанной группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups_by_groupid_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :return: ShopsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_shops_groups_by_groupid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_static_shops_groups_by_groupid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_shops_groups_properties(self, **kwargs):  # noqa: E501
        """Запрос списка свойств каждого элемента в группе (у магазинов)  # noqa: E501

        Запрос списка свойств групп магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_shops_groups_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_static_shops_groups_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_static_shops_groups_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка свойств каждого элемента в группе (у магазинов)  # noqa: E501

        Запрос списка свойств групп магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_shops_groups_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/properties/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_shops_groups_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства группы  # noqa: E501

        Запрос свойства группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_shops_groups_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_shops_groups_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def get_static_shops_groups_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства группы  # noqa: E501

        Запрос свойства группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_groups_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_shops_groups_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_static_shops_groups_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/properties/{propertyKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_shops_items_by_itemid(self, item_id, **kwargs):  # noqa: E501
        """Запрос информации о магазине  # noqa: E501

        Запрос информации о магазине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_items_by_itemid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: ShopWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_shops_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_shops_items_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_static_shops_items_by_itemid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Запрос информации о магазине  # noqa: E501

        Запрос информации о магазине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_items_by_itemid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: ShopWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_shops_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_static_shops_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/items/{itemId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_shops_properties(self, **kwargs):  # noqa: E501
        """Запрос списка свойств магазинов  # noqa: E501

        Запрос списка свойств магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_shops_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_static_shops_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_static_shops_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка свойств магазинов  # noqa: E501

        Запрос списка свойств магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[IProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_shops_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/properties/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_shops_properties_by_propertykey(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства  # noqa: E501

        Запрос свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_properties_by_propertykey(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_shops_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_shops_properties_by_propertykey_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def get_static_shops_properties_by_propertykey_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Запрос свойства  # noqa: E501

        Запрос свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_shops_properties_by_propertykey_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_shops_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_static_shops_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/properties/{propertyKey}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_groups(self, body, **kwargs):  # noqa: E501
        """Создание группы  # noqa: E501

        Создание группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShopGroupWithRelations body: (required)
        :return: ShopGroupWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание группы  # noqa: E501

        Создание группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShopGroupWithRelations body: (required)
        :return: ShopGroupWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopGroupWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_groups_by_groupid(self, group_id, body, **kwargs):  # noqa: E501
        """Обновление группы  # noqa: E501

        Обновление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups_by_groupid(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :param ShopGroupWithRelations body: (required)
        :return: ShopGroupWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_groups_by_groupid_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_groups_by_groupid_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_groups_by_groupid_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """Обновление группы  # noqa: E501

        Обновление группы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups_by_groupid_with_http_info(group_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Идентификатор группы (required)
        :param ShopGroupWithRelations body: (required)
        :return: ShopGroupWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_groups_by_groupid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `post_static_shops_groups_by_groupid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_groups_by_groupid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/{groupId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopGroupWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_groups_properties(self, body, **kwargs):  # noqa: E501
        """Создание свойства для групп магазинов организации  # noqa: E501

        Создание свойства для групп магазинов организации  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups_properties(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_groups_properties_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_groups_properties_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_groups_properties_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание свойства для групп магазинов организации  # noqa: E501

        Создание свойства для групп магазинов организации  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups_properties_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_groups_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_groups_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/properties/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_groups_properties_by_propertykey(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups_properties_by_propertykey(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_groups_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_groups_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_groups_properties_by_propertykey_with_http_info(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_groups_properties_by_propertykey_with_http_info(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_groups_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `post_static_shops_groups_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_groups_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/groups/properties/{propertyKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_items(self, body, **kwargs):  # noqa: E501
        """Создание нового магазина  # noqa: E501

        Добавление нового магазина в систему  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShopWithRelations body: (required)
        :return: ShopWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_items_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_items_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_items_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового магазина  # noqa: E501

        Добавление нового магазина в систему  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShopWithRelations body: (required)
        :return: ShopWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_items_by_itemid(self, item_id, body, **kwargs):  # noqa: E501
        """Обновление магазина  # noqa: E501

        Обновление магазина  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items_by_itemid(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param ShopWithRelations body: (required)
        :return: ShopWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_items_by_itemid_with_http_info(item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_items_by_itemid_with_http_info(item_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_items_by_itemid_with_http_info(self, item_id, body, **kwargs):  # noqa: E501
        """Обновление магазина  # noqa: E501

        Обновление магазина  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items_by_itemid_with_http_info(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param ShopWithRelations body: (required)
        :return: ShopWithRelations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_items_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_static_shops_items_by_itemid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_items_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/items/{itemId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopWithRelations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_items_by_itemid_catalogitem(self, item_id, body, **kwargs):  # noqa: E501
        """Создание связи магазина и товара  # noqa: E501

        Создание связи магазина и товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items_by_itemid_catalogitem(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param CatalogItemInShop body: (required)
        :return: CatalogItemInShop
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_items_by_itemid_catalogitem_with_http_info(item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_items_by_itemid_catalogitem_with_http_info(item_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_items_by_itemid_catalogitem_with_http_info(self, item_id, body, **kwargs):  # noqa: E501
        """Создание связи магазина и товара  # noqa: E501

        Создание связи магазина и товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items_by_itemid_catalogitem_with_http_info(item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param CatalogItemInShop body: (required)
        :return: CatalogItemInShop
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_items_by_itemid_catalogitem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_static_shops_items_by_itemid_catalogitem`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_items_by_itemid_catalogitem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/items/{itemId}/catalogItem/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CatalogItemInShop',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_items_by_itemid_catalogitem_by_catalogitemid(self, item_id, catalog_item_id, body, **kwargs):  # noqa: E501
        """Обновление связи магазина и товара  # noqa: E501

        Обновление связи магазина и товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items_by_itemid_catalogitem_by_catalogitemid(item_id, catalog_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param str catalog_item_id: (required)
        :param CatalogItemInShop body: (required)
        :return: CatalogItemInShop
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(item_id, catalog_item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(item_id, catalog_item_id, body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(self, item_id, catalog_item_id, body, **kwargs):  # noqa: E501
        """Обновление связи магазина и товара  # noqa: E501

        Обновление связи магазина и товара  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_items_by_itemid_catalogitem_by_catalogitemid_with_http_info(item_id, catalog_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param str catalog_item_id: (required)
        :param CatalogItemInShop body: (required)
        :return: CatalogItemInShop
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'catalog_item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_items_by_itemid_catalogitem_by_catalogitemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `post_static_shops_items_by_itemid_catalogitem_by_catalogitemid`")  # noqa: E501
        # verify the required parameter 'catalog_item_id' is set
        if ('catalog_item_id' not in params or
                params['catalog_item_id'] is None):
            raise ValueError("Missing the required parameter `catalog_item_id` when calling `post_static_shops_items_by_itemid_catalogitem_by_catalogitemid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_items_by_itemid_catalogitem_by_catalogitemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'catalog_item_id' in params:
            path_params['CatalogItemId'] = params['catalog_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/items/{itemId}/catalogItem/{CatalogItemId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CatalogItemInShop',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_properties(self, body, **kwargs):  # noqa: E501
        """Создание свойства для магазинов организации  # noqa: E501

        Создание свойства для магазинов организации  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_properties(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_properties_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_properties_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_properties_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание свойства для магазинов организации  # noqa: E501

        Создание свойства для магазинов организации  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_properties_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/properties/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_properties_by_propertykey(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_properties_by_propertykey(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_properties_by_propertykey_with_http_info(property_key, body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_properties_by_propertykey_with_http_info(self, property_key, body, **kwargs):  # noqa: E501
        """Обновление свойства  # noqa: E501

        Обновление свойства  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_properties_by_propertykey_with_http_info(property_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: Идентификатор свойства элемента (required)
        :param IProperty body:  (required)
        :return: IProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_properties_by_propertykey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `post_static_shops_properties_by_propertykey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_properties_by_propertykey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/properties/{propertyKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_query(self, query_shops_search, **kwargs):  # noqa: E501
        """Поиск по магазинам с товарами в наличии  # noqa: E501

        Список магазинов с товарами в наличии  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_query(query_shops_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryShopsSearch query_shops_search: (required)
        :return: list[Shop]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_query_with_http_info(query_shops_search, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_query_with_http_info(query_shops_search, **kwargs)  # noqa: E501
            return data

    def post_static_shops_query_with_http_info(self, query_shops_search, **kwargs):  # noqa: E501
        """Поиск по магазинам с товарами в наличии  # noqa: E501

        Список магазинов с товарами в наличии  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_query_with_http_info(query_shops_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryShopsSearch query_shops_search: (required)
        :return: list[Shop]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_shops_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_shops_search' is set
        if ('query_shops_search' not in params or
                params['query_shops_search'] is None):
            raise ValueError("Missing the required parameter `query_shops_search` when calling `post_static_shops_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query_shops_search' in params:
            body_params = params['query_shops_search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/query/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Shop]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_querywithrelations(self, query_shops_search, **kwargs):  # noqa: E501
        """Поиск по магазинам в наличии которых есть товары с доп свойствами  # noqa: E501

        Ответ на запрос содержит список магазинов в наличии, которых есть товары с дополнительными свойствами. Дополнительные свойства являются опциональными и могут отсутствовать у некоторых товаров.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_querywithrelations(query_shops_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryShopsSearch query_shops_search: (required)
        :return: list[ShopWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_querywithrelations_with_http_info(query_shops_search, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_querywithrelations_with_http_info(query_shops_search, **kwargs)  # noqa: E501
            return data

    def post_static_shops_querywithrelations_with_http_info(self, query_shops_search, **kwargs):  # noqa: E501
        """Поиск по магазинам в наличии которых есть товары с доп свойствами  # noqa: E501

        Ответ на запрос содержит список магазинов в наличии, которых есть товары с дополнительными свойствами. Дополнительные свойства являются опциональными и могут отсутствовать у некоторых товаров.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_querywithrelations_with_http_info(query_shops_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryShopsSearch query_shops_search: (required)
        :return: list[ShopWithRelations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_shops_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_querywithrelations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_shops_search' is set
        if ('query_shops_search' not in params or
                params['query_shops_search'] is None):
            raise ValueError("Missing the required parameter `query_shops_search` when calling `post_static_shops_querywithrelations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query_shops_search' in params:
            body_params = params['query_shops_search']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/queryWithRelations/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ShopWithRelations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_shops_request(self, body, **kwargs):  # noqa: E501
        """Поиск (QueryDSL) с агрегацией собираемых данных  # noqa: E501

        Поиск (QueryDSL) с возможностью агрегации собираемых данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: ShopsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_shops_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_shops_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_static_shops_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Поиск (QueryDSL) с агрегацией собираемых данных  # noqa: E501

        Поиск (QueryDSL) с возможностью агрегации собираемых данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_shops_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: ShopsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_shops_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_shops_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/shops/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShopsSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
