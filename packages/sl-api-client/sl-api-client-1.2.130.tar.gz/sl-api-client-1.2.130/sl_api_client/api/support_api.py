# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class SupportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_support_reason_by_reasonname(self, reason_name, **kwargs):  # noqa: E501
        """Удаление причины обращения  # noqa: E501

        Удаление причины обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_reason_by_reasonname(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_support_reason_by_reasonname_with_http_info(reason_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_support_reason_by_reasonname_with_http_info(reason_name, **kwargs)  # noqa: E501
            return data

    def delete_support_reason_by_reasonname_with_http_info(self, reason_name, **kwargs):  # noqa: E501
        """Удаление причины обращения  # noqa: E501

        Удаление причины обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_reason_by_reasonname_with_http_info(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_support_reason_by_reasonname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `delete_support_reason_by_reasonname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_support_reason_by_reasonname_operator_by_operatorid(self, reason_name, operator_id, **kwargs):  # noqa: E501
        """Удаление оператора  # noqa: E501

        Удаление оператора  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_reason_by_reasonname_operator_by_operatorid(reason_name, operator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, **kwargs)  # noqa: E501
            return data

    def delete_support_reason_by_reasonname_operator_by_operatorid_with_http_info(self, reason_name, operator_id, **kwargs):  # noqa: E501
        """Удаление оператора  # noqa: E501

        Удаление оператора  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name', 'operator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_support_reason_by_reasonname_operator_by_operatorid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `delete_support_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501
        # verify the required parameter 'operator_id' is set
        if ('operator_id' not in params or
                params['operator_id'] is None):
            raise ValueError("Missing the required parameter `operator_id` when calling `delete_support_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501
        if 'operator_id' in params:
            path_params['operatorId'] = params['operator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/operator/{operatorId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_support_ticket_by_userid_by_ticketid(self, ticket_id, user_id, **kwargs):  # noqa: E501
        """Удаление обращения  # noqa: E501

        Удаление обращения по идентификатору пользователя и идентификатору тикета.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_ticket_by_userid_by_ticketid(ticket_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: Идентификатор тикета (required)
        :param str user_id: Идентификатор пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, **kwargs)  # noqa: E501
            return data

    def delete_support_ticket_by_userid_by_ticketid_with_http_info(self, ticket_id, user_id, **kwargs):  # noqa: E501
        """Удаление обращения  # noqa: E501

        Удаление обращения по идентификатору пользователя и идентификатору тикета.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: Идентификатор тикета (required)
        :param str user_id: Идентификатор пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_support_ticket_by_userid_by_ticketid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if ('ticket_id' not in params or
                params['ticket_id'] is None):
            raise ValueError("Missing the required parameter `ticket_id` when calling `delete_support_ticket_by_userid_by_ticketid`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_support_ticket_by_userid_by_ticketid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/ticket/{userId}/{ticketId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_client_reason_by_reasonname_operator(self, reason_name, **kwargs):  # noqa: E501
        """Список операторов для клиентов (без сердств коммуникации)  # noqa: E501

        Список операторов для клиентов (без сердств коммуникации)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_client_reason_by_reasonname_operator(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: list[SupportOperatorShort]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_client_reason_by_reasonname_operator_with_http_info(reason_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_client_reason_by_reasonname_operator_with_http_info(reason_name, **kwargs)  # noqa: E501
            return data

    def get_support_client_reason_by_reasonname_operator_with_http_info(self, reason_name, **kwargs):  # noqa: E501
        """Список операторов для клиентов (без сердств коммуникации)  # noqa: E501

        Список операторов для клиентов (без сердств коммуникации)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_client_reason_by_reasonname_operator_with_http_info(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: list[SupportOperatorShort]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_client_reason_by_reasonname_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `get_support_client_reason_by_reasonname_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/client/reason/{reasonName}/operator/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupportOperatorShort]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_client_reason_by_reasonname_operator_by_operatorid(self, reason_name, operator_id, **kwargs):  # noqa: E501
        """Запрос оператора для клиентов  (без сердств коммуникации)  # noqa: E501

        Запрос оператора для клиентов  (без сердств коммуникации)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_client_reason_by_reasonname_operator_by_operatorid(reason_name, operator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :return: SupportOperatorShort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_client_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_client_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, **kwargs)  # noqa: E501
            return data

    def get_support_client_reason_by_reasonname_operator_by_operatorid_with_http_info(self, reason_name, operator_id, **kwargs):  # noqa: E501
        """Запрос оператора для клиентов  (без сердств коммуникации)  # noqa: E501

        Запрос оператора для клиентов  (без сердств коммуникации)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_client_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :return: SupportOperatorShort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name', 'operator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_client_reason_by_reasonname_operator_by_operatorid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `get_support_client_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501
        # verify the required parameter 'operator_id' is set
        if ('operator_id' not in params or
                params['operator_id'] is None):
            raise ValueError("Missing the required parameter `operator_id` when calling `get_support_client_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501
        if 'operator_id' in params:
            path_params['operatorId'] = params['operator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/client/reason/{reasonName}/operator/{operatorId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportOperatorShort',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_reason(self, **kwargs):  # noqa: E501
        """Список причин обращения  # noqa: E501

        Список причин обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SupportReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_reason_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_support_reason_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_support_reason_with_http_info(self, **kwargs):  # noqa: E501
        """Список причин обращения  # noqa: E501

        Список причин обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SupportReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_reason" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupportReason]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_reason_by_reasonname(self, reason_name, **kwargs):  # noqa: E501
        """Запрос причины обращения  # noqa: E501

        Запрос причины обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: SupportReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_reason_by_reasonname_with_http_info(reason_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_reason_by_reasonname_with_http_info(reason_name, **kwargs)  # noqa: E501
            return data

    def get_support_reason_by_reasonname_with_http_info(self, reason_name, **kwargs):  # noqa: E501
        """Запрос причины обращения  # noqa: E501

        Запрос причины обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname_with_http_info(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: SupportReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_reason_by_reasonname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `get_support_reason_by_reasonname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportReason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_reason_by_reasonname_format(self, reason_name, **kwargs):  # noqa: E501
        """get_support_reason_by_reasonname_format  # noqa: E501

        Запрос формата  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname_format(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_reason_by_reasonname_format_with_http_info(reason_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_reason_by_reasonname_format_with_http_info(reason_name, **kwargs)  # noqa: E501
            return data

    def get_support_reason_by_reasonname_format_with_http_info(self, reason_name, **kwargs):  # noqa: E501
        """get_support_reason_by_reasonname_format  # noqa: E501

        Запрос формата  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname_format_with_http_info(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_reason_by_reasonname_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `get_support_reason_by_reasonname_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/format/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_reason_by_reasonname_operator(self, reason_name, **kwargs):  # noqa: E501
        """Список операторов  # noqa: E501

        Список операторов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname_operator(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: list[SupportOperator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_reason_by_reasonname_operator_with_http_info(reason_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_reason_by_reasonname_operator_with_http_info(reason_name, **kwargs)  # noqa: E501
            return data

    def get_support_reason_by_reasonname_operator_with_http_info(self, reason_name, **kwargs):  # noqa: E501
        """Список операторов  # noqa: E501

        Список операторов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname_operator_with_http_info(reason_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :return: list[SupportOperator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_reason_by_reasonname_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `get_support_reason_by_reasonname_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/operator/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupportOperator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_reason_by_reasonname_operator_by_operatorid(self, reason_name, operator_id, **kwargs):  # noqa: E501
        """Запрос оператор  # noqa: E501

        Запрос оператор  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname_operator_by_operatorid(reason_name, operator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :return: SupportOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, **kwargs)  # noqa: E501
            return data

    def get_support_reason_by_reasonname_operator_by_operatorid_with_http_info(self, reason_name, operator_id, **kwargs):  # noqa: E501
        """Запрос оператор  # noqa: E501

        Запрос оператор  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :return: SupportOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name', 'operator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_reason_by_reasonname_operator_by_operatorid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `get_support_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501
        # verify the required parameter 'operator_id' is set
        if ('operator_id' not in params or
                params['operator_id'] is None):
            raise ValueError("Missing the required parameter `operator_id` when calling `get_support_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501
        if 'operator_id' in params:
            path_params['operatorId'] = params['operator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/operator/{operatorId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportOperator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_support_ticket_by_userid_by_ticketid(self, ticket_id, user_id, **kwargs):  # noqa: E501
        """Запрос обращения  # noqa: E501

        Запрос обращения по идентификатору пользователя и идентификатору тикета  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_by_userid_by_ticketid(ticket_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: Идентификатор тикета (required)
        :param str user_id: Идентификатор пользователя (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_support_ticket_by_userid_by_ticketid_with_http_info(self, ticket_id, user_id, **kwargs):  # noqa: E501
        """Запрос обращения  # noqa: E501

        Запрос обращения по идентификатору пользователя и идентификатору тикета  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: Идентификатор тикета (required)
        :param str user_id: Идентификатор пользователя (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_support_ticket_by_userid_by_ticketid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if ('ticket_id' not in params or
                params['ticket_id'] is None):
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_support_ticket_by_userid_by_ticketid`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_support_ticket_by_userid_by_ticketid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/ticket/{userId}/{ticketId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_feedback(self, support_feedback, **kwargs):  # noqa: E501
        """post_support_feedback  # noqa: E501

        Отправить отзыв  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_feedback(support_feedback, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportFeedback support_feedback: Данные обратной связи (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_feedback_with_http_info(support_feedback, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_feedback_with_http_info(support_feedback, **kwargs)  # noqa: E501
            return data

    def post_support_feedback_with_http_info(self, support_feedback, **kwargs):  # noqa: E501
        """post_support_feedback  # noqa: E501

        Отправить отзыв  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_feedback_with_http_info(support_feedback, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportFeedback support_feedback: Данные обратной связи (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['support_feedback']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_feedback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'support_feedback' is set
        if ('support_feedback' not in params or
                params['support_feedback'] is None):
            raise ValueError("Missing the required parameter `support_feedback` when calling `post_support_feedback`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'support_feedback' in params:
            body_params = params['support_feedback']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/feedback/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_reason_by_reasonname(self, reason_name, reason, **kwargs):  # noqa: E501
        """Обновление причины обращения  # noqa: E501

        Обновление причины обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_reason_by_reasonname(reason_name, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param SupportReason reason: (required)
        :return: SupportReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_reason_by_reasonname_with_http_info(reason_name, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_reason_by_reasonname_with_http_info(reason_name, reason, **kwargs)  # noqa: E501
            return data

    def post_support_reason_by_reasonname_with_http_info(self, reason_name, reason, **kwargs):  # noqa: E501
        """Обновление причины обращения  # noqa: E501

        Обновление причины обращения  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_reason_by_reasonname_with_http_info(reason_name, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param SupportReason reason: (required)
        :return: SupportReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_reason_by_reasonname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `post_support_reason_by_reasonname`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if ('reason' not in params or
                params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `post_support_reason_by_reasonname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reason' in params:
            body_params = params['reason']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportReason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_reason_by_reasonname_format(self, reason_name, body, **kwargs):  # noqa: E501
        """post_support_reason_by_reasonname_format  # noqa: E501

        Запись содержания документа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_reason_by_reasonname_format(reason_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str body: Содержимое формата (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_reason_by_reasonname_format_with_http_info(reason_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_reason_by_reasonname_format_with_http_info(reason_name, body, **kwargs)  # noqa: E501
            return data

    def post_support_reason_by_reasonname_format_with_http_info(self, reason_name, body, **kwargs):  # noqa: E501
        """post_support_reason_by_reasonname_format  # noqa: E501

        Запись содержания документа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_reason_by_reasonname_format_with_http_info(reason_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str body: Содержимое формата (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_reason_by_reasonname_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `post_support_reason_by_reasonname_format`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_support_reason_by_reasonname_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/format/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_reason_by_reasonname_operator_by_operatorid(self, reason_name, operator_id, operator, **kwargs):  # noqa: E501
        """Обновление оператора  # noqa: E501

        Обновление оператора  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_reason_by_reasonname_operator_by_operatorid(reason_name, operator_id, operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :param SupportOperator operator: (required)
        :return: SupportOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, operator, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, operator, **kwargs)  # noqa: E501
            return data

    def post_support_reason_by_reasonname_operator_by_operatorid_with_http_info(self, reason_name, operator_id, operator, **kwargs):  # noqa: E501
        """Обновление оператора  # noqa: E501

        Обновление оператора  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_reason_by_reasonname_operator_by_operatorid_with_http_info(reason_name, operator_id, operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param str operator_id: Идентификатор причины (required)
        :param SupportOperator operator: (required)
        :return: SupportOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name', 'operator_id', 'operator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_reason_by_reasonname_operator_by_operatorid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `post_support_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501
        # verify the required parameter 'operator_id' is set
        if ('operator_id' not in params or
                params['operator_id'] is None):
            raise ValueError("Missing the required parameter `operator_id` when calling `post_support_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501
        # verify the required parameter 'operator' is set
        if ('operator' not in params or
                params['operator'] is None):
            raise ValueError("Missing the required parameter `operator` when calling `post_support_reason_by_reasonname_operator_by_operatorid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501
        if 'operator_id' in params:
            path_params['operatorId'] = params['operator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'operator' in params:
            body_params = params['operator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/operator/{operatorId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportOperator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_ticket(self, query, **kwargs):  # noqa: E501
        """Поиск обращений оператора  # noqa: E501

        Поиск обращений оператора с доступами ко всем заявкам  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketQuery query: (required)
        :return: list[SupportTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_ticket_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_ticket_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def post_support_ticket_with_http_info(self, query, **kwargs):  # noqa: E501
        """Поиск обращений оператора  # noqa: E501

        Поиск обращений оператора с доступами ко всем заявкам  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketQuery query: (required)
        :return: list[SupportTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `post_support_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in params:
            body_params = params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/ticket/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupportTicket]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_ticket_by_userid(self, user_id, query, **kwargs):  # noqa: E501
        """Поиск обращений пользователя  # noqa: E501

        Поиск обращений пользователя. Поиск осуществляется только по обращениям пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket_by_userid(user_id, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param SupportTicketQuery query: (required)
        :return: list[SupportTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_ticket_by_userid_with_http_info(user_id, query, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_ticket_by_userid_with_http_info(user_id, query, **kwargs)  # noqa: E501
            return data

    def post_support_ticket_by_userid_with_http_info(self, user_id, query, **kwargs):  # noqa: E501
        """Поиск обращений пользователя  # noqa: E501

        Поиск обращений пользователя. Поиск осуществляется только по обращениям пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket_by_userid_with_http_info(user_id, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param SupportTicketQuery query: (required)
        :return: list[SupportTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_ticket_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_support_ticket_by_userid`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `post_support_ticket_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in params:
            body_params = params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/ticket/{userId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupportTicket]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_ticket_by_userid_by_ticketid(self, ticket_id, user_id, ticket, **kwargs):  # noqa: E501
        """Обновление обращения  # noqa: E501

        Обновление обращенияпо идентификатору пользователя и идентификатору тикета  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket_by_userid_by_ticketid(ticket_id, user_id, ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: Идентификатор тикета (required)
        :param str user_id: Идентификатор пользователя (required)
        :param SupportTicket ticket: (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, ticket, **kwargs)  # noqa: E501
            return data

    def post_support_ticket_by_userid_by_ticketid_with_http_info(self, ticket_id, user_id, ticket, **kwargs):  # noqa: E501
        """Обновление обращения  # noqa: E501

        Обновление обращенияпо идентификатору пользователя и идентификатору тикета  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket_by_userid_by_ticketid_with_http_info(ticket_id, user_id, ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: Идентификатор тикета (required)
        :param str user_id: Идентификатор пользователя (required)
        :param SupportTicket ticket: (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'user_id', 'ticket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_ticket_by_userid_by_ticketid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if ('ticket_id' not in params or
                params['ticket_id'] is None):
            raise ValueError("Missing the required parameter `ticket_id` when calling `post_support_ticket_by_userid_by_ticketid`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_support_ticket_by_userid_by_ticketid`")  # noqa: E501
        # verify the required parameter 'ticket' is set
        if ('ticket' not in params or
                params['ticket'] is None):
            raise ValueError("Missing the required parameter `ticket` when calling `post_support_ticket_by_userid_by_ticketid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ticket' in params:
            body_params = params['ticket']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/ticket/{userId}/{ticketId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_support_ticket_export(self, query, **kwargs):  # noqa: E501
        """Экспорт обращений  # noqa: E501

        Экспорт обращений в различных форматах  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket_export(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketExport query: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_support_ticket_export_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.post_support_ticket_export_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def post_support_ticket_export_with_http_info(self, query, **kwargs):  # noqa: E501
        """Экспорт обращений  # noqa: E501

        Экспорт обращений в различных форматах  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_support_ticket_export_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportTicketExport query: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_support_ticket_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `post_support_ticket_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in params:
            body_params = params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/pdf', 'application/excel'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/ticket/export/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_support_reason(self, reason, **kwargs):  # noqa: E501
        """Создание причины  # noqa: E501

        Создание причины  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_support_reason(reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportReason reason: Данные обратной связи (required)
        :return: SupportReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_support_reason_with_http_info(reason, **kwargs)  # noqa: E501
        else:
            (data) = self.put_support_reason_with_http_info(reason, **kwargs)  # noqa: E501
            return data

    def put_support_reason_with_http_info(self, reason, **kwargs):  # noqa: E501
        """Создание причины  # noqa: E501

        Создание причины  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_support_reason_with_http_info(reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportReason reason: Данные обратной связи (required)
        :return: SupportReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_support_reason" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason' is set
        if ('reason' not in params or
                params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `put_support_reason`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reason' in params:
            body_params = params['reason']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportReason',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_support_reason_by_reasonname_operator(self, reason_name, operator, **kwargs):  # noqa: E501
        """Добавление оператора  # noqa: E501

        Добавление оператора  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_support_reason_by_reasonname_operator(reason_name, operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param SupportOperator operator: Оператор (required)
        :return: SupportOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_support_reason_by_reasonname_operator_with_http_info(reason_name, operator, **kwargs)  # noqa: E501
        else:
            (data) = self.put_support_reason_by_reasonname_operator_with_http_info(reason_name, operator, **kwargs)  # noqa: E501
            return data

    def put_support_reason_by_reasonname_operator_with_http_info(self, reason_name, operator, **kwargs):  # noqa: E501
        """Добавление оператора  # noqa: E501

        Добавление оператора  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_support_reason_by_reasonname_operator_with_http_info(reason_name, operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_name: Название причины в латиннице (required)
        :param SupportOperator operator: Оператор (required)
        :return: SupportOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_name', 'operator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_support_reason_by_reasonname_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_name' is set
        if ('reason_name' not in params or
                params['reason_name'] is None):
            raise ValueError("Missing the required parameter `reason_name` when calling `put_support_reason_by_reasonname_operator`")  # noqa: E501
        # verify the required parameter 'operator' is set
        if ('operator' not in params or
                params['operator'] is None):
            raise ValueError("Missing the required parameter `operator` when calling `put_support_reason_by_reasonname_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_name' in params:
            path_params['reasonName'] = params['reason_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'operator' in params:
            body_params = params['operator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/reason/{reasonName}/operator/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportOperator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_support_ticket_by_userid(self, user_id, ticket, **kwargs):  # noqa: E501
        """Создание обращения пользователя  # noqa: E501

        Создание обращения пользователя. userId берется из пути а не тела запроса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_support_ticket_by_userid(user_id, ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param SupportTicket ticket: (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_support_ticket_by_userid_with_http_info(user_id, ticket, **kwargs)  # noqa: E501
        else:
            (data) = self.put_support_ticket_by_userid_with_http_info(user_id, ticket, **kwargs)  # noqa: E501
            return data

    def put_support_ticket_by_userid_with_http_info(self, user_id, ticket, **kwargs):  # noqa: E501
        """Создание обращения пользователя  # noqa: E501

        Создание обращения пользователя. userId берется из пути а не тела запроса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_support_ticket_by_userid_with_http_info(user_id, ticket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param SupportTicket ticket: (required)
        :return: SupportTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'ticket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_support_ticket_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `put_support_ticket_by_userid`")  # noqa: E501
        # verify the required parameter 'ticket' is set
        if ('ticket' not in params or
                params['ticket'] is None):
            raise ValueError("Missing the required parameter `ticket` when calling `put_support_ticket_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ticket' in params:
            body_params = params['ticket']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/support/ticket/{userId}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
