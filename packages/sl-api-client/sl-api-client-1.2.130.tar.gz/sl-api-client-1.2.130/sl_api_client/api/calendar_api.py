# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class CalendarApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cal_date(self, cal_date, **kwargs):  # noqa: E501
        """delete_cal_date  # noqa: E501

        Удаление времени. Если не заданны calGoupId или calShopId то удаляется значение по умолчанию для всех магазинов на день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cal_date(cal_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cal_date_with_http_info(cal_date, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cal_date_with_http_info(cal_date, **kwargs)  # noqa: E501
            return data

    def delete_cal_date_with_http_info(self, cal_date, **kwargs):  # noqa: E501
        """delete_cal_date  # noqa: E501

        Удаление времени. Если не заданны calGoupId или calShopId то удаляется значение по умолчанию для всех магазинов на день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cal_date_with_http_info(cal_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_date', 'cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cal_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cal_date' is set
        if ('cal_date' not in params or
                params['cal_date'] is None):
            raise ValueError("Missing the required parameter `cal_date` when calling `delete_cal_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501
        if 'cal_date' in params:
            query_params.append(('calDate', params['cal_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/date/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cal_default(self, **kwargs):  # noqa: E501
        """delete_cal_default  # noqa: E501

        Удаление времени. Если не заданны calGoupId или calShopId то удаляется значение по умолчанию для всех магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cal_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cal_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_cal_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_cal_default_with_http_info(self, **kwargs):  # noqa: E501
        """delete_cal_default  # noqa: E501

        Удаление времени. Если не заданны calGoupId или calShopId то удаляется значение по умолчанию для всех магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cal_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cal_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/default/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cal_week(self, **kwargs):  # noqa: E501
        """delete_cal_week  # noqa: E501

        Удаление времени. Если не заданны calGoupId или calShopId то удаляется значение по умолчанию для всех магазинов по дням недели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cal_week(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cal_week_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_cal_week_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_cal_week_with_http_info(self, **kwargs):  # noqa: E501
        """delete_cal_week  # noqa: E501

        Удаление времени. Если не заданны calGoupId или calShopId то удаляется значение по умолчанию для всех магазинов по дням недели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cal_week_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cal_week" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/week/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cal_date(self, cal_date, **kwargs):  # noqa: E501
        """get_cal_date  # noqa: E501

        Получение времени. Если не заданны calGoupId или calShopId то отдается значение по умолчанию для всех магазинов на день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_date(cal_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cal_date_with_http_info(cal_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cal_date_with_http_info(cal_date, **kwargs)  # noqa: E501
            return data

    def get_cal_date_with_http_info(self, cal_date, **kwargs):  # noqa: E501
        """get_cal_date  # noqa: E501

        Получение времени. Если не заданны calGoupId или calShopId то отдается значение по умолчанию для всех магазинов на день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_date_with_http_info(cal_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_date', 'cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cal_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cal_date' is set
        if ('cal_date' not in params or
                params['cal_date'] is None):
            raise ValueError("Missing the required parameter `cal_date` when calling `get_cal_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501
        if 'cal_date' in params:
            query_params.append(('calDate', params['cal_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/date/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalWorkTimeDate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cal_default(self, **kwargs):  # noqa: E501
        """get_cal_default  # noqa: E501

        Чтение времени. Если не заданны calGoupId или calShopId то отдается значение по умолчанию для всех магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cal_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cal_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cal_default_with_http_info(self, **kwargs):  # noqa: E501
        """get_cal_default  # noqa: E501

        Чтение времени. Если не заданны calGoupId или calShopId то отдается значение по умолчанию для всех магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cal_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/default/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalWorkTimeDefault',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cal_time_shop(self, cal_shop_id, cal_date, **kwargs):  # noqa: E501
        """get_cal_time_shop  # noqa: E501

        Получение времени работы магазина по дате. Правила выбора в общем описании.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_time_shop(cal_shop_id, cal_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop (required)
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: CalQueryListShopWorkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cal_time_shop_with_http_info(cal_shop_id, cal_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cal_time_shop_with_http_info(cal_shop_id, cal_date, **kwargs)  # noqa: E501
            return data

    def get_cal_time_shop_with_http_info(self, cal_shop_id, cal_date, **kwargs):  # noqa: E501
        """get_cal_time_shop  # noqa: E501

        Получение времени работы магазина по дате. Правила выбора в общем описании.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_time_shop_with_http_info(cal_shop_id, cal_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop (required)
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :return: CalQueryListShopWorkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_shop_id', 'cal_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cal_time_shop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cal_shop_id' is set
        if ('cal_shop_id' not in params or
                params['cal_shop_id'] is None):
            raise ValueError("Missing the required parameter `cal_shop_id` when calling `get_cal_time_shop`")  # noqa: E501
        # verify the required parameter 'cal_date' is set
        if ('cal_date' not in params or
                params['cal_date'] is None):
            raise ValueError("Missing the required parameter `cal_date` when calling `get_cal_time_shop`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_date' in params:
            query_params.append(('calDate', params['cal_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/time/shop/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalQueryListShopWorkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cal_week(self, **kwargs):  # noqa: E501
        """get_cal_week  # noqa: E501

        Получение времени. Если не заданны calGoupId или calShopId то отдается значение по умолчанию для всех магазинов по дням недели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_week(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeWeek
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cal_week_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cal_week_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cal_week_with_http_info(self, **kwargs):  # noqa: E501
        """get_cal_week  # noqa: E501

        Получение времени. Если не заданны calGoupId или calShopId то отдается значение по умолчанию для всех магазинов по дням недели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cal_week_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeWeek
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cal_week" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/week/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalWorkTimeWeek',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cal_date(self, cal_date, body, **kwargs):  # noqa: E501
        """post_cal_date  # noqa: E501

        Обновление времени. Если не заданны calGoupId или calShopId то обновляется значение по умолчанию для всех магазинов на день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_date(cal_date, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param CalWorkTimeDate body: (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cal_date_with_http_info(cal_date, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cal_date_with_http_info(cal_date, body, **kwargs)  # noqa: E501
            return data

    def post_cal_date_with_http_info(self, cal_date, body, **kwargs):  # noqa: E501
        """post_cal_date  # noqa: E501

        Обновление времени. Если не заданны calGoupId или calShopId то обновляется значение по умолчанию для всех магазинов на день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_date_with_http_info(cal_date, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cal_date: Дата по RFC 3339, section 5.6, for example, 2017-07-21 (required)
        :param CalWorkTimeDate body: (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cal_date', 'body', 'cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cal_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cal_date' is set
        if ('cal_date' not in params or
                params['cal_date'] is None):
            raise ValueError("Missing the required parameter `cal_date` when calling `post_cal_date`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cal_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501
        if 'cal_date' in params:
            query_params.append(('calDate', params['cal_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/date/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalWorkTimeDate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cal_default(self, body, **kwargs):  # noqa: E501
        """post_cal_default  # noqa: E501

        Обновление времени. Если не заданны calGoupId или calShopId то обновляется значение по умолчанию для всех магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_default(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalWorkTimeDefault body: (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cal_default_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cal_default_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cal_default_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_cal_default  # noqa: E501

        Обновление времени. Если не заданны calGoupId или calShopId то обновляется значение по умолчанию для всех магазинов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_default_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalWorkTimeDefault body: (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cal_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cal_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/default/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalWorkTimeDefault',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cal_list_date(self, body, **kwargs):  # noqa: E501
        """post_cal_list_date  # noqa: E501

        Запрос списка всех единиц времени по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_list_date(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListWorkTimes body: (required)
        :return: list[CalWorkTimeDate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cal_list_date_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cal_list_date_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cal_list_date_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_cal_list_date  # noqa: E501

        Запрос списка всех единиц времени по дате  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_list_date_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListWorkTimes body: (required)
        :return: list[CalWorkTimeDate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cal_list_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cal_list_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/list/date/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CalWorkTimeDate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cal_list_default(self, body, **kwargs):  # noqa: E501
        """post_cal_list_default  # noqa: E501

        Запрос списка всех единиц времени по умолчанию  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_list_default(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListWorkTimes body: (required)
        :return: list[CalWorkTimeDefault]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cal_list_default_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cal_list_default_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cal_list_default_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_cal_list_default  # noqa: E501

        Запрос списка всех единиц времени по умолчанию  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_list_default_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListWorkTimes body: (required)
        :return: list[CalWorkTimeDefault]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cal_list_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cal_list_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/list/default/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CalWorkTimeDefault]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cal_list_week(self, body, **kwargs):  # noqa: E501
        """post_cal_list_week  # noqa: E501

        Запрос списка всех единиц времени по умолчанию  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_list_week(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListWorkTimes body: (required)
        :return: list[CalWorkTimeWeek]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cal_list_week_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cal_list_week_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cal_list_week_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_cal_list_week  # noqa: E501

        Запрос списка всех единиц времени по умолчанию  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_list_week_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListWorkTimes body: (required)
        :return: list[CalWorkTimeWeek]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cal_list_week" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cal_list_week`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/list/week/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CalWorkTimeWeek]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cal_time_shop_work(self, body, **kwargs):  # noqa: E501
        """post_cal_time_shop_work  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_time_shop_work(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListShopWork body: (required)
        :return: CalQueryListShopWorkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cal_time_shop_work_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cal_time_shop_work_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cal_time_shop_work_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_cal_time_shop_work  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_time_shop_work_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalQueryListShopWork body: (required)
        :return: CalQueryListShopWorkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cal_time_shop_work" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cal_time_shop_work`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/time/shop/work/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalQueryListShopWorkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cal_week(self, body, **kwargs):  # noqa: E501
        """post_cal_week  # noqa: E501

        Обновление времени. Если не заданны calGoupId или calShopId то обновляется значение по умолчанию для всех магазинов по дням недели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_week(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalWorkTimeWeek body: (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeWeek
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cal_week_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cal_week_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cal_week_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_cal_week  # noqa: E501

        Обновление времени. Если не заданны calGoupId или calShopId то обновляется значение по умолчанию для всех магазинов по дням недели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cal_week_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalWorkTimeWeek body: (required)
        :param str cal_shop_id: Идентификатор shop. Взаимоисключающий с calGoupId
        :param str cal_goup_id: Идентификатор group Взаимоисключающий с calShopId
        :return: CalWorkTimeWeek
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cal_shop_id', 'cal_goup_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cal_week" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cal_week`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cal_shop_id' in params:
            query_params.append(('calShopId', params['cal_shop_id']))  # noqa: E501
        if 'cal_goup_id' in params:
            query_params.append(('calGoupId', params['cal_goup_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/cal/week/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalWorkTimeWeek',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
