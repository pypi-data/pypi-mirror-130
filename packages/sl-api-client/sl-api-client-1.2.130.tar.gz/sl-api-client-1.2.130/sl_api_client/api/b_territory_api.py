# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class BTerritoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_bterritory_inn(self, body, **kwargs):  # noqa: E501
        """post_bterritory_inn  # noqa: E501

        Получение информации по ИНН  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_inn(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbInnRequest body: Получение информации по ИНН (required)
        :return: TbInnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_bterritory_inn_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_bterritory_inn_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_bterritory_inn_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_bterritory_inn  # noqa: E501

        Получение информации по ИНН  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_inn_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbInnRequest body: Получение информации по ИНН (required)
        :return: TbInnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_bterritory_inn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_bterritory_inn`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/bterritory/inn/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TbInnResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_bterritory_recovery_password(self, body, **kwargs):  # noqa: E501
        """post_bterritory_recovery_password  # noqa: E501

        Запрос на восстановление пароля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_recovery_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbRecoveryRequest body: Запрос на восстановление пароля в Территории Бизнеса (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_bterritory_recovery_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_bterritory_recovery_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_bterritory_recovery_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_bterritory_recovery_password  # noqa: E501

        Запрос на восстановление пароля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_recovery_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbRecoveryRequest body: Запрос на восстановление пароля в Территории Бизнеса (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_bterritory_recovery_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_bterritory_recovery_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/bterritory/recovery/password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_bterritory_signin_password(self, body, **kwargs):  # noqa: E501
        """Авторизация по email. Email - проверка по регулярному выражению email   # noqa: E501

        Парольная авторизация  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_signin_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbSigninRequest body: Данные для авторизации (required)
        :return: TbSigninResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_bterritory_signin_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_bterritory_signin_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_bterritory_signin_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """Авторизация по email. Email - проверка по регулярному выражению email   # noqa: E501

        Парольная авторизация  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_signin_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbSigninRequest body: Данные для авторизации (required)
        :return: TbSigninResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_bterritory_signin_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_bterritory_signin_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/bterritory/signin/password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TbSigninResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_bterritory_signup_password(self, body, **kwargs):  # noqa: E501
        """post_bterritory_signup_password  # noqa: E501

        Регистрация по паролю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_signup_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbSignupRequest body: (required)
        :return: TbSigninResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_bterritory_signup_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_bterritory_signup_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_bterritory_signup_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_bterritory_signup_password  # noqa: E501

        Регистрация по паролю  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_signup_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbSignupRequest body: (required)
        :return: TbSigninResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_bterritory_signup_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_bterritory_signup_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid']  # noqa: E501

        return self.api_client.call_api(
            '/bterritory/signup/password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TbSigninResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_bterritory_time(self, body, **kwargs):  # noqa: E501
        """post_bterritory_time  # noqa: E501

        Получение информации о промежутках времени  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_time(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbTimeRequest body: Получение информации о промежутках времени (required)
        :return: TbTimeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_bterritory_time_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_bterritory_time_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_bterritory_time_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_bterritory_time  # noqa: E501

        Получение информации о промежутках времени  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_time_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TbTimeRequest body: Получение информации о промежутках времени (required)
        :return: TbTimeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_bterritory_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_bterritory_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/bterritory/time/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TbTimeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_bterritory_user_by_userid(self, user_id, body, **kwargs):  # noqa: E501
        """post_bterritory_user_by_userid  # noqa: E501

        Обновление пользователя в Динамике и на сайте Территории Бизнеса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_user_by_userid(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param TbUserUpdateRequest body: Обновление данных пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_bterritory_user_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_bterritory_user_by_userid_with_http_info(user_id, body, **kwargs)  # noqa: E501
            return data

    def post_bterritory_user_by_userid_with_http_info(self, user_id, body, **kwargs):  # noqa: E501
        """post_bterritory_user_by_userid  # noqa: E501

        Обновление пользователя в Динамике и на сайте Территории Бизнеса  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bterritory_user_by_userid_with_http_info(user_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Идентификатор пользователя (required)
        :param TbUserUpdateRequest body: Обновление данных пользователя (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_bterritory_user_by_userid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_bterritory_user_by_userid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_bterritory_user_by_userid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/bterritory/user/{userId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
