# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class CollectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_static_collection_by_collectionkey(self, collection_key, **kwargs):  # noqa: E501
        """Удалить коллекцию  # noqa: E501

        Удалить существующую коллекцию  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_collection_by_collectionkey(collection_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_static_collection_by_collectionkey_with_http_info(collection_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_static_collection_by_collectionkey_with_http_info(collection_key, **kwargs)  # noqa: E501
            return data

    def delete_static_collection_by_collectionkey_with_http_info(self, collection_key, **kwargs):  # noqa: E501
        """Удалить коллекцию  # noqa: E501

        Удалить существующую коллекцию  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_static_collection_by_collectionkey_with_http_info(collection_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_static_collection_by_collectionkey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_key' is set
        if ('collection_key' not in params or
                params['collection_key'] is None):
            raise ValueError("Missing the required parameter `collection_key` when calling `delete_static_collection_by_collectionkey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_key' in params:
            path_params['collectionKey'] = params['collection_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/{collectionKey}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_collection(self, **kwargs):  # noqa: E501
        """Запросить список коллекций  # noqa: E501

        Запрос списка существующих коллекций  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_static_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_static_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Запросить список коллекций  # noqa: E501

        Запрос списка существующих коллекций  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Collection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_static_collection_by_collectionkey_tuple_all(self, collection_key, **kwargs):  # noqa: E501
        """Запросить все кортежи  # noqa: E501

        Запрос всех кортежей, принадлежащих к указанной коллекции  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_collection_by_collectionkey_tuple_all(collection_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[list[CollectionRow]]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_static_collection_by_collectionkey_tuple_all_with_http_info(collection_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_static_collection_by_collectionkey_tuple_all_with_http_info(collection_key, **kwargs)  # noqa: E501
            return data

    def get_static_collection_by_collectionkey_tuple_all_with_http_info(self, collection_key, **kwargs):  # noqa: E501
        """Запросить все кортежи  # noqa: E501

        Запрос всех кортежей, принадлежащих к указанной коллекции  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_static_collection_by_collectionkey_tuple_all_with_http_info(collection_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param int limit: Количество выбираемых элементов
        :param int offset: Смещение от начала выборки
        :return: list[list[CollectionRow]]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_key', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_static_collection_by_collectionkey_tuple_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_key' is set
        if ('collection_key' not in params or
                params['collection_key'] is None):
            raise ValueError("Missing the required parameter `collection_key` when calling `get_static_collection_by_collectionkey_tuple_all`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_static_collection_by_collectionkey_tuple_all`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_static_collection_by_collectionkey_tuple_all`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_key' in params:
            path_params['collectionKey'] = params['collection_key']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/{collectionKey}/tuple/all/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[list[CollectionRow]]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_collection(self, body, **kwargs):  # noqa: E501
        """Моздать коллекцию  # noqa: E501

        Создание новой коллекции в системе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Collection body:  (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_static_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Моздать коллекцию  # noqa: E501

        Создание новой коллекции в системе  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Collection body:  (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_collection_by_collectionkey(self, collection_key, body, **kwargs):  # noqa: E501
        """Обновить коллекцию  # noqa: E501

        Обновление уже существующей коллекции. Обновление доступно только для поля **key**, value останется прежним  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param Collection body:  (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_collection_by_collectionkey_with_http_info(collection_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_collection_by_collectionkey_with_http_info(collection_key, body, **kwargs)  # noqa: E501
            return data

    def post_static_collection_by_collectionkey_with_http_info(self, collection_key, body, **kwargs):  # noqa: E501
        """Обновить коллекцию  # noqa: E501

        Обновление уже существующей коллекции. Обновление доступно только для поля **key**, value останется прежним  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey_with_http_info(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param Collection body:  (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_collection_by_collectionkey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_key' is set
        if ('collection_key' not in params or
                params['collection_key'] is None):
            raise ValueError("Missing the required parameter `collection_key` when calling `post_static_collection_by_collectionkey`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_collection_by_collectionkey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_key' in params:
            path_params['collectionKey'] = params['collection_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/{collectionKey}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_collection_by_collectionkey_tuple_delete(self, collection_key, body, **kwargs):  # noqa: E501
        """Удалить кортеж  # noqa: E501

        Удаление кортежа из системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey_tuple_delete(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param CollectionRow body:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_collection_by_collectionkey_tuple_delete_with_http_info(collection_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_collection_by_collectionkey_tuple_delete_with_http_info(collection_key, body, **kwargs)  # noqa: E501
            return data

    def post_static_collection_by_collectionkey_tuple_delete_with_http_info(self, collection_key, body, **kwargs):  # noqa: E501
        """Удалить кортеж  # noqa: E501

        Удаление кортежа из системы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey_tuple_delete_with_http_info(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param CollectionRow body:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_collection_by_collectionkey_tuple_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_key' is set
        if ('collection_key' not in params or
                params['collection_key'] is None):
            raise ValueError("Missing the required parameter `collection_key` when calling `post_static_collection_by_collectionkey_tuple_delete`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_collection_by_collectionkey_tuple_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_key' in params:
            path_params['collectionKey'] = params['collection_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/{collectionKey}/tuple/delete/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_collection_by_collectionkey_tuple_insert(self, collection_key, body, **kwargs):  # noqa: E501
        """Создать и добавить кортеж  # noqa: E501

        Функция создания и добавления нового кортежа в систему  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey_tuple_insert(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param list[CollectionRow] body:  (required)
        :return: list[CollectionRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_collection_by_collectionkey_tuple_insert_with_http_info(collection_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_collection_by_collectionkey_tuple_insert_with_http_info(collection_key, body, **kwargs)  # noqa: E501
            return data

    def post_static_collection_by_collectionkey_tuple_insert_with_http_info(self, collection_key, body, **kwargs):  # noqa: E501
        """Создать и добавить кортеж  # noqa: E501

        Функция создания и добавления нового кортежа в систему  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey_tuple_insert_with_http_info(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param list[CollectionRow] body:  (required)
        :return: list[CollectionRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_collection_by_collectionkey_tuple_insert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_key' is set
        if ('collection_key' not in params or
                params['collection_key'] is None):
            raise ValueError("Missing the required parameter `collection_key` when calling `post_static_collection_by_collectionkey_tuple_insert`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_collection_by_collectionkey_tuple_insert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_key' in params:
            path_params['collectionKey'] = params['collection_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/{collectionKey}/tuple/insert/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CollectionRow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_static_collection_by_collectionkey_tuple_select(self, collection_key, body, **kwargs):  # noqa: E501
        """Запросить кортеж  # noqa: E501

        Запрос кортежа по ключу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey_tuple_select(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param CollectionRow body:  (required)
        :return: list[list[CollectionRow]]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_static_collection_by_collectionkey_tuple_select_with_http_info(collection_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_static_collection_by_collectionkey_tuple_select_with_http_info(collection_key, body, **kwargs)  # noqa: E501
            return data

    def post_static_collection_by_collectionkey_tuple_select_with_http_info(self, collection_key, body, **kwargs):  # noqa: E501
        """Запросить кортеж  # noqa: E501

        Запрос кортежа по ключу  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_static_collection_by_collectionkey_tuple_select_with_http_info(collection_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_key: Ключ коллекции (required)
        :param CollectionRow body:  (required)
        :return: list[list[CollectionRow]]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_static_collection_by_collectionkey_tuple_select" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_key' is set
        if ('collection_key' not in params or
                params['collection_key'] is None):
            raise ValueError("Missing the required parameter `collection_key` when calling `post_static_collection_by_collectionkey_tuple_select`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_static_collection_by_collectionkey_tuple_select`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_key' in params:
            path_params['collectionKey'] = params['collection_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/static/collection/{collectionKey}/tuple/select/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[list[CollectionRow]]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
