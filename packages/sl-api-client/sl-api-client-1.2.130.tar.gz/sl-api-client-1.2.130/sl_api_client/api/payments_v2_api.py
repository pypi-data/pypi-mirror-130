# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class PaymentsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_v2_orders_pay_bindings_by_bindingid(self, binding_id, **kwargs):  # noqa: E501
        """Удаление привзяанной карты по ID привзяки  # noqa: E501

        Удаление привзяанной карты по ID привзяки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_pay_bindings_by_bindingid(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: Идентификатор связки (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_v2_orders_pay_bindings_by_bindingid_with_http_info(binding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_v2_orders_pay_bindings_by_bindingid_with_http_info(binding_id, **kwargs)  # noqa: E501
            return data

    def delete_v2_orders_pay_bindings_by_bindingid_with_http_info(self, binding_id, **kwargs):  # noqa: E501
        """Удаление привзяанной карты по ID привзяки  # noqa: E501

        Удаление привзяанной карты по ID привзяки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_pay_bindings_by_bindingid_with_http_info(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: Идентификатор связки (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['binding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_v2_orders_pay_bindings_by_bindingid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'binding_id' is set
        if ('binding_id' not in params or
                params['binding_id'] is None):
            raise ValueError("Missing the required parameter `binding_id` when calling `delete_v2_orders_pay_bindings_by_bindingid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'binding_id' in params:
            path_params['bindingId'] = params['binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/pay/bindings/{bindingId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v2_orders_pay_bindings(self, **kwargs):  # noqa: E501
        """Получение списка привзаных карт пользователей  # noqa: E501

        Получение списка привзаных карт пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_pay_bindings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_pay_bindings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_pay_bindings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_v2_orders_pay_bindings_with_http_info(self, **kwargs):  # noqa: E501
        """Получение списка привзаных карт пользователей  # noqa: E501

        Получение списка привзаных карт пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_pay_bindings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_pay_bindings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/pay/bindings/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v2_orders_pay_callback(self, md_order, order_number, operation, status, checksum, **kwargs):  # noqa: E501
        """Обратный вызов Сбребанка для обновления статусов заказа  # noqa: E501

        Обратный вызов Сбребанка для обновления статусов заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_pay_callback(md_order, order_number, operation, status, checksum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str md_order: Идентификатор платежа в платежном шлюзе (required)
        :param str order_number: Номер заказа, переданный в платежный шлюз (required)
        :param str operation: Операция, проведенная над платежом (required)
        :param int status: Статус проведенной операции: 0 - не успешно, 1 - успешно (required)
        :param str checksum: Контрольная сумма для проверки подлинности источника данных (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_pay_callback_with_http_info(md_order, order_number, operation, status, checksum, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_pay_callback_with_http_info(md_order, order_number, operation, status, checksum, **kwargs)  # noqa: E501
            return data

    def get_v2_orders_pay_callback_with_http_info(self, md_order, order_number, operation, status, checksum, **kwargs):  # noqa: E501
        """Обратный вызов Сбребанка для обновления статусов заказа  # noqa: E501

        Обратный вызов Сбребанка для обновления статусов заказа  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_pay_callback_with_http_info(md_order, order_number, operation, status, checksum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str md_order: Идентификатор платежа в платежном шлюзе (required)
        :param str order_number: Номер заказа, переданный в платежный шлюз (required)
        :param str operation: Операция, проведенная над платежом (required)
        :param int status: Статус проведенной операции: 0 - не успешно, 1 - успешно (required)
        :param str checksum: Контрольная сумма для проверки подлинности источника данных (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['md_order', 'order_number', 'operation', 'status', 'checksum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_pay_callback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'md_order' is set
        if ('md_order' not in params or
                params['md_order'] is None):
            raise ValueError("Missing the required parameter `md_order` when calling `get_v2_orders_pay_callback`")  # noqa: E501
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `get_v2_orders_pay_callback`")  # noqa: E501
        # verify the required parameter 'operation' is set
        if ('operation' not in params or
                params['operation'] is None):
            raise ValueError("Missing the required parameter `operation` when calling `get_v2_orders_pay_callback`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `get_v2_orders_pay_callback`")  # noqa: E501
        # verify the required parameter 'checksum' is set
        if ('checksum' not in params or
                params['checksum'] is None):
            raise ValueError("Missing the required parameter `checksum` when calling `get_v2_orders_pay_callback`")  # noqa: E501

        if 'status' in params and params['status'] > 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `status` when calling `get_v2_orders_pay_callback`, must be a value less than or equal to `1`")  # noqa: E501
        if 'status' in params and params['status'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `status` when calling `get_v2_orders_pay_callback`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'md_order' in params:
            query_params.append(('mdOrder', params['md_order']))  # noqa: E501
        if 'order_number' in params:
            query_params.append(('orderNumber', params['order_number']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'checksum' in params:
            query_params.append(('checksum', params['checksum']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/pay/callback/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_order_apple_pay(self, body, **kwargs):  # noqa: E501
        """Заказ с использованием платежной системы Apple Pay  # noqa: E501

        Заказ с использованием платежной системы Apple Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_apple_pay(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentRegisterRequestV2 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_order_apple_pay_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_order_apple_pay_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_order_apple_pay_with_http_info(self, body, **kwargs):  # noqa: E501
        """Заказ с использованием платежной системы Apple Pay  # noqa: E501

        Заказ с использованием платежной системы Apple Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_apple_pay_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentRegisterRequestV2 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_order_apple_pay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_order_apple_pay`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/order/apple-pay/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_order_by_paymenttype(self, payment_type, **kwargs):  # noqa: E501
        """Заказ с использование оффлайн-оплаты  # noqa: E501

        Заказ с использование оффлайн-оплаты: наличными или картой при доставке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_by_paymenttype(payment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_type: Тип оплаты (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_order_by_paymenttype_with_http_info(payment_type, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_order_by_paymenttype_with_http_info(payment_type, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_order_by_paymenttype_with_http_info(self, payment_type, **kwargs):  # noqa: E501
        """Заказ с использование оффлайн-оплаты  # noqa: E501

        Заказ с использование оффлайн-оплаты: наличными или картой при доставке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_by_paymenttype_with_http_info(payment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_type: Тип оплаты (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_order_by_paymenttype" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_type' is set
        if ('payment_type' not in params or
                params['payment_type'] is None):
            raise ValueError("Missing the required parameter `payment_type` when calling `post_v2_orders_order_by_paymenttype`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_type' in params:
            path_params['paymentType'] = params['payment_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/order/{paymentType}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_order_card(self, body, **kwargs):  # noqa: E501
        """Заказ с оплатой картой онлайн  # noqa: E501

        Заказ с оплатой картой онлайн  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_card(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardRegisterRequestV2 body: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_order_card_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_order_card_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_order_card_with_http_info(self, body, **kwargs):  # noqa: E501
        """Заказ с оплатой картой онлайн  # noqa: E501

        Заказ с оплатой картой онлайн  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_card_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardRegisterRequestV2 body: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_order_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_order_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/order/card/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_order_google_pay(self, body, **kwargs):  # noqa: E501
        """Заказ с использованием платежной системы Google Pay  # noqa: E501

        Заказ с использованием платежной системы Google Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_google_pay(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GooglePayRegisterRequestV2 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_order_google_pay_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_order_google_pay_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_order_google_pay_with_http_info(self, body, **kwargs):  # noqa: E501
        """Заказ с использованием платежной системы Google Pay  # noqa: E501

        Заказ с использованием платежной системы Google Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_google_pay_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GooglePayRegisterRequestV2 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_order_google_pay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_order_google_pay`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/order/google-pay/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_order_samsung_pay(self, body, **kwargs):  # noqa: E501
        """Заказ с использованием платежной системы Samsung Pay  # noqa: E501

        Заказ с использованием платежной системы Samsung Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_samsung_pay(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentRegisterRequestV2 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_order_samsung_pay_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_order_samsung_pay_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_order_samsung_pay_with_http_info(self, body, **kwargs):  # noqa: E501
        """Заказ с использованием платежной системы Samsung Pay  # noqa: E501

        Заказ с использованием платежной системы Samsung Pay  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_order_samsung_pay_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentRegisterRequestV2 body: (required)
        :return: OrderV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_order_samsung_pay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_order_samsung_pay`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/order/samsung-pay/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
