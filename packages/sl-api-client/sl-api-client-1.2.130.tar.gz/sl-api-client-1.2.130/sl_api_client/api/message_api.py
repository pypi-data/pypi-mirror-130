# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class MessageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_message_deferred_by_fabricid(self, fabric_id, **kwargs):  # noqa: E501
        """Удалить объект из запланированных рассылок  # noqa: E501

        Удаление из запланированных рассылок ранее созданного объекта  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_deferred_by_fabricid(fabric_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id: Идентификатор рассылки отложенной (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_message_deferred_by_fabricid_with_http_info(fabric_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_message_deferred_by_fabricid_with_http_info(fabric_id, **kwargs)  # noqa: E501
            return data

    def delete_message_deferred_by_fabricid_with_http_info(self, fabric_id, **kwargs):  # noqa: E501
        """Удалить объект из запланированных рассылок  # noqa: E501

        Удаление из запланированных рассылок ранее созданного объекта  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_deferred_by_fabricid_with_http_info(fabric_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id: Идентификатор рассылки отложенной (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_message_deferred_by_fabricid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_id' is set
        if ('fabric_id' not in params or
                params['fabric_id'] is None):
            raise ValueError("Missing the required parameter `fabric_id` when calling `delete_message_deferred_by_fabricid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_id' in params:
            path_params['FabricId'] = params['fabric_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/deferred/{FabricId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_message_history_by_historyid(self, history_id, **kwargs):  # noqa: E501
        """Удаление рассылки из истории  # noqa: E501

        Удалить рассылку из истории  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_history_by_historyid(history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: Идентификатор рассылки (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_message_history_by_historyid_with_http_info(history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_message_history_by_historyid_with_http_info(history_id, **kwargs)  # noqa: E501
            return data

    def delete_message_history_by_historyid_with_http_info(self, history_id, **kwargs):  # noqa: E501
        """Удаление рассылки из истории  # noqa: E501

        Удалить рассылку из истории  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_history_by_historyid_with_http_info(history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: Идентификатор рассылки (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_message_history_by_historyid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `delete_message_history_by_historyid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['HistoryId'] = params['history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/history/{HistoryId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_message_task_by_mailingid(self, mailing_id, **kwargs):  # noqa: E501
        """Удаление данных рассылки по ID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_task_by_mailingid(mailing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_id: Идентификатор рассылки (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_message_task_by_mailingid_with_http_info(mailing_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_message_task_by_mailingid_with_http_info(mailing_id, **kwargs)  # noqa: E501
            return data

    def delete_message_task_by_mailingid_with_http_info(self, mailing_id, **kwargs):  # noqa: E501
        """Удаление данных рассылки по ID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_task_by_mailingid_with_http_info(mailing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_id: Идентификатор рассылки (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mailing_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_message_task_by_mailingid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mailing_id' is set
        if ('mailing_id' not in params or
                params['mailing_id'] is None):
            raise ValueError("Missing the required parameter `mailing_id` when calling `delete_message_task_by_mailingid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mailing_id' in params:
            path_params['MailingId'] = params['mailing_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/{MailingId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_message_template_by_key(self, key, **kwargs):  # noqa: E501
        """Удаление шаблона  # noqa: E501

        Удаление шаблона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_template_by_key(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Ключ шаблона, уникальный в рамках компании (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_message_template_by_key_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_message_template_by_key_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def delete_message_template_by_key_with_http_info(self, key, **kwargs):  # noqa: E501
        """Удаление шаблона  # noqa: E501

        Удаление шаблона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_message_template_by_key_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Ключ шаблона, уникальный в рамках компании (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_message_template_by_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_message_template_by_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/template/{key}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_balance(self, **kwargs):  # noqa: E501
        """Получение баланса СМС-шлюза   # noqa: E501

        Получение баланса СМС-шлюза (с внешнего сервиса для отправки платных смс сообщений)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_balance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BalanceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_balance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_message_balance_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_message_balance_with_http_info(self, **kwargs):  # noqa: E501
        """Получение баланса СМС-шлюза   # noqa: E501

        Получение баланса СМС-шлюза (с внешнего сервиса для отправки платных смс сообщений)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_balance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BalanceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_balance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/balance/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalanceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_deferred(self, **kwargs):  # noqa: E501
        """Запрос списка запланированных рассылок  # noqa: E501

        Выводится список запланированных ранее рассылок  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_deferred(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :return: list[MessageFabric]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_deferred_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_message_deferred_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_message_deferred_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка запланированных рассылок  # noqa: E501

        Выводится список запланированных ранее рассылок  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_deferred_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :return: list[MessageFabric]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_deferred" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/deferred/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MessageFabric]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_history(self, **kwargs):  # noqa: E501
        """Запрос списка отправленных рассылок  # noqa: E501

        Отображает список ранее отправленных рассылок  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :return: list[MessageHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_message_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_message_history_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос списка отправленных рассылок  # noqa: E501

        Отображает список ранее отправленных рассылок  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :return: list[MessageHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/history/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MessageHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_history_count(self, **kwargs):  # noqa: E501
        """Запросить количество рассылок  # noqa: E501

        Выводит суммарное число всех отправленных рассылок за всё время  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_history_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int amount_on_page: Количество элементов на странице для расчета количества страниц
        :return: HistoryCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_history_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_message_history_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_message_history_count_with_http_info(self, **kwargs):  # noqa: E501
        """Запросить количество рассылок  # noqa: E501

        Выводит суммарное число всех отправленных рассылок за всё время  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_history_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int amount_on_page: Количество элементов на странице для расчета количества страниц
        :return: HistoryCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amount_on_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_history_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'amount_on_page' in params:
            query_params.append(('amountOnPage', params['amount_on_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/history/count/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HistoryCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_task_by_mailingid(self, mailing_id, **kwargs):  # noqa: E501
        """Получение данных рассылки по ID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_task_by_mailingid(mailing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_id: Идентификатор рассылки (required)
        :return: FullMailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_task_by_mailingid_with_http_info(mailing_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_message_task_by_mailingid_with_http_info(mailing_id, **kwargs)  # noqa: E501
            return data

    def get_message_task_by_mailingid_with_http_info(self, mailing_id, **kwargs):  # noqa: E501
        """Получение данных рассылки по ID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_task_by_mailingid_with_http_info(mailing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_id: Идентификатор рассылки (required)
        :return: FullMailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mailing_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_task_by_mailingid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mailing_id' is set
        if ('mailing_id' not in params or
                params['mailing_id'] is None):
            raise ValueError("Missing the required parameter `mailing_id` when calling `get_message_task_by_mailingid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mailing_id' in params:
            path_params['MailingId'] = params['mailing_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/{MailingId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullMailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_tasks(self, **kwargs):  # noqa: E501
        """Получение списка заданий на рассылку  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_tasks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :param bool is_waiting: Выбирать ожидающие отправки или отправленные
        :return: MailingItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_tasks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_message_tasks_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_message_tasks_with_http_info(self, **kwargs):  # noqa: E501
        """Получение списка заданий на рассылку  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_tasks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :param bool is_waiting: Выбирать ожидающие отправки или отправленные
        :return: MailingItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'is_waiting']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_tasks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'is_waiting' in params:
            query_params.append(('isWaiting', params['is_waiting']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/tasks/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItemList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_tasks_by_mailingtype(self, mailing_type, **kwargs):  # noqa: E501
        """Получение списка рассылок по типу отправления  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_tasks_by_mailingtype(mailing_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_type: Тип получателя рассылки (required)
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :param bool is_waiting: Выбирать ожидающие отправки или отправленные
        :return: MailingItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_tasks_by_mailingtype_with_http_info(mailing_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_message_tasks_by_mailingtype_with_http_info(mailing_type, **kwargs)  # noqa: E501
            return data

    def get_message_tasks_by_mailingtype_with_http_info(self, mailing_type, **kwargs):  # noqa: E501
        """Получение списка рассылок по типу отправления  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_tasks_by_mailingtype_with_http_info(mailing_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_type: Тип получателя рассылки (required)
        :param int limit: Размер выборки
        :param int offset: Смещение выборки
        :param bool is_waiting: Выбирать ожидающие отправки или отправленные
        :return: MailingItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mailing_type', 'limit', 'offset', 'is_waiting']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_tasks_by_mailingtype" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mailing_type' is set
        if ('mailing_type' not in params or
                params['mailing_type'] is None):
            raise ValueError("Missing the required parameter `mailing_type` when calling `get_message_tasks_by_mailingtype`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mailing_type' in params:
            path_params['MailingType'] = params['mailing_type']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'is_waiting' in params:
            query_params.append(('isWaiting', params['is_waiting']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/tasks/{MailingType}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItemList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_template_by_key(self, key, **kwargs):  # noqa: E501
        """Получение шаблона  # noqa: E501

        Получение шаблона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_template_by_key(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Ключ шаблона, уникальный в рамках компании (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_template_by_key_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_message_template_by_key_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_message_template_by_key_with_http_info(self, key, **kwargs):  # noqa: E501
        """Получение шаблона  # noqa: E501

        Получение шаблона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_template_by_key_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Ключ шаблона, уникальный в рамках компании (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_template_by_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_message_template_by_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/template/{key}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_message_templates(self, **kwargs):  # noqa: E501
        """Список шаблонов  # noqa: E501

        Список шаблонов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение от начала выборки
        :return: list[MessageTemplateList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_message_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_message_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_message_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Список шаблонов  # noqa: E501

        Список шаблонов  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_message_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Размер выборки
        :param int offset: Смещение от начала выборки
        :return: list[MessageTemplateList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_message_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/templates/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MessageTemplateList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message(self, body, **kwargs):  # noqa: E501
        """Синхронная отправка одного сообщения.  # noqa: E501

        Синхронная отправка одиночного сообщения по списку адресов.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageSingle body: (required)
        :return: list[SingleMessageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_with_http_info(self, body, **kwargs):  # noqa: E501
        """Синхронная отправка одного сообщения.  # noqa: E501

        Синхронная отправка одиночного сообщения по списку адресов.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageSingle body: (required)
        :return: list[SingleMessageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SingleMessageResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_deferred_by_fabricid(self, fabric_id, body, **kwargs):  # noqa: E501
        """Обновление объекта рассылки  # noqa: E501

        Позволяет редактировать и обновлять данные в запланированной рассылке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_deferred_by_fabricid(fabric_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id: Идентификатор рассылки отложенной (required)
        :param MessageFabric body: (required)
        :return: MessageFabric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_deferred_by_fabricid_with_http_info(fabric_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_deferred_by_fabricid_with_http_info(fabric_id, body, **kwargs)  # noqa: E501
            return data

    def post_message_deferred_by_fabricid_with_http_info(self, fabric_id, body, **kwargs):  # noqa: E501
        """Обновление объекта рассылки  # noqa: E501

        Позволяет редактировать и обновлять данные в запланированной рассылке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_deferred_by_fabricid_with_http_info(fabric_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_id: Идентификатор рассылки отложенной (required)
        :param MessageFabric body: (required)
        :return: MessageFabric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_deferred_by_fabricid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_id' is set
        if ('fabric_id' not in params or
                params['fabric_id'] is None):
            raise ValueError("Missing the required parameter `fabric_id` when calling `post_message_deferred_by_fabricid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_deferred_by_fabricid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_id' in params:
            path_params['FabricId'] = params['fabric_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/deferred/{FabricId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageFabric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_fabric(self, body, **kwargs):  # noqa: E501
        """Создание и отправка группы сообщений  # noqa: E501

        Создание и отправка группы сообщений по заданному селектору пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_fabric(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageFabric body: (required)
        :return: MessageHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_fabric_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_fabric_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_fabric_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание и отправка группы сообщений  # noqa: E501

        Создание и отправка группы сообщений по заданному селектору пользователей  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_fabric_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageFabric body: (required)
        :return: MessageHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_fabric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_fabric`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/fabric/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_by_mailingid(self, mailing_id, body, **kwargs):  # noqa: E501
        """Обновление данных рассылки по ID рассылки  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_by_mailingid(mailing_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_id: Идентификатор рассылки (required)
        :param UpdateMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_by_mailingid_with_http_info(mailing_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_by_mailingid_with_http_info(mailing_id, body, **kwargs)  # noqa: E501
            return data

    def post_message_task_by_mailingid_with_http_info(self, mailing_id, body, **kwargs):  # noqa: E501
        """Обновление данных рассылки по ID рассылки  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_by_mailingid_with_http_info(mailing_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mailing_id: Идентификатор рассылки (required)
        :param UpdateMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mailing_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_by_mailingid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mailing_id' is set
        if ('mailing_id' not in params or
                params['mailing_id'] is None):
            raise ValueError("Missing the required parameter `mailing_id` when calling `post_message_task_by_mailingid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_by_mailingid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mailing_id' in params:
            path_params['MailingId'] = params['mailing_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/{MailingId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_email(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку сообщений на указанные адреса электронной почты  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_email(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewEmailMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_email_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_email_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_email_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку сообщений на указанные адреса электронной почты  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_email_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewEmailMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/email/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_mailing(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на массовую рассылку сообщений  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_mailing(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewMassMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_mailing_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_mailing_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_mailing_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на массовую рассылку сообщений  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_mailing_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewMassMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_mailing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_mailing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/mailing/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_push(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку пуш-сообщений на указанные токены устройств  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_push(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewPushMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_push_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_push_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_push_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку пуш-сообщений на указанные токены устройств  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_push_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewPushMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_push" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_push`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/push/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_sms(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку sms-сообщений на указанные номера телефонов  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_sms(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSmsMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_sms_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_sms_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_sms_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку sms-сообщений на указанные номера телефонов  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_sms_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSmsMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_sms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_sms`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/sms/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_template_email(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового email сообщения  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_email(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_template_email_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_template_email_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_template_email_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового email сообщения  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_email_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_template_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_template_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/template/email/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_template_push(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового пуш-сообщения  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_push(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PushTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_template_push_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_template_push_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_template_push_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового пуш-сообщения  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_push_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PushTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_template_push" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_template_push`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/template/push/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_template_sms(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового sms-сообщения  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_sms(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmsTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_template_sms_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_template_sms_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_template_sms_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового sms-сообщения  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_sms_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmsTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_template_sms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_template_sms`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/template/sms/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_template_user(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового сообщения пользователю  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_template_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_template_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_template_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание из шаблона нового сообщения пользователю  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_template_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserTemplateMessage body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_template_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_template_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/template/user/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_task_users(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку сообщений конкретным пользователям  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_users(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewUserMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_task_users_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_task_users_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_task_users_with_http_info(self, body, **kwargs):  # noqa: E501
        """Создание нового задания на рассылку сообщений конкретным пользователям  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_task_users_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewUserMailingItem body: (required)
        :return: MailingItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_task_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_task_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/task/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailingItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_template(self, template, **kwargs):  # noqa: E501
        """Создание шаблона рассылки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_template(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageTemplate template: (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_template_with_http_info(template, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_template_with_http_info(template, **kwargs)  # noqa: E501
            return data

    def post_message_template_with_http_info(self, template, **kwargs):  # noqa: E501
        """Создание шаблона рассылки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_template_with_http_info(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageTemplate template: (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template' is set
        if ('template' not in params or
                params['template'] is None):
            raise ValueError("Missing the required parameter `template` when calling `post_message_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/template/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_message_template_by_key(self, key, template, **kwargs):  # noqa: E501
        """Обновление или создание шаблона  # noqa: E501

        Обновление или создание шаблона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_template_by_key(key, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Ключ шаблона, уникальный в рамках компании (required)
        :param MessageTemplate template: (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_template_by_key_with_http_info(key, template, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_template_by_key_with_http_info(key, template, **kwargs)  # noqa: E501
            return data

    def post_message_template_by_key_with_http_info(self, key, template, **kwargs):  # noqa: E501
        """Обновление или создание шаблона  # noqa: E501

        Обновление или создание шаблона  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_template_by_key_with_http_info(key, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Ключ шаблона, уникальный в рамках компании (required)
        :param MessageTemplate template: (required)
        :return: MessageTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_template_by_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_message_template_by_key`")  # noqa: E501
        # verify the required parameter 'template' is set
        if ('template' not in params or
                params['template'] is None):
            raise ValueError("Missing the required parameter `template` when calling `post_message_template_by_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/message/template/{key}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
