# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class AnalyticsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_analytics_catalog_show_item_by_itemid(self, item_id, **kwargs):  # noqa: E501
        """Количество уникальных просмотров в заданный промежуток времени  # noqa: E501

        Количество уникальных просмотров в заданный промежуток времени  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_catalog_show_item_by_itemid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :return: AnalyticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analytics_catalog_show_item_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analytics_catalog_show_item_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_analytics_catalog_show_item_by_itemid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Количество уникальных просмотров в заданный промежуток времени  # noqa: E501

        Количество уникальных просмотров в заданный промежуток времени  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_catalog_show_item_by_itemid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :return: AnalyticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'begin_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_catalog_show_item_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_analytics_catalog_show_item_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/analytics/catalog/show/item/{itemId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analytics_orders_status(self, query, status, **kwargs):  # noqa: E501
        """Выборка из заказов за указанный промежуток времени по статусу.  # noqa: E501

        Выборка заказов производится по указанному статусу окончательно установленном в данном временном промежутке и не изменившемся до текущего времени. Результат массив идентификаторов пользователей без дубликатов или идентификаторы заказа в зависимости от значения query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_orders_status(query, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Результаты выборки * ids - идентификаторы заказов * users - идентификаторы пользователей заказов без повторений  (required)
        :param str status: Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   (required)
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analytics_orders_status_with_http_info(query, status, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analytics_orders_status_with_http_info(query, status, **kwargs)  # noqa: E501
            return data

    def get_analytics_orders_status_with_http_info(self, query, status, **kwargs):  # noqa: E501
        """Выборка из заказов за указанный промежуток времени по статусу.  # noqa: E501

        Выборка заказов производится по указанному статусу окончательно установленном в данном временном промежутке и не изменившемся до текущего времени. Результат массив идентификаторов пользователей без дубликатов или идентификаторы заказа в зависимости от значения query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_orders_status_with_http_info(query, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Результаты выборки * ids - идентификаторы заказов * users - идентификаторы пользователей заказов без повторений  (required)
        :param str status: Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   (required)
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'status', 'begin_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_orders_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `get_analytics_orders_status`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `get_analytics_orders_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/analytics/orders/status/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analytics_orders_status_csv(self, fields, type, status, **kwargs):  # noqa: E501
        """Выгрузка CSV по заказам  # noqa: E501

        Для экспорта доступны поля заказа и поля профиля пользователя. Поля профиля пользователя указываются префиксом **user**, заказа **order**. Для вывода данных в csv доступны все поля заказа и профиля пользователя по маске **user.***  и **order.***. Например: **?fields=user.firstName,order.status** вернет csv файл состоящий из двух колонок с именем пользователя и статусом заказа. При работе со свойствами заказов или пользователей указывается **order.properties.myprop**, в этом случае будет подставлено значение с ключем myprop (если значение больше одного, то они будут перечисленны через разделитель отличный от разделителя csv). Если значение свойства является объектом, то допустимо использование синтаксиса **order.properties.myprop.keyobj1**, в этом случае интерпритатор будет использовать из значения ключа myprop, ключ keyobj1   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_orders_status_csv(fields, type, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Поля выбираемые для импорта из профиля пользователя и заказа. Пример корректного значения: 'login,communications.phone' Описание см выше. (required)
        :param str type: Тип заказа: * items - покупка товаров * services - запись на сервис  (required)
        :param str status: Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   (required)
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :param str field_aliases: Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analytics_orders_status_csv_with_http_info(fields, type, status, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analytics_orders_status_csv_with_http_info(fields, type, status, **kwargs)  # noqa: E501
            return data

    def get_analytics_orders_status_csv_with_http_info(self, fields, type, status, **kwargs):  # noqa: E501
        """Выгрузка CSV по заказам  # noqa: E501

        Для экспорта доступны поля заказа и поля профиля пользователя. Поля профиля пользователя указываются префиксом **user**, заказа **order**. Для вывода данных в csv доступны все поля заказа и профиля пользователя по маске **user.***  и **order.***. Например: **?fields=user.firstName,order.status** вернет csv файл состоящий из двух колонок с именем пользователя и статусом заказа. При работе со свойствами заказов или пользователей указывается **order.properties.myprop**, в этом случае будет подставлено значение с ключем myprop (если значение больше одного, то они будут перечисленны через разделитель отличный от разделителя csv). Если значение свойства является объектом, то допустимо использование синтаксиса **order.properties.myprop.keyobj1**, в этом случае интерпритатор будет использовать из значения ключа myprop, ключ keyobj1   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_orders_status_csv_with_http_info(fields, type, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Поля выбираемые для импорта из профиля пользователя и заказа. Пример корректного значения: 'login,communications.phone' Описание см выше. (required)
        :param str type: Тип заказа: * items - покупка товаров * services - запись на сервис  (required)
        :param str status: Статус окончательно установленный в данном временном промежутке и не изменившийся до текущего времени * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   (required)
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :param str field_aliases: Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'type', 'status', 'begin_time', 'end_time', 'field_aliases']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_orders_status_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fields' is set
        if ('fields' not in params or
                params['fields'] is None):
            raise ValueError("Missing the required parameter `fields` when calling `get_analytics_orders_status_csv`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_analytics_orders_status_csv`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `get_analytics_orders_status_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'field_aliases' in params:
            query_params.append(('fieldAliases', params['field_aliases']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/analytics/orders/status/csv/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analytics_orders_users(self, **kwargs):  # noqa: E501
        """Выборка пользователей когда-либо совершавших заказ.  # noqa: E501

        Выборка пользователей когда-либо совершавших заказ.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_orders_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analytics_orders_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_analytics_orders_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_analytics_orders_users_with_http_info(self, **kwargs):  # noqa: E501
        """Выборка пользователей когда-либо совершавших заказ.  # noqa: E501

        Выборка пользователей когда-либо совершавших заказ.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_orders_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int begin_time: Таймштамп начала выборки. Если 0 или не указан то ограничение отсутствует.
        :param int end_time: Таймштамп окончания выборки. Если 0 или не указан то ограничение отсутствует.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['begin_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_orders_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/analytics/orders/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analytics_push_by_itemid(self, item_id, **kwargs):  # noqa: E501
        """Статистика рассылки  # noqa: E501

        Статистика по рассылке push уведомлений  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_push_by_itemid(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: AnalyticsPushResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analytics_push_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analytics_push_by_itemid_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_analytics_push_by_itemid_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Статистика рассылки  # noqa: E501

        Статистика по рассылке push уведомлений  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_push_by_itemid_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :return: AnalyticsPushResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_push_by_itemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_analytics_push_by_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/analytics/push/{itemId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsPushResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analytics_push_by_itemid_unopened_csv(self, item_id, fields, **kwargs):  # noqa: E501
        """Выгрузка CSV по push рассылке  # noqa: E501

        Выгрука CSV по push рассылке. Доступны все поля профиля пользователя.  Поля базовой модели доступны просто по названию. Поля перечисляются через запятую. Примеры полей: * firstName - имя пользователя * login - логин пользователя * location.city - город пользователя * properties.myprops - значения свойства с ключем myprops * communications.phone - номера телефонов пользователя   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_push_by_itemid_unopened_csv(item_id, fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param str fields: Поля выбираемые для импорта из профиля пользователя. Пример корректного значения: 'login,communications.phone' Описание см выше. (required)
        :param str field_aliases: Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analytics_push_by_itemid_unopened_csv_with_http_info(item_id, fields, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analytics_push_by_itemid_unopened_csv_with_http_info(item_id, fields, **kwargs)  # noqa: E501
            return data

    def get_analytics_push_by_itemid_unopened_csv_with_http_info(self, item_id, fields, **kwargs):  # noqa: E501
        """Выгрузка CSV по push рассылке  # noqa: E501

        Выгрука CSV по push рассылке. Доступны все поля профиля пользователя.  Поля базовой модели доступны просто по названию. Поля перечисляются через запятую. Примеры полей: * firstName - имя пользователя * login - логин пользователя * location.city - город пользователя * properties.myprops - значения свойства с ключем myprops * communications.phone - номера телефонов пользователя   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analytics_push_by_itemid_unopened_csv_with_http_info(item_id, fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: Идентификатор элемента (required)
        :param str fields: Поля выбираемые для импорта из профиля пользователя. Пример корректного значения: 'login,communications.phone' Описание см выше. (required)
        :param str field_aliases: Названия полей выбираемые для импорта в понятной человеку форме. Если параметр передан, то проверяется совпадение количества полей с полем fields
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'fields', 'field_aliases']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_push_by_itemid_unopened_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_analytics_push_by_itemid_unopened_csv`")  # noqa: E501
        # verify the required parameter 'fields' is set
        if ('fields' not in params or
                params['fields'] is None):
            raise ValueError("Missing the required parameter `fields` when calling `get_analytics_push_by_itemid_unopened_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'field_aliases' in params:
            query_params.append(('fieldAliases', params['field_aliases']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/analytics/push/{itemId}/unopened/csv/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
