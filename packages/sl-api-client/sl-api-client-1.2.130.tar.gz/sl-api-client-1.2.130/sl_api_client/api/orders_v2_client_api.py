# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sl_api_client.api_client import ApiClient


class OrdersV2ClientApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_v2_orders_my_cart_field_by_fieldname(self, field_name, **kwargs):  # noqa: E501
        """Удаление поля с данными пользователя  # noqa: E501

        Удаление поля с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_field_by_fieldname(field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_name: Ключ поля с пользовательскими данными (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_v2_orders_my_cart_field_by_fieldname_with_http_info(field_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_v2_orders_my_cart_field_by_fieldname_with_http_info(field_name, **kwargs)  # noqa: E501
            return data

    def delete_v2_orders_my_cart_field_by_fieldname_with_http_info(self, field_name, **kwargs):  # noqa: E501
        """Удаление поля с данными пользователя  # noqa: E501

        Удаление поля с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_field_by_fieldname_with_http_info(field_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_name: Ключ поля с пользовательскими данными (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_v2_orders_my_cart_field_by_fieldname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `delete_v2_orders_my_cart_field_by_fieldname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_name' in params:
            path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/field/{fieldName}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_v2_orders_my_cart_fields(self, **kwargs):  # noqa: E501
        """Удаление всех полей с данными пользователя  # noqa: E501

        Удаление всех полей с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_fields(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_v2_orders_my_cart_fields_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_v2_orders_my_cart_fields_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_v2_orders_my_cart_fields_with_http_info(self, **kwargs):  # noqa: E501
        """Удаление всех полей с данными пользователя  # noqa: E501

        Удаление всех полей с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_fields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_v2_orders_my_cart_fields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/fields/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_v2_orders_my_cart_item_by_orderitemid(self, order_item_id, **kwargs):  # noqa: E501
        """Удаление товара из корзины по ID  # noqa: E501

        Удаление товара из корзины по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_item_by_orderitemid(order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_v2_orders_my_cart_item_by_orderitemid_with_http_info(order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_v2_orders_my_cart_item_by_orderitemid_with_http_info(order_item_id, **kwargs)  # noqa: E501
            return data

    def delete_v2_orders_my_cart_item_by_orderitemid_with_http_info(self, order_item_id, **kwargs):  # noqa: E501
        """Удаление товара из корзины по ID  # noqa: E501

        Удаление товара из корзины по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_item_by_orderitemid_with_http_info(order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_v2_orders_my_cart_item_by_orderitemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_item_id' is set
        if ('order_item_id' not in params or
                params['order_item_id'] is None):
            raise ValueError("Missing the required parameter `order_item_id` when calling `delete_v2_orders_my_cart_item_by_orderitemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_item_id' in params:
            path_params['orderItemId'] = params['order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/item/{orderItemId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid(self, order_item_id, order_extra_id, **kwargs):  # noqa: E501
        """Удаление модификатора товара в корзине  # noqa: E501

        Удаление модификатора товара в корзине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid(order_item_id, order_extra_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param str order_extra_id: Идентификатор модификатора позиции заказа (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid_with_http_info(order_item_id, order_extra_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid_with_http_info(order_item_id, order_extra_id, **kwargs)  # noqa: E501
            return data

    def delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid_with_http_info(self, order_item_id, order_extra_id, **kwargs):  # noqa: E501
        """Удаление модификатора товара в корзине  # noqa: E501

        Удаление модификатора товара в корзине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid_with_http_info(order_item_id, order_extra_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param str order_extra_id: Идентификатор модификатора позиции заказа (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_item_id', 'order_extra_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_item_id' is set
        if ('order_item_id' not in params or
                params['order_item_id'] is None):
            raise ValueError("Missing the required parameter `order_item_id` when calling `delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid`")  # noqa: E501
        # verify the required parameter 'order_extra_id' is set
        if ('order_extra_id' not in params or
                params['order_extra_id'] is None):
            raise ValueError("Missing the required parameter `order_extra_id` when calling `delete_v2_orders_my_cart_item_by_orderitemid_extra_by_orderextraid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_item_id' in params:
            path_params['orderItemId'] = params['order_item_id']  # noqa: E501
        if 'order_extra_id' in params:
            path_params['orderExtraId'] = params['order_extra_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/item/{orderItemId}/extra/{orderExtraId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_v2_orders_my_cart_items(self, **kwargs):  # noqa: E501
        """Удаление товаров из корзины  # noqa: E501

        Удаление товаров из корзины  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_v2_orders_my_cart_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_v2_orders_my_cart_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_v2_orders_my_cart_items_with_http_info(self, **kwargs):  # noqa: E501
        """Удаление товаров из корзины  # noqa: E501

        Удаление товаров из корзины  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v2_orders_my_cart_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_v2_orders_my_cart_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/items/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v2_orders_my(self, limit, offset, **kwargs):  # noqa: E501
        """Получение списка заказов пользователя  # noqa: E501

        Получение списка заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_my(limit, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit:  (required)
        :param int offset:  (required)
        :return: OrderV2List
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_my_with_http_info(limit, offset, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_my_with_http_info(limit, offset, **kwargs)  # noqa: E501
            return data

    def get_v2_orders_my_with_http_info(self, limit, offset, **kwargs):  # noqa: E501
        """Получение списка заказов пользователя  # noqa: E501

        Получение списка заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_my_with_http_info(limit, offset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit:  (required)
        :param int offset:  (required)
        :return: OrderV2List
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_my" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_v2_orders_my`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_v2_orders_my`")  # noqa: E501

        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_v2_orders_my`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_v2_orders_my`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2List',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v2_orders_my_by_orderid(self, order_id, **kwargs):  # noqa: E501
        """Получение заказа пользователя по ID  # noqa: E501

        Получение заказа пользователя по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_my_by_orderid(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: OrderV2User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_my_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_my_by_orderid_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def get_v2_orders_my_by_orderid_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Получение заказа пользователя по ID  # noqa: E501

        Получение заказа пользователя по ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_my_by_orderid_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :return: OrderV2User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_my_by_orderid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `get_v2_orders_my_by_orderid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/{orderId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v2_orders_my_cart(self, **kwargs):  # noqa: E501
        """Получение корзины заказов.  # noqa: E501

        Получение корзины заказов. Если ее не существовало до этого  у пользователя, создается новая.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_my_cart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v2_orders_my_cart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_v2_orders_my_cart_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_v2_orders_my_cart_with_http_info(self, **kwargs):  # noqa: E501
        """Получение корзины заказов.  # noqa: E501

        Получение корзины заказов. Если ее не существовало до этого  у пользователя, создается новая.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v2_orders_my_cart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v2_orders_my_cart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_my_by_orderid_status(self, order_id, body, **kwargs):  # noqa: E501
        """Смена статуса заказа пользователем  # noqa: E501

        Смена статуса заказа пользователем. Возможно изменять только на те статусы,  на которые разрешено менять пользователю.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_by_orderid_status(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param Body4 body: (required)
        :return: OrderV2User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_my_by_orderid_status_with_http_info(order_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_my_by_orderid_status_with_http_info(order_id, body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_my_by_orderid_status_with_http_info(self, order_id, body, **kwargs):  # noqa: E501
        """Смена статуса заказа пользователем  # noqa: E501

        Смена статуса заказа пользователем. Возможно изменять только на те статусы,  на которые разрешено менять пользователю.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_by_orderid_status_with_http_info(order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заказа (required)
        :param Body4 body: (required)
        :return: OrderV2User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_my_by_orderid_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `post_v2_orders_my_by_orderid_status`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_my_by_orderid_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/{orderId}/status/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderV2User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_my_cart_field_by_fieldname(self, field_name, body, **kwargs):  # noqa: E501
        """Заполнение поля с данными пользователя  # noqa: E501

        Заполнение поля с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_cart_field_by_fieldname(field_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_name: Ключ поля с пользовательскими данными (required)
        :param str body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_my_cart_field_by_fieldname_with_http_info(field_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_my_cart_field_by_fieldname_with_http_info(field_name, body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_my_cart_field_by_fieldname_with_http_info(self, field_name, body, **kwargs):  # noqa: E501
        """Заполнение поля с данными пользователя  # noqa: E501

        Заполнение поля с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_cart_field_by_fieldname_with_http_info(field_name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_name: Ключ поля с пользовательскими данными (required)
        :param str body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_my_cart_field_by_fieldname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field_name' is set
        if ('field_name' not in params or
                params['field_name'] is None):
            raise ValueError("Missing the required parameter `field_name` when calling `post_v2_orders_my_cart_field_by_fieldname`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_my_cart_field_by_fieldname`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_name' in params:
            path_params['fieldName'] = params['field_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/field/{fieldName}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_my_cart_fields(self, body, **kwargs):  # noqa: E501
        """Заполнение нескольких полей с данными пользователя  # noqa: E501

        Заполнение нескольких полей с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_cart_fields(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_my_cart_fields_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_my_cart_fields_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_my_cart_fields_with_http_info(self, body, **kwargs):  # noqa: E501
        """Заполнение нескольких полей с данными пользователя  # noqa: E501

        Заполнение нескольких полей с данными пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_cart_fields_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_my_cart_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_my_cart_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/fields/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_my_cart_item_by_orderitemid(self, order_item_id, body, **kwargs):  # noqa: E501
        """Обновление товара в корзине  # noqa: E501

        Обновление товара в корзине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_cart_item_by_orderitemid(order_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param CartItem body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_my_cart_item_by_orderitemid_with_http_info(order_item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_my_cart_item_by_orderitemid_with_http_info(order_item_id, body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_my_cart_item_by_orderitemid_with_http_info(self, order_item_id, body, **kwargs):  # noqa: E501
        """Обновление товара в корзине  # noqa: E501

        Обновление товара в корзине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_cart_item_by_orderitemid_with_http_info(order_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param CartItem body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_my_cart_item_by_orderitemid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_item_id' is set
        if ('order_item_id' not in params or
                params['order_item_id'] is None):
            raise ValueError("Missing the required parameter `order_item_id` when calling `post_v2_orders_my_cart_item_by_orderitemid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_my_cart_item_by_orderitemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_item_id' in params:
            path_params['orderItemId'] = params['order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/item/{orderItemId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_v2_orders_my_request(self, body, **kwargs):  # noqa: E501
        """Поиск заказов пользователя  # noqa: E501

        Поиск заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: OrdersV2QueryDslResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_v2_orders_my_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_v2_orders_my_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_v2_orders_my_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Поиск заказов пользователя  # noqa: E501

        Поиск заказов пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_v2_orders_my_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: OrdersV2QueryDslResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_v2_orders_my_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_v2_orders_my_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersV2QueryDslResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_v2_orders_my_cart_item_by_orderitemid_extras(self, order_item_id, body, **kwargs):  # noqa: E501
        """Добавление модификатора товара в корзине  # noqa: E501

        Добавление модификатора товара в корзине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_v2_orders_my_cart_item_by_orderitemid_extras(order_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param CartItem body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_v2_orders_my_cart_item_by_orderitemid_extras_with_http_info(order_item_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_v2_orders_my_cart_item_by_orderitemid_extras_with_http_info(order_item_id, body, **kwargs)  # noqa: E501
            return data

    def put_v2_orders_my_cart_item_by_orderitemid_extras_with_http_info(self, order_item_id, body, **kwargs):  # noqa: E501
        """Добавление модификатора товара в корзине  # noqa: E501

        Добавление модификатора товара в корзине  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_v2_orders_my_cart_item_by_orderitemid_extras_with_http_info(order_item_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_item_id: Идентификатор позиции заказа (required)
        :param CartItem body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_item_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_v2_orders_my_cart_item_by_orderitemid_extras" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_item_id' is set
        if ('order_item_id' not in params or
                params['order_item_id'] is None):
            raise ValueError("Missing the required parameter `order_item_id` when calling `put_v2_orders_my_cart_item_by_orderitemid_extras`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_v2_orders_my_cart_item_by_orderitemid_extras`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_item_id' in params:
            path_params['orderItemId'] = params['order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/item/{orderItemId}/extras/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_v2_orders_my_cart_items(self, body, **kwargs):  # noqa: E501
        """Добавление товара в корзину  # noqa: E501

        Добавление товара в корзину  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_v2_orders_my_cart_items(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CartItem body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_v2_orders_my_cart_items_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_v2_orders_my_cart_items_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_v2_orders_my_cart_items_with_http_info(self, body, **kwargs):  # noqa: E501
        """Добавление товара в корзину  # noqa: E501

        Добавление товара в корзину  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_v2_orders_my_cart_items_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CartItem body: (required)
        :return: Cart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_v2_orders_my_cart_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_v2_orders_my_cart_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-cid', 'x-token']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/my/cart/items/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
