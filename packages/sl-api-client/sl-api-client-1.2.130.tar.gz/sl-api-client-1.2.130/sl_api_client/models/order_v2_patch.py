# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderV2Patch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customers_data': 'object',
        'delivery': 'Delivery',
        'items': 'CartItems',
        'loyalty': 'Loyalty',
        'remote_id': 'str'
    }

    attribute_map = {
        'customers_data': 'customersData',
        'delivery': 'delivery',
        'items': 'items',
        'loyalty': 'loyalty',
        'remote_id': 'remoteId'
    }

    def __init__(self, customers_data=None, delivery=None, items=None, loyalty=None, remote_id=None):  # noqa: E501
        """OrderV2Patch - a model defined in Swagger"""  # noqa: E501

        self._customers_data = None
        self._delivery = None
        self._items = None
        self._loyalty = None
        self._remote_id = None
        self.discriminator = None

        if customers_data is not None:
            self.customers_data = customers_data
        if delivery is not None:
            self.delivery = delivery
        if items is not None:
            self.items = items
        if loyalty is not None:
            self.loyalty = loyalty
        if remote_id is not None:
            self.remote_id = remote_id

    @property
    def customers_data(self):
        """Gets the customers_data of this OrderV2Patch.  # noqa: E501

        Объект с кастомными полями. Объект, где ключи и значения должны быть строками.  # noqa: E501

        :return: The customers_data of this OrderV2Patch.  # noqa: E501
        :rtype: object
        """
        return self._customers_data

    @customers_data.setter
    def customers_data(self, customers_data):
        """Sets the customers_data of this OrderV2Patch.

        Объект с кастомными полями. Объект, где ключи и значения должны быть строками.  # noqa: E501

        :param customers_data: The customers_data of this OrderV2Patch.  # noqa: E501
        :type: object
        """

        self._customers_data = customers_data

    @property
    def delivery(self):
        """Gets the delivery of this OrderV2Patch.  # noqa: E501


        :return: The delivery of this OrderV2Patch.  # noqa: E501
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this OrderV2Patch.


        :param delivery: The delivery of this OrderV2Patch.  # noqa: E501
        :type: Delivery
        """

        self._delivery = delivery

    @property
    def items(self):
        """Gets the items of this OrderV2Patch.  # noqa: E501


        :return: The items of this OrderV2Patch.  # noqa: E501
        :rtype: CartItems
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderV2Patch.


        :param items: The items of this OrderV2Patch.  # noqa: E501
        :type: CartItems
        """

        self._items = items

    @property
    def loyalty(self):
        """Gets the loyalty of this OrderV2Patch.  # noqa: E501


        :return: The loyalty of this OrderV2Patch.  # noqa: E501
        :rtype: Loyalty
        """
        return self._loyalty

    @loyalty.setter
    def loyalty(self, loyalty):
        """Sets the loyalty of this OrderV2Patch.


        :param loyalty: The loyalty of this OrderV2Patch.  # noqa: E501
        :type: Loyalty
        """

        self._loyalty = loyalty

    @property
    def remote_id(self):
        """Gets the remote_id of this OrderV2Patch.  # noqa: E501

        Идентификатор заказа во внешней системе  # noqa: E501

        :return: The remote_id of this OrderV2Patch.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this OrderV2Patch.

        Идентификатор заказа во внешней системе  # noqa: E501

        :param remote_id: The remote_id of this OrderV2Patch.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderV2Patch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderV2Patch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
