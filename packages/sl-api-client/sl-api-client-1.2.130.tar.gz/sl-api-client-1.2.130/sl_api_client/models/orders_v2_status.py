# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrdersV2Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'name': 'str',
        'can_user_set': 'bool',
        'is_payed': 'bool',
        'is_waiting_payment': 'bool',
        'next': 'list[str]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'can_user_set': 'canUserSet',
        'is_payed': 'isPayed',
        'is_waiting_payment': 'isWaitingPayment',
        'next': 'next'
    }

    def __init__(self, key=None, name=None, can_user_set=None, is_payed=None, is_waiting_payment=None, next=None):  # noqa: E501
        """OrdersV2Status - a model defined in Swagger"""  # noqa: E501

        self._key = None
        self._name = None
        self._can_user_set = None
        self._is_payed = None
        self._is_waiting_payment = None
        self._next = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if can_user_set is not None:
            self.can_user_set = can_user_set
        if is_payed is not None:
            self.is_payed = is_payed
        if is_waiting_payment is not None:
            self.is_waiting_payment = is_waiting_payment
        if next is not None:
            self.next = next

    @property
    def key(self):
        """Gets the key of this OrdersV2Status.  # noqa: E501

        Ключ статуса  # noqa: E501

        :return: The key of this OrdersV2Status.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this OrdersV2Status.

        Ключ статуса  # noqa: E501

        :param key: The key of this OrdersV2Status.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this OrdersV2Status.  # noqa: E501

        Человекочитаемое название статуса  # noqa: E501

        :return: The name of this OrdersV2Status.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrdersV2Status.

        Человекочитаемое название статуса  # noqa: E501

        :param name: The name of this OrdersV2Status.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def can_user_set(self):
        """Gets the can_user_set of this OrdersV2Status.  # noqa: E501

        Флаг, которым отмечаются статусы, которые может устанавливать пользователь  # noqa: E501

        :return: The can_user_set of this OrdersV2Status.  # noqa: E501
        :rtype: bool
        """
        return self._can_user_set

    @can_user_set.setter
    def can_user_set(self, can_user_set):
        """Sets the can_user_set of this OrdersV2Status.

        Флаг, которым отмечаются статусы, которые может устанавливать пользователь  # noqa: E501

        :param can_user_set: The can_user_set of this OrdersV2Status.  # noqa: E501
        :type: bool
        """

        self._can_user_set = can_user_set

    @property
    def is_payed(self):
        """Gets the is_payed of this OrdersV2Status.  # noqa: E501

        Флаг, которым отмечается статус, который ставится заказам, которые оплачен  # noqa: E501

        :return: The is_payed of this OrdersV2Status.  # noqa: E501
        :rtype: bool
        """
        return self._is_payed

    @is_payed.setter
    def is_payed(self, is_payed):
        """Sets the is_payed of this OrdersV2Status.

        Флаг, которым отмечается статус, который ставится заказам, которые оплачен  # noqa: E501

        :param is_payed: The is_payed of this OrdersV2Status.  # noqa: E501
        :type: bool
        """

        self._is_payed = is_payed

    @property
    def is_waiting_payment(self):
        """Gets the is_waiting_payment of this OrdersV2Status.  # noqa: E501

        Флаг, которым отмечается статус, который ставится заказам, которые ождают оплаты  # noqa: E501

        :return: The is_waiting_payment of this OrdersV2Status.  # noqa: E501
        :rtype: bool
        """
        return self._is_waiting_payment

    @is_waiting_payment.setter
    def is_waiting_payment(self, is_waiting_payment):
        """Sets the is_waiting_payment of this OrdersV2Status.

        Флаг, которым отмечается статус, который ставится заказам, которые ождают оплаты  # noqa: E501

        :param is_waiting_payment: The is_waiting_payment of this OrdersV2Status.  # noqa: E501
        :type: bool
        """

        self._is_waiting_payment = is_waiting_payment

    @property
    def next(self):
        """Gets the next of this OrdersV2Status.  # noqa: E501

        Список ключе статусов, на которые можно перейти из текущего  # noqa: E501

        :return: The next of this OrdersV2Status.  # noqa: E501
        :rtype: list[str]
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this OrdersV2Status.

        Список ключе статусов, на которые можно перейти из текущего  # noqa: E501

        :param next: The next of this OrdersV2Status.  # noqa: E501
        :type: list[str]
        """

        self._next = next

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrdersV2Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrdersV2Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
