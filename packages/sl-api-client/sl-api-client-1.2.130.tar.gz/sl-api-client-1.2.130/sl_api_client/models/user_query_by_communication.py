# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserQueryByCommunication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirm': 'bool',
        'query': 'str',
        'type': 'str'
    }

    attribute_map = {
        'confirm': 'confirm',
        'query': 'query',
        'type': 'type'
    }

    def __init__(self, confirm=None, query=None, type=None):  # noqa: E501
        """UserQueryByCommunication - a model defined in Swagger"""  # noqa: E501

        self._confirm = None
        self._query = None
        self._type = None
        self.discriminator = None

        self.confirm = confirm
        self.query = query
        self.type = type

    @property
    def confirm(self):
        """Gets the confirm of this UserQueryByCommunication.  # noqa: E501

        Фильтр по флагу подтвержденности. false - это не подтвержденные, true - подтвержденные  # noqa: E501

        :return: The confirm of this UserQueryByCommunication.  # noqa: E501
        :rtype: bool
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this UserQueryByCommunication.

        Фильтр по флагу подтвержденности. false - это не подтвержденные, true - подтвержденные  # noqa: E501

        :param confirm: The confirm of this UserQueryByCommunication.  # noqa: E501
        :type: bool
        """
        if confirm is None:
            raise ValueError("Invalid value for `confirm`, must not be `None`")  # noqa: E501

        self._confirm = confirm

    @property
    def query(self):
        """Gets the query of this UserQueryByCommunication.  # noqa: E501

        Строка для поиска по тексту по полям login или value в communication. Строка должна точно соответствовать.  # noqa: E501

        :return: The query of this UserQueryByCommunication.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UserQueryByCommunication.

        Строка для поиска по тексту по полям login или value в communication. Строка должна точно соответствовать.  # noqa: E501

        :param query: The query of this UserQueryByCommunication.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def type(self):
        """Gets the type of this UserQueryByCommunication.  # noqa: E501

        Тип поля  # noqa: E501

        :return: The type of this UserQueryByCommunication.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserQueryByCommunication.

        Тип поля  # noqa: E501

        :param type: The type of this UserQueryByCommunication.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["email", "phone", "login", "vkSocial", "fbSocial"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserQueryByCommunication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserQueryByCommunication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
