# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExistingUsersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'UserWithRelations',
        'new_communication': 'list[Communication]',
        'line': 'int'
    }

    attribute_map = {
        'model': 'model',
        'new_communication': 'newCommunication',
        'line': 'line'
    }

    def __init__(self, model=None, new_communication=None, line=None):  # noqa: E501
        """ExistingUsersModel - a model defined in Swagger"""  # noqa: E501

        self._model = None
        self._new_communication = None
        self._line = None
        self.discriminator = None

        self.model = model
        if new_communication is not None:
            self.new_communication = new_communication
        if line is not None:
            self.line = line

    @property
    def model(self):
        """Gets the model of this ExistingUsersModel.  # noqa: E501


        :return: The model of this ExistingUsersModel.  # noqa: E501
        :rtype: UserWithRelations
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ExistingUsersModel.


        :param model: The model of this ExistingUsersModel.  # noqa: E501
        :type: UserWithRelations
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def new_communication(self):
        """Gets the new_communication of this ExistingUsersModel.  # noqa: E501

        Список средств коммуникаций, которые необходимо будет подтвердить  # noqa: E501

        :return: The new_communication of this ExistingUsersModel.  # noqa: E501
        :rtype: list[Communication]
        """
        return self._new_communication

    @new_communication.setter
    def new_communication(self, new_communication):
        """Sets the new_communication of this ExistingUsersModel.

        Список средств коммуникаций, которые необходимо будет подтвердить  # noqa: E501

        :param new_communication: The new_communication of this ExistingUsersModel.  # noqa: E501
        :type: list[Communication]
        """

        self._new_communication = new_communication

    @property
    def line(self):
        """Gets the line of this ExistingUsersModel.  # noqa: E501

        Номер строки из файла с данными  # noqa: E501

        :return: The line of this ExistingUsersModel.  # noqa: E501
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ExistingUsersModel.

        Номер строки из файла с данными  # noqa: E501

        :param line: The line of this ExistingUsersModel.  # noqa: E501
        :type: int
        """

        self._line = line

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExistingUsersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExistingUsersModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
