# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderV2User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_time': 'datetime',
        'customers_data': 'object',
        'delivery': 'Delivery',
        'id': 'str',
        'items': 'CartItems',
        'loyalty': 'Loyalty',
        'number': 'str',
        'payment': 'OrderV2UserPayment',
        'remote_id': 'str',
        'status': 'OrdersV2StatusShort',
        'update_time': 'datetime'
    }

    attribute_map = {
        'creation_time': 'creationTime',
        'customers_data': 'customersData',
        'delivery': 'delivery',
        'id': 'id',
        'items': 'items',
        'loyalty': 'loyalty',
        'number': 'number',
        'payment': 'payment',
        'remote_id': 'remoteId',
        'status': 'status',
        'update_time': 'updateTime'
    }

    def __init__(self, creation_time=None, customers_data=None, delivery=None, id=None, items=None, loyalty=None, number=None, payment=None, remote_id=None, status=None, update_time=None):  # noqa: E501
        """OrderV2User - a model defined in Swagger"""  # noqa: E501

        self._creation_time = None
        self._customers_data = None
        self._delivery = None
        self._id = None
        self._items = None
        self._loyalty = None
        self._number = None
        self._payment = None
        self._remote_id = None
        self._status = None
        self._update_time = None
        self.discriminator = None

        if creation_time is not None:
            self.creation_time = creation_time
        if customers_data is not None:
            self.customers_data = customers_data
        if delivery is not None:
            self.delivery = delivery
        if id is not None:
            self.id = id
        if items is not None:
            self.items = items
        if loyalty is not None:
            self.loyalty = loyalty
        if number is not None:
            self.number = number
        if payment is not None:
            self.payment = payment
        if remote_id is not None:
            self.remote_id = remote_id
        if status is not None:
            self.status = status
        if update_time is not None:
            self.update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this OrderV2User.  # noqa: E501

        Дата создания  # noqa: E501

        :return: The creation_time of this OrderV2User.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this OrderV2User.

        Дата создания  # noqa: E501

        :param creation_time: The creation_time of this OrderV2User.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def customers_data(self):
        """Gets the customers_data of this OrderV2User.  # noqa: E501

        Объект с кастомными полями. Объект, где ключи и значения должны быть строками.  # noqa: E501

        :return: The customers_data of this OrderV2User.  # noqa: E501
        :rtype: object
        """
        return self._customers_data

    @customers_data.setter
    def customers_data(self, customers_data):
        """Sets the customers_data of this OrderV2User.

        Объект с кастомными полями. Объект, где ключи и значения должны быть строками.  # noqa: E501

        :param customers_data: The customers_data of this OrderV2User.  # noqa: E501
        :type: object
        """

        self._customers_data = customers_data

    @property
    def delivery(self):
        """Gets the delivery of this OrderV2User.  # noqa: E501


        :return: The delivery of this OrderV2User.  # noqa: E501
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this OrderV2User.


        :param delivery: The delivery of this OrderV2User.  # noqa: E501
        :type: Delivery
        """

        self._delivery = delivery

    @property
    def id(self):
        """Gets the id of this OrderV2User.  # noqa: E501

        Идентификатор заказа  # noqa: E501

        :return: The id of this OrderV2User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderV2User.

        Идентификатор заказа  # noqa: E501

        :param id: The id of this OrderV2User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this OrderV2User.  # noqa: E501


        :return: The items of this OrderV2User.  # noqa: E501
        :rtype: CartItems
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderV2User.


        :param items: The items of this OrderV2User.  # noqa: E501
        :type: CartItems
        """

        self._items = items

    @property
    def loyalty(self):
        """Gets the loyalty of this OrderV2User.  # noqa: E501


        :return: The loyalty of this OrderV2User.  # noqa: E501
        :rtype: Loyalty
        """
        return self._loyalty

    @loyalty.setter
    def loyalty(self, loyalty):
        """Sets the loyalty of this OrderV2User.


        :param loyalty: The loyalty of this OrderV2User.  # noqa: E501
        :type: Loyalty
        """

        self._loyalty = loyalty

    @property
    def number(self):
        """Gets the number of this OrderV2User.  # noqa: E501

        Человекочитаемый номер заказа  # noqa: E501

        :return: The number of this OrderV2User.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrderV2User.

        Человекочитаемый номер заказа  # noqa: E501

        :param number: The number of this OrderV2User.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def payment(self):
        """Gets the payment of this OrderV2User.  # noqa: E501


        :return: The payment of this OrderV2User.  # noqa: E501
        :rtype: OrderV2UserPayment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this OrderV2User.


        :param payment: The payment of this OrderV2User.  # noqa: E501
        :type: OrderV2UserPayment
        """

        self._payment = payment

    @property
    def remote_id(self):
        """Gets the remote_id of this OrderV2User.  # noqa: E501

        Идентификатор заказа в сторонней системе (для интеграции)  # noqa: E501

        :return: The remote_id of this OrderV2User.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this OrderV2User.

        Идентификатор заказа в сторонней системе (для интеграции)  # noqa: E501

        :param remote_id: The remote_id of this OrderV2User.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def status(self):
        """Gets the status of this OrderV2User.  # noqa: E501


        :return: The status of this OrderV2User.  # noqa: E501
        :rtype: OrdersV2StatusShort
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderV2User.


        :param status: The status of this OrderV2User.  # noqa: E501
        :type: OrdersV2StatusShort
        """

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this OrderV2User.  # noqa: E501

        Дата обновления  # noqa: E501

        :return: The update_time of this OrderV2User.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OrderV2User.

        Дата обновления  # noqa: E501

        :param update_time: The update_time of this OrderV2User.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderV2User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderV2User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
