# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Price(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bonus': 'float',
        'cart': 'float',
        'delivery': 'float',
        'subtotal': 'float',
        'total': 'float'
    }

    attribute_map = {
        'bonus': 'bonus',
        'cart': 'cart',
        'delivery': 'delivery',
        'subtotal': 'subtotal',
        'total': 'total'
    }

    def __init__(self, bonus=None, cart=None, delivery=None, subtotal=None, total=None):  # noqa: E501
        """Price - a model defined in Swagger"""  # noqa: E501

        self._bonus = None
        self._cart = None
        self._delivery = None
        self._subtotal = None
        self._total = None
        self.discriminator = None

        if bonus is not None:
            self.bonus = bonus
        if cart is not None:
            self.cart = cart
        if delivery is not None:
            self.delivery = delivery
        if subtotal is not None:
            self.subtotal = subtotal
        if total is not None:
            self.total = total

    @property
    def bonus(self):
        """Gets the bonus of this Price.  # noqa: E501

        Использованные бонусы  # noqa: E501

        :return: The bonus of this Price.  # noqa: E501
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this Price.

        Использованные бонусы  # noqa: E501

        :param bonus: The bonus of this Price.  # noqa: E501
        :type: float
        """
        if bonus is not None and bonus < 0:  # noqa: E501
            raise ValueError("Invalid value for `bonus`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bonus = bonus

    @property
    def cart(self):
        """Gets the cart of this Price.  # noqa: E501

        Суммарная стоимость корзины заказа с учётом скидок  # noqa: E501

        :return: The cart of this Price.  # noqa: E501
        :rtype: float
        """
        return self._cart

    @cart.setter
    def cart(self, cart):
        """Sets the cart of this Price.

        Суммарная стоимость корзины заказа с учётом скидок  # noqa: E501

        :param cart: The cart of this Price.  # noqa: E501
        :type: float
        """
        if cart is not None and cart < 0:  # noqa: E501
            raise ValueError("Invalid value for `cart`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cart = cart

    @property
    def delivery(self):
        """Gets the delivery of this Price.  # noqa: E501

        Стоимость доставки  # noqa: E501

        :return: The delivery of this Price.  # noqa: E501
        :rtype: float
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this Price.

        Стоимость доставки  # noqa: E501

        :param delivery: The delivery of this Price.  # noqa: E501
        :type: float
        """
        if delivery is not None and delivery < 0:  # noqa: E501
            raise ValueError("Invalid value for `delivery`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delivery = delivery

    @property
    def subtotal(self):
        """Gets the subtotal of this Price.  # noqa: E501

        Промежуточная сумма  # noqa: E501

        :return: The subtotal of this Price.  # noqa: E501
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this Price.

        Промежуточная сумма  # noqa: E501

        :param subtotal: The subtotal of this Price.  # noqa: E501
        :type: float
        """
        if subtotal is not None and subtotal < 0:  # noqa: E501
            raise ValueError("Invalid value for `subtotal`, must be a value greater than or equal to `0`")  # noqa: E501

        self._subtotal = subtotal

    @property
    def total(self):
        """Gets the total of this Price.  # noqa: E501

        Сумма заказа к оплате  # noqa: E501

        :return: The total of this Price.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Price.

        Сумма заказа к оплате  # noqa: E501

        :param total: The total of this Price.  # noqa: E501
        :type: float
        """
        if total is not None and total < 0:  # noqa: E501
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Price, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Price):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
