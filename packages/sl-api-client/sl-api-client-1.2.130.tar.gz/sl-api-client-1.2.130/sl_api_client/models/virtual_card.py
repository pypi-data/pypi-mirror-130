# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VirtualCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_number': 'str',
        'is_created': 'bool',
        'is_verified': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'card_number': 'cardNumber',
        'is_created': 'isCreated',
        'is_verified': 'isVerified',
        'name': 'name'
    }

    def __init__(self, card_number=None, is_created=None, is_verified=None, name=None):  # noqa: E501
        """VirtualCard - a model defined in Swagger"""  # noqa: E501

        self._card_number = None
        self._is_created = None
        self._is_verified = None
        self._name = None
        self.discriminator = None

        if card_number is not None:
            self.card_number = card_number
        if is_created is not None:
            self.is_created = is_created
        if is_verified is not None:
            self.is_verified = is_verified
        if name is not None:
            self.name = name

    @property
    def card_number(self):
        """Gets the card_number of this VirtualCard.  # noqa: E501

        Номер карты  # noqa: E501

        :return: The card_number of this VirtualCard.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this VirtualCard.

        Номер карты  # noqa: E501

        :param card_number: The card_number of this VirtualCard.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def is_created(self):
        """Gets the is_created of this VirtualCard.  # noqa: E501

        Создана карта, или нет  # noqa: E501

        :return: The is_created of this VirtualCard.  # noqa: E501
        :rtype: bool
        """
        return self._is_created

    @is_created.setter
    def is_created(self, is_created):
        """Sets the is_created of this VirtualCard.

        Создана карта, или нет  # noqa: E501

        :param is_created: The is_created of this VirtualCard.  # noqa: E501
        :type: bool
        """

        self._is_created = is_created

    @property
    def is_verified(self):
        """Gets the is_verified of this VirtualCard.  # noqa: E501

        Верифицирована или нет(верефицированная сразу считается активной)  # noqa: E501

        :return: The is_verified of this VirtualCard.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this VirtualCard.

        Верифицирована или нет(верефицированная сразу считается активной)  # noqa: E501

        :param is_verified: The is_verified of this VirtualCard.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def name(self):
        """Gets the name of this VirtualCard.  # noqa: E501

        Фамилия  # noqa: E501

        :return: The name of this VirtualCard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualCard.

        Фамилия  # noqa: E501

        :param name: The name of this VirtualCard.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
