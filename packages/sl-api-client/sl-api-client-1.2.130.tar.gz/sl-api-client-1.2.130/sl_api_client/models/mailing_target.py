# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MailingTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_type': 'str',
        'channel': 'Channel',
        'query': 'object'
    }

    attribute_map = {
        'app_type': 'appType',
        'channel': 'channel',
        'query': 'query'
    }

    def __init__(self, app_type=None, channel=None, query=None):  # noqa: E501
        """MailingTarget - a model defined in Swagger"""  # noqa: E501

        self._app_type = None
        self._channel = None
        self._query = None
        self.discriminator = None

        if app_type is not None:
            self.app_type = app_type
        self.channel = channel
        self.query = query

    @property
    def app_type(self):
        """Gets the app_type of this MailingTarget.  # noqa: E501

        Тип приложения в рамках одной компании (только для push-рассылок).  # noqa: E501

        :return: The app_type of this MailingTarget.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this MailingTarget.

        Тип приложения в рамках одной компании (только для push-рассылок).  # noqa: E501

        :param app_type: The app_type of this MailingTarget.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def channel(self):
        """Gets the channel of this MailingTarget.  # noqa: E501


        :return: The channel of this MailingTarget.  # noqa: E501
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MailingTarget.


        :param channel: The channel of this MailingTarget.  # noqa: E501
        :type: Channel
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def query(self):
        """Gets the query of this MailingTarget.  # noqa: E501

          # noqa: E501

        :return: The query of this MailingTarget.  # noqa: E501
        :rtype: object
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this MailingTarget.

          # noqa: E501

        :param query: The query of this MailingTarget.  # noqa: E501
        :type: object
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailingTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailingTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
