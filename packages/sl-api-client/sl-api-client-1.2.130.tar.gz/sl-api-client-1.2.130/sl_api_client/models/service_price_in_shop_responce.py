# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServicePriceInShopResponce(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'float',
        'service': 'ServiceItem',
        'shop_id': 'str'
    }

    attribute_map = {
        'price': 'price',
        'service': 'service',
        'shop_id': 'shopId'
    }

    def __init__(self, price=None, service=None, shop_id=None):  # noqa: E501
        """ServicePriceInShopResponce - a model defined in Swagger"""  # noqa: E501

        self._price = None
        self._service = None
        self._shop_id = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if service is not None:
            self.service = service
        if shop_id is not None:
            self.shop_id = shop_id

    @property
    def price(self):
        """Gets the price of this ServicePriceInShopResponce.  # noqa: E501

        Стоимость услуги в магазине  # noqa: E501

        :return: The price of this ServicePriceInShopResponce.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ServicePriceInShopResponce.

        Стоимость услуги в магазине  # noqa: E501

        :param price: The price of this ServicePriceInShopResponce.  # noqa: E501
        :type: float
        """
        if price is not None and price < 0:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._price = price

    @property
    def service(self):
        """Gets the service of this ServicePriceInShopResponce.  # noqa: E501


        :return: The service of this ServicePriceInShopResponce.  # noqa: E501
        :rtype: ServiceItem
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ServicePriceInShopResponce.


        :param service: The service of this ServicePriceInShopResponce.  # noqa: E501
        :type: ServiceItem
        """

        self._service = service

    @property
    def shop_id(self):
        """Gets the shop_id of this ServicePriceInShopResponce.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The shop_id of this ServicePriceInShopResponce.  # noqa: E501
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this ServicePriceInShopResponce.

        Идентификатор  # noqa: E501

        :param shop_id: The shop_id of this ServicePriceInShopResponce.  # noqa: E501
        :type: str
        """

        self._shop_id = shop_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePriceInShopResponce, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePriceInShopResponce):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
