# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RouterTemplateRoute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'group_name': 'str',
        'mode': 'int',
        'path': 'str'
    }

    attribute_map = {
        'destination': 'destination',
        'group_name': 'groupName',
        'mode': 'mode',
        'path': 'path'
    }

    def __init__(self, destination=None, group_name=None, mode=None, path=None):  # noqa: E501
        """RouterTemplateRoute - a model defined in Swagger"""  # noqa: E501

        self._destination = None
        self._group_name = None
        self._mode = None
        self._path = None
        self.discriminator = None

        if destination is not None:
            self.destination = destination
        if group_name is not None:
            self.group_name = group_name
        if mode is not None:
            self.mode = mode
        self.path = path

    @property
    def destination(self):
        """Gets the destination of this RouterTemplateRoute.  # noqa: E501

        Хост обработчик запроса  # noqa: E501

        :return: The destination of this RouterTemplateRoute.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this RouterTemplateRoute.

        Хост обработчик запроса  # noqa: E501

        :param destination: The destination of this RouterTemplateRoute.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def group_name(self):
        """Gets the group_name of this RouterTemplateRoute.  # noqa: E501

        Необязательный параметр указывающий группу принадлежности ресурса. По умолчанию используется группа владельца  # noqa: E501

        :return: The group_name of this RouterTemplateRoute.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this RouterTemplateRoute.

        Необязательный параметр указывающий группу принадлежности ресурса. По умолчанию используется группа владельца  # noqa: E501

        :param group_name: The group_name of this RouterTemplateRoute.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def mode(self):
        """Gets the mode of this RouterTemplateRoute.  # noqa: E501

        Тип доступа  # noqa: E501

        :return: The mode of this RouterTemplateRoute.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RouterTemplateRoute.

        Тип доступа  # noqa: E501

        :param mode: The mode of this RouterTemplateRoute.  # noqa: E501
        :type: int
        """

        self._mode = mode

    @property
    def path(self):
        """Gets the path of this RouterTemplateRoute.  # noqa: E501

        Шаблон пути создаваемого ресурса. В фигурных скобках расставляются биндинги в которые будет подставлено значение при использовании правила  # noqa: E501

        :return: The path of this RouterTemplateRoute.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RouterTemplateRoute.

        Шаблон пути создаваемого ресурса. В фигурных скобках расставляются биндинги в которые будет подставлено значение при использовании правила  # noqa: E501

        :param path: The path of this RouterTemplateRoute.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouterTemplateRoute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouterTemplateRoute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
