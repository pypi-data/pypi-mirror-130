# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied_stages': 'list[Stage]',
        'can_order_till': 'datetime',
        'cart_id': 'str',
        'creation_time': 'datetime',
        'customers_data': 'object',
        'delivery': 'Delivery',
        'is_customers_data_valid': 'bool',
        'items': 'CartItems',
        'loyalty': 'Loyalty',
        'necessary_stages': 'list[Stage]',
        'ordering_status': 'str',
        'price': 'Price',
        'uid': 'str',
        'update_time': 'datetime',
        'version': 'int'
    }

    attribute_map = {
        'applied_stages': 'appliedStages',
        'can_order_till': 'canOrderTill',
        'cart_id': 'cartId',
        'creation_time': 'creationTime',
        'customers_data': 'customersData',
        'delivery': 'delivery',
        'is_customers_data_valid': 'isCustomersDataValid',
        'items': 'items',
        'loyalty': 'loyalty',
        'necessary_stages': 'necessaryStages',
        'ordering_status': 'orderingStatus',
        'price': 'price',
        'uid': 'uid',
        'update_time': 'updateTime',
        'version': 'version'
    }

    def __init__(self, applied_stages=None, can_order_till=None, cart_id=None, creation_time=None, customers_data=None, delivery=None, is_customers_data_valid=None, items=None, loyalty=None, necessary_stages=None, ordering_status=None, price=None, uid=None, update_time=None, version=None):  # noqa: E501
        """Cart - a model defined in Swagger"""  # noqa: E501

        self._applied_stages = None
        self._can_order_till = None
        self._cart_id = None
        self._creation_time = None
        self._customers_data = None
        self._delivery = None
        self._is_customers_data_valid = None
        self._items = None
        self._loyalty = None
        self._necessary_stages = None
        self._ordering_status = None
        self._price = None
        self._uid = None
        self._update_time = None
        self._version = None
        self.discriminator = None

        if applied_stages is not None:
            self.applied_stages = applied_stages
        if can_order_till is not None:
            self.can_order_till = can_order_till
        if cart_id is not None:
            self.cart_id = cart_id
        if creation_time is not None:
            self.creation_time = creation_time
        if customers_data is not None:
            self.customers_data = customers_data
        if delivery is not None:
            self.delivery = delivery
        if is_customers_data_valid is not None:
            self.is_customers_data_valid = is_customers_data_valid
        if items is not None:
            self.items = items
        if loyalty is not None:
            self.loyalty = loyalty
        if necessary_stages is not None:
            self.necessary_stages = necessary_stages
        if ordering_status is not None:
            self.ordering_status = ordering_status
        if price is not None:
            self.price = price
        if uid is not None:
            self.uid = uid
        if update_time is not None:
            self.update_time = update_time
        if version is not None:
            self.version = version

    @property
    def applied_stages(self):
        """Gets the applied_stages of this Cart.  # noqa: E501

        Уже примененные стадии заказа  # noqa: E501

        :return: The applied_stages of this Cart.  # noqa: E501
        :rtype: list[Stage]
        """
        return self._applied_stages

    @applied_stages.setter
    def applied_stages(self, applied_stages):
        """Sets the applied_stages of this Cart.

        Уже примененные стадии заказа  # noqa: E501

        :param applied_stages: The applied_stages of this Cart.  # noqa: E501
        :type: list[Stage]
        """

        self._applied_stages = applied_stages

    @property
    def can_order_till(self):
        """Gets the can_order_till of this Cart.  # noqa: E501

        Время, до которого можно совершить заказ  # noqa: E501

        :return: The can_order_till of this Cart.  # noqa: E501
        :rtype: datetime
        """
        return self._can_order_till

    @can_order_till.setter
    def can_order_till(self, can_order_till):
        """Sets the can_order_till of this Cart.

        Время, до которого можно совершить заказ  # noqa: E501

        :param can_order_till: The can_order_till of this Cart.  # noqa: E501
        :type: datetime
        """

        self._can_order_till = can_order_till

    @property
    def cart_id(self):
        """Gets the cart_id of this Cart.  # noqa: E501

        Идентификатор корзины  # noqa: E501

        :return: The cart_id of this Cart.  # noqa: E501
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this Cart.

        Идентификатор корзины  # noqa: E501

        :param cart_id: The cart_id of this Cart.  # noqa: E501
        :type: str
        """

        self._cart_id = cart_id

    @property
    def creation_time(self):
        """Gets the creation_time of this Cart.  # noqa: E501

        Дата создания  # noqa: E501

        :return: The creation_time of this Cart.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Cart.

        Дата создания  # noqa: E501

        :param creation_time: The creation_time of this Cart.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def customers_data(self):
        """Gets the customers_data of this Cart.  # noqa: E501

        Объект с кастомными полями. Объект, где ключи и значения должны быть строками.  # noqa: E501

        :return: The customers_data of this Cart.  # noqa: E501
        :rtype: object
        """
        return self._customers_data

    @customers_data.setter
    def customers_data(self, customers_data):
        """Sets the customers_data of this Cart.

        Объект с кастомными полями. Объект, где ключи и значения должны быть строками.  # noqa: E501

        :param customers_data: The customers_data of this Cart.  # noqa: E501
        :type: object
        """

        self._customers_data = customers_data

    @property
    def delivery(self):
        """Gets the delivery of this Cart.  # noqa: E501


        :return: The delivery of this Cart.  # noqa: E501
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this Cart.


        :param delivery: The delivery of this Cart.  # noqa: E501
        :type: Delivery
        """

        self._delivery = delivery

    @property
    def is_customers_data_valid(self):
        """Gets the is_customers_data_valid of this Cart.  # noqa: E501

        Флаг, который значит что все кастомные поля заполнены валидными данными  # noqa: E501

        :return: The is_customers_data_valid of this Cart.  # noqa: E501
        :rtype: bool
        """
        return self._is_customers_data_valid

    @is_customers_data_valid.setter
    def is_customers_data_valid(self, is_customers_data_valid):
        """Sets the is_customers_data_valid of this Cart.

        Флаг, который значит что все кастомные поля заполнены валидными данными  # noqa: E501

        :param is_customers_data_valid: The is_customers_data_valid of this Cart.  # noqa: E501
        :type: bool
        """

        self._is_customers_data_valid = is_customers_data_valid

    @property
    def items(self):
        """Gets the items of this Cart.  # noqa: E501


        :return: The items of this Cart.  # noqa: E501
        :rtype: CartItems
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Cart.


        :param items: The items of this Cart.  # noqa: E501
        :type: CartItems
        """

        self._items = items

    @property
    def loyalty(self):
        """Gets the loyalty of this Cart.  # noqa: E501


        :return: The loyalty of this Cart.  # noqa: E501
        :rtype: Loyalty
        """
        return self._loyalty

    @loyalty.setter
    def loyalty(self, loyalty):
        """Sets the loyalty of this Cart.


        :param loyalty: The loyalty of this Cart.  # noqa: E501
        :type: Loyalty
        """

        self._loyalty = loyalty

    @property
    def necessary_stages(self):
        """Gets the necessary_stages of this Cart.  # noqa: E501

        Стадии, необходимые для совершения заказа  # noqa: E501

        :return: The necessary_stages of this Cart.  # noqa: E501
        :rtype: list[Stage]
        """
        return self._necessary_stages

    @necessary_stages.setter
    def necessary_stages(self, necessary_stages):
        """Sets the necessary_stages of this Cart.

        Стадии, необходимые для совершения заказа  # noqa: E501

        :param necessary_stages: The necessary_stages of this Cart.  # noqa: E501
        :type: list[Stage]
        """

        self._necessary_stages = necessary_stages

    @property
    def ordering_status(self):
        """Gets the ordering_status of this Cart.  # noqa: E501

        Статус корзины  # noqa: E501

        :return: The ordering_status of this Cart.  # noqa: E501
        :rtype: str
        """
        return self._ordering_status

    @ordering_status.setter
    def ordering_status(self, ordering_status):
        """Sets the ordering_status of this Cart.

        Статус корзины  # noqa: E501

        :param ordering_status: The ordering_status of this Cart.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "preparing", "ready_for_order"]  # noqa: E501
        if ordering_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ordering_status` ({0}), must be one of {1}"  # noqa: E501
                .format(ordering_status, allowed_values)
            )

        self._ordering_status = ordering_status

    @property
    def price(self):
        """Gets the price of this Cart.  # noqa: E501


        :return: The price of this Cart.  # noqa: E501
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Cart.


        :param price: The price of this Cart.  # noqa: E501
        :type: Price
        """

        self._price = price

    @property
    def uid(self):
        """Gets the uid of this Cart.  # noqa: E501

        Идентификатор пользователя  # noqa: E501

        :return: The uid of this Cart.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Cart.

        Идентификатор пользователя  # noqa: E501

        :param uid: The uid of this Cart.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Cart.  # noqa: E501

        Дата обновления  # noqa: E501

        :return: The update_time of this Cart.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Cart.

        Дата обновления  # noqa: E501

        :param update_time: The update_time of this Cart.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this Cart.  # noqa: E501

        Версия корзины  # noqa: E501

        :return: The version of this Cart.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Cart.

        Версия корзины  # noqa: E501

        :param version: The version of this Cart.  # noqa: E501
        :type: int
        """
        if version is not None and version < 1:  # noqa: E501
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `1`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
