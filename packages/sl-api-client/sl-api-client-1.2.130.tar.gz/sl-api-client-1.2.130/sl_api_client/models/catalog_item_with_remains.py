# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CatalogItemWithRemains(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aliases': 'list[str]',
        'badge_color': 'str',
        'badge_text': 'str',
        'body': 'str',
        'cid': 'str',
        'created_at': 'int',
        'creator': 'str',
        'description': 'str',
        'detail_images': 'list[str]',
        'disabled': 'bool',
        'discount_price': 'float',
        'extra_item': 'bool',
        'hidden': 'bool',
        'id': 'str',
        'image': 'str',
        '_import': 'bool',
        'measure': 'str',
        'name': 'str',
        'price': 'float',
        'remote_id': 'str',
        'template_id': 'str',
        'unit': 'float',
        'updated_at': 'int',
        'groups': 'list[str]',
        'properties': 'list[IPropertyValue]',
        'remains': 'list[CatalogItemRemains]'
    }

    attribute_map = {
        'aliases': 'aliases',
        'badge_color': 'badgeColor',
        'badge_text': 'badgeText',
        'body': 'body',
        'cid': 'cid',
        'created_at': 'created_at',
        'creator': 'creator',
        'description': 'description',
        'detail_images': 'detailImages',
        'disabled': 'disabled',
        'discount_price': 'discountPrice',
        'extra_item': 'extraItem',
        'hidden': 'hidden',
        'id': 'id',
        'image': 'image',
        '_import': 'import',
        'measure': 'measure',
        'name': 'name',
        'price': 'price',
        'remote_id': 'remoteId',
        'template_id': 'templateId',
        'unit': 'unit',
        'updated_at': 'updated_at',
        'groups': 'groups',
        'properties': 'properties',
        'remains': 'remains'
    }

    def __init__(self, aliases=None, badge_color=None, badge_text=None, body=None, cid=None, created_at=None, creator=None, description=None, detail_images=None, disabled=False, discount_price=None, extra_item=False, hidden=False, id=None, image=None, _import=None, measure='u', name=None, price=None, remote_id=None, template_id=None, unit=1.0, updated_at=None, groups=None, properties=None, remains=None):  # noqa: E501
        """CatalogItemWithRemains - a model defined in Swagger"""  # noqa: E501

        self._aliases = None
        self._badge_color = None
        self._badge_text = None
        self._body = None
        self._cid = None
        self._created_at = None
        self._creator = None
        self._description = None
        self._detail_images = None
        self._disabled = None
        self._discount_price = None
        self._extra_item = None
        self._hidden = None
        self._id = None
        self._image = None
        self.__import = None
        self._measure = None
        self._name = None
        self._price = None
        self._remote_id = None
        self._template_id = None
        self._unit = None
        self._updated_at = None
        self._groups = None
        self._properties = None
        self._remains = None
        self.discriminator = None

        if aliases is not None:
            self.aliases = aliases
        if badge_color is not None:
            self.badge_color = badge_color
        if badge_text is not None:
            self.badge_text = badge_text
        if body is not None:
            self.body = body
        if cid is not None:
            self.cid = cid
        if created_at is not None:
            self.created_at = created_at
        if creator is not None:
            self.creator = creator
        if description is not None:
            self.description = description
        if detail_images is not None:
            self.detail_images = detail_images
        if disabled is not None:
            self.disabled = disabled
        if discount_price is not None:
            self.discount_price = discount_price
        if extra_item is not None:
            self.extra_item = extra_item
        if hidden is not None:
            self.hidden = hidden
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if _import is not None:
            self._import = _import
        if measure is not None:
            self.measure = measure
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if remote_id is not None:
            self.remote_id = remote_id
        if template_id is not None:
            self.template_id = template_id
        if unit is not None:
            self.unit = unit
        if updated_at is not None:
            self.updated_at = updated_at
        if groups is not None:
            self.groups = groups
        if properties is not None:
            self.properties = properties
        if remains is not None:
            self.remains = remains

    @property
    def aliases(self):
        """Gets the aliases of this CatalogItemWithRemains.  # noqa: E501

        Список псевдонимов названия товара  # noqa: E501

        :return: The aliases of this CatalogItemWithRemains.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this CatalogItemWithRemains.

        Список псевдонимов названия товара  # noqa: E501

        :param aliases: The aliases of this CatalogItemWithRemains.  # noqa: E501
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def badge_color(self):
        """Gets the badge_color of this CatalogItemWithRemains.  # noqa: E501

        Цвет ярлыка товара в формате HEX RGB  # noqa: E501

        :return: The badge_color of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._badge_color

    @badge_color.setter
    def badge_color(self, badge_color):
        """Sets the badge_color of this CatalogItemWithRemains.

        Цвет ярлыка товара в формате HEX RGB  # noqa: E501

        :param badge_color: The badge_color of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._badge_color = badge_color

    @property
    def badge_text(self):
        """Gets the badge_text of this CatalogItemWithRemains.  # noqa: E501

        Текст в ярлыке товара  # noqa: E501

        :return: The badge_text of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._badge_text

    @badge_text.setter
    def badge_text(self, badge_text):
        """Sets the badge_text of this CatalogItemWithRemains.

        Текст в ярлыке товара  # noqa: E501

        :param badge_text: The badge_text of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._badge_text = badge_text

    @property
    def body(self):
        """Gets the body of this CatalogItemWithRemains.  # noqa: E501

        Полный текст  # noqa: E501

        :return: The body of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CatalogItemWithRemains.

        Полный текст  # noqa: E501

        :param body: The body of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def cid(self):
        """Gets the cid of this CatalogItemWithRemains.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The cid of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this CatalogItemWithRemains.

        Идентификатор  # noqa: E501

        :param cid: The cid of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this CatalogItemWithRemains.  # noqa: E501

        Таймштамп создания (Unix)  # noqa: E501

        :return: The created_at of this CatalogItemWithRemains.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CatalogItemWithRemains.

        Таймштамп создания (Unix)  # noqa: E501

        :param created_at: The created_at of this CatalogItemWithRemains.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this CatalogItemWithRemains.  # noqa: E501

        Идентификатор создателя  # noqa: E501

        :return: The creator of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this CatalogItemWithRemains.

        Идентификатор создателя  # noqa: E501

        :param creator: The creator of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this CatalogItemWithRemains.  # noqa: E501

        Короткое описание  # noqa: E501

        :return: The description of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogItemWithRemains.

        Короткое описание  # noqa: E501

        :param description: The description of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def detail_images(self):
        """Gets the detail_images of this CatalogItemWithRemains.  # noqa: E501

        Массив изображений товара  # noqa: E501

        :return: The detail_images of this CatalogItemWithRemains.  # noqa: E501
        :rtype: list[str]
        """
        return self._detail_images

    @detail_images.setter
    def detail_images(self, detail_images):
        """Sets the detail_images of this CatalogItemWithRemains.

        Массив изображений товара  # noqa: E501

        :param detail_images: The detail_images of this CatalogItemWithRemains.  # noqa: E501
        :type: list[str]
        """

        self._detail_images = detail_images

    @property
    def disabled(self):
        """Gets the disabled of this CatalogItemWithRemains.  # noqa: E501

        Флаг отключения товара  # noqa: E501

        :return: The disabled of this CatalogItemWithRemains.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CatalogItemWithRemains.

        Флаг отключения товара  # noqa: E501

        :param disabled: The disabled of this CatalogItemWithRemains.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def discount_price(self):
        """Gets the discount_price of this CatalogItemWithRemains.  # noqa: E501

        Cкидочная цена на товар  # noqa: E501

        :return: The discount_price of this CatalogItemWithRemains.  # noqa: E501
        :rtype: float
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this CatalogItemWithRemains.

        Cкидочная цена на товар  # noqa: E501

        :param discount_price: The discount_price of this CatalogItemWithRemains.  # noqa: E501
        :type: float
        """
        if discount_price is not None and discount_price < 0:  # noqa: E501
            raise ValueError("Invalid value for `discount_price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount_price = discount_price

    @property
    def extra_item(self):
        """Gets the extra_item of this CatalogItemWithRemains.  # noqa: E501

        Флаг дополнительного товара  # noqa: E501

        :return: The extra_item of this CatalogItemWithRemains.  # noqa: E501
        :rtype: bool
        """
        return self._extra_item

    @extra_item.setter
    def extra_item(self, extra_item):
        """Sets the extra_item of this CatalogItemWithRemains.

        Флаг дополнительного товара  # noqa: E501

        :param extra_item: The extra_item of this CatalogItemWithRemains.  # noqa: E501
        :type: bool
        """

        self._extra_item = extra_item

    @property
    def hidden(self):
        """Gets the hidden of this CatalogItemWithRemains.  # noqa: E501

        Флаг скрытия товара  # noqa: E501

        :return: The hidden of this CatalogItemWithRemains.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CatalogItemWithRemains.

        Флаг скрытия товара  # noqa: E501

        :param hidden: The hidden of this CatalogItemWithRemains.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this CatalogItemWithRemains.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The id of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogItemWithRemains.

        Идентификатор  # noqa: E501

        :param id: The id of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this CatalogItemWithRemains.  # noqa: E501

        URL изображения превью  # noqa: E501

        :return: The image of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CatalogItemWithRemains.

        URL изображения превью  # noqa: E501

        :param image: The image of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def _import(self):
        """Gets the _import of this CatalogItemWithRemains.  # noqa: E501

        Флаг, означающий автоматически импортирована сущность или нет  # noqa: E501

        :return: The _import of this CatalogItemWithRemains.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this CatalogItemWithRemains.

        Флаг, означающий автоматически импортирована сущность или нет  # noqa: E501

        :param _import: The _import of this CatalogItemWithRemains.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def measure(self):
        """Gets the measure of this CatalogItemWithRemains.  # noqa: E501

        Единица измерения   * u - единица   * kg - килограмм   * gm - грамм   * lit - литр   * mlit - миллилитр   * sec - секунды   * day - дни   * hour - часы   # noqa: E501

        :return: The measure of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._measure

    @measure.setter
    def measure(self, measure):
        """Sets the measure of this CatalogItemWithRemains.

        Единица измерения   * u - единица   * kg - килограмм   * gm - грамм   * lit - литр   * mlit - миллилитр   * sec - секунды   * day - дни   * hour - часы   # noqa: E501

        :param measure: The measure of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """
        allowed_values = ["u", "kg", "gm", "lit", "mlit", "sec", "day", "hour"]  # noqa: E501
        if measure not in allowed_values:
            raise ValueError(
                "Invalid value for `measure` ({0}), must be one of {1}"  # noqa: E501
                .format(measure, allowed_values)
            )

        self._measure = measure

    @property
    def name(self):
        """Gets the name of this CatalogItemWithRemains.  # noqa: E501

        Название  # noqa: E501

        :return: The name of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogItemWithRemains.

        Название  # noqa: E501

        :param name: The name of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this CatalogItemWithRemains.  # noqa: E501

        Стоимость товара  # noqa: E501

        :return: The price of this CatalogItemWithRemains.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CatalogItemWithRemains.

        Стоимость товара  # noqa: E501

        :param price: The price of this CatalogItemWithRemains.  # noqa: E501
        :type: float
        """
        if price is not None and price < 0:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._price = price

    @property
    def remote_id(self):
        """Gets the remote_id of this CatalogItemWithRemains.  # noqa: E501

        Идентификатор заказа во внешней системе (кассовый сервер, 1С и т.д.)  # noqa: E501

        :return: The remote_id of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this CatalogItemWithRemains.

        Идентификатор заказа во внешней системе (кассовый сервер, 1С и т.д.)  # noqa: E501

        :param remote_id: The remote_id of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def template_id(self):
        """Gets the template_id of this CatalogItemWithRemains.  # noqa: E501

        Id шаблона  # noqa: E501

        :return: The template_id of this CatalogItemWithRemains.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CatalogItemWithRemains.

        Id шаблона  # noqa: E501

        :param template_id: The template_id of this CatalogItemWithRemains.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def unit(self):
        """Gets the unit of this CatalogItemWithRemains.  # noqa: E501

        Минимальная единица  # noqa: E501

        :return: The unit of this CatalogItemWithRemains.  # noqa: E501
        :rtype: float
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CatalogItemWithRemains.

        Минимальная единица  # noqa: E501

        :param unit: The unit of this CatalogItemWithRemains.  # noqa: E501
        :type: float
        """
        if unit is not None and unit < 0.001:  # noqa: E501
            raise ValueError("Invalid value for `unit`, must be a value greater than or equal to `0.001`")  # noqa: E501

        self._unit = unit

    @property
    def updated_at(self):
        """Gets the updated_at of this CatalogItemWithRemains.  # noqa: E501

        Таймштамп модификации (Unix)  # noqa: E501

        :return: The updated_at of this CatalogItemWithRemains.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CatalogItemWithRemains.

        Таймштамп модификации (Unix)  # noqa: E501

        :param updated_at: The updated_at of this CatalogItemWithRemains.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def groups(self):
        """Gets the groups of this CatalogItemWithRemains.  # noqa: E501

        Идентификаторы родительских групп  # noqa: E501

        :return: The groups of this CatalogItemWithRemains.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CatalogItemWithRemains.

        Идентификаторы родительских групп  # noqa: E501

        :param groups: The groups of this CatalogItemWithRemains.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def properties(self):
        """Gets the properties of this CatalogItemWithRemains.  # noqa: E501


        :return: The properties of this CatalogItemWithRemains.  # noqa: E501
        :rtype: list[IPropertyValue]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CatalogItemWithRemains.


        :param properties: The properties of this CatalogItemWithRemains.  # noqa: E501
        :type: list[IPropertyValue]
        """

        self._properties = properties

    @property
    def remains(self):
        """Gets the remains of this CatalogItemWithRemains.  # noqa: E501


        :return: The remains of this CatalogItemWithRemains.  # noqa: E501
        :rtype: list[CatalogItemRemains]
        """
        return self._remains

    @remains.setter
    def remains(self, remains):
        """Sets the remains of this CatalogItemWithRemains.


        :param remains: The remains of this CatalogItemWithRemains.  # noqa: E501
        :type: list[CatalogItemRemains]
        """

        self._remains = remains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogItemWithRemains, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogItemWithRemains):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
