# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'is_payed': 'bool',
        'payment_id': 'str',
        'status': 'str',
        'type': 'OrdersV2PaymentType'
    }

    attribute_map = {
        'amount': 'amount',
        'is_payed': 'isPayed',
        'payment_id': 'paymentId',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, amount=None, is_payed=None, payment_id=None, status=None, type=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._is_payed = None
        self._payment_id = None
        self._status = None
        self._type = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if is_payed is not None:
            self.is_payed = is_payed
        if payment_id is not None:
            self.payment_id = payment_id
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def amount(self):
        """Gets the amount of this Payment.  # noqa: E501

        Стоимость к оплате  # noqa: E501

        :return: The amount of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.

        Стоимость к оплате  # noqa: E501

        :param amount: The amount of this Payment.  # noqa: E501
        :type: float
        """
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def is_payed(self):
        """Gets the is_payed of this Payment.  # noqa: E501

        Является ли заказ оплаченным  # noqa: E501

        :return: The is_payed of this Payment.  # noqa: E501
        :rtype: bool
        """
        return self._is_payed

    @is_payed.setter
    def is_payed(self, is_payed):
        """Sets the is_payed of this Payment.

        Является ли заказ оплаченным  # noqa: E501

        :param is_payed: The is_payed of this Payment.  # noqa: E501
        :type: bool
        """

        self._is_payed = is_payed

    @property
    def payment_id(self):
        """Gets the payment_id of this Payment.  # noqa: E501

        Идентификатор оплаты в платежном шлюзе  # noqa: E501

        :return: The payment_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Payment.

        Идентификатор оплаты в платежном шлюзе  # noqa: E501

        :param payment_id: The payment_id of this Payment.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def status(self):
        """Gets the status of this Payment.  # noqa: E501

        Статус оплаты  # noqa: E501

        :return: The status of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        Статус оплаты  # noqa: E501

        :param status: The status of this Payment.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "CREATED", "APPROVED", "DEPOSITED", "DECLINED", "REVERSED", "REFUNDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Payment.  # noqa: E501


        :return: The type of this Payment.  # noqa: E501
        :rtype: OrdersV2PaymentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Payment.


        :param type: The type of this Payment.  # noqa: E501
        :type: OrdersV2PaymentType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
