# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apartment': 'str',
        'area': 'str',
        'block': 'str',
        'city': 'str',
        'country': 'str',
        'house': 'str',
        'region': 'str',
        'street': 'str'
    }

    attribute_map = {
        'apartment': 'apartment',
        'area': 'area',
        'block': 'block',
        'city': 'city',
        'country': 'country',
        'house': 'house',
        'region': 'region',
        'street': 'street'
    }

    def __init__(self, apartment=None, area=None, block=None, city=None, country=None, house=None, region=None, street=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501

        self._apartment = None
        self._area = None
        self._block = None
        self._city = None
        self._country = None
        self._house = None
        self._region = None
        self._street = None
        self.discriminator = None

        if apartment is not None:
            self.apartment = apartment
        if area is not None:
            self.area = area
        if block is not None:
            self.block = block
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if house is not None:
            self.house = house
        if region is not None:
            self.region = region
        if street is not None:
            self.street = street

    @property
    def apartment(self):
        """Gets the apartment of this Address.  # noqa: E501

        Офис, Квартира и так далее  # noqa: E501

        :return: The apartment of this Address.  # noqa: E501
        :rtype: str
        """
        return self._apartment

    @apartment.setter
    def apartment(self, apartment):
        """Sets the apartment of this Address.

        Офис, Квартира и так далее  # noqa: E501

        :param apartment: The apartment of this Address.  # noqa: E501
        :type: str
        """

        self._apartment = apartment

    @property
    def area(self):
        """Gets the area of this Address.  # noqa: E501

        Район  # noqa: E501

        :return: The area of this Address.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Address.

        Район  # noqa: E501

        :param area: The area of this Address.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def block(self):
        """Gets the block of this Address.  # noqa: E501

        Корпус, Строение  # noqa: E501

        :return: The block of this Address.  # noqa: E501
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this Address.

        Корпус, Строение  # noqa: E501

        :param block: The block of this Address.  # noqa: E501
        :type: str
        """

        self._block = block

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        Город  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Город  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501

        Страна  # noqa: E501

        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        Страна  # noqa: E501

        :param country: The country of this Address.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def house(self):
        """Gets the house of this Address.  # noqa: E501

        Дом  # noqa: E501

        :return: The house of this Address.  # noqa: E501
        :rtype: str
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this Address.

        Дом  # noqa: E501

        :param house: The house of this Address.  # noqa: E501
        :type: str
        """

        self._house = house

    @property
    def region(self):
        """Gets the region of this Address.  # noqa: E501

        Обрасть/Регион  # noqa: E501

        :return: The region of this Address.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        Обрасть/Регион  # noqa: E501

        :param region: The region of this Address.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501

        Улица  # noqa: E501

        :return: The street of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        Улица  # noqa: E501

        :param street: The street of this Address.  # noqa: E501
        :type: str
        """

        self._street = street

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
