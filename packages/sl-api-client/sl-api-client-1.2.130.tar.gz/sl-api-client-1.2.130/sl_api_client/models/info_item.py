# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InfoItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'str',
        'created_at': 'int',
        'creator': 'str',
        'description': 'str',
        'id': 'str',
        'image': 'str',
        '_import': 'bool',
        'name': 'str',
        'updated_at': 'int'
    }

    attribute_map = {
        'body': 'body',
        'created_at': 'created_at',
        'creator': 'creator',
        'description': 'description',
        'id': 'id',
        'image': 'image',
        '_import': 'import',
        'name': 'name',
        'updated_at': 'updated_at'
    }

    def __init__(self, body=None, created_at=None, creator=None, description=None, id=None, image=None, _import=None, name=None, updated_at=None):  # noqa: E501
        """InfoItem - a model defined in Swagger"""  # noqa: E501

        self._body = None
        self._created_at = None
        self._creator = None
        self._description = None
        self._id = None
        self._image = None
        self.__import = None
        self._name = None
        self._updated_at = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if created_at is not None:
            self.created_at = created_at
        if creator is not None:
            self.creator = creator
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if _import is not None:
            self._import = _import
        self.name = name
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def body(self):
        """Gets the body of this InfoItem.  # noqa: E501

        Полный текст  # noqa: E501

        :return: The body of this InfoItem.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this InfoItem.

        Полный текст  # noqa: E501

        :param body: The body of this InfoItem.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this InfoItem.  # noqa: E501

        Таймштамп создания (Unix)  # noqa: E501

        :return: The created_at of this InfoItem.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InfoItem.

        Таймштамп создания (Unix)  # noqa: E501

        :param created_at: The created_at of this InfoItem.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this InfoItem.  # noqa: E501

        Идентификатор создателя  # noqa: E501

        :return: The creator of this InfoItem.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this InfoItem.

        Идентификатор создателя  # noqa: E501

        :param creator: The creator of this InfoItem.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this InfoItem.  # noqa: E501

        Короткое описание  # noqa: E501

        :return: The description of this InfoItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InfoItem.

        Короткое описание  # noqa: E501

        :param description: The description of this InfoItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this InfoItem.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The id of this InfoItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InfoItem.

        Идентификатор  # noqa: E501

        :param id: The id of this InfoItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this InfoItem.  # noqa: E501

        URL базового изображения  # noqa: E501

        :return: The image of this InfoItem.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this InfoItem.

        URL базового изображения  # noqa: E501

        :param image: The image of this InfoItem.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def _import(self):
        """Gets the _import of this InfoItem.  # noqa: E501

        Флаг означающий автоматически импортирована сущьность или нет  # noqa: E501

        :return: The _import of this InfoItem.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this InfoItem.

        Флаг означающий автоматически импортирована сущьность или нет  # noqa: E501

        :param _import: The _import of this InfoItem.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def name(self):
        """Gets the name of this InfoItem.  # noqa: E501

        Название элемента  # noqa: E501

        :return: The name of this InfoItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InfoItem.

        Название элемента  # noqa: E501

        :param name: The name of this InfoItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this InfoItem.  # noqa: E501

        Таймштамп модификации (Unix)  # noqa: E501

        :return: The updated_at of this InfoItem.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InfoItem.

        Таймштамп модификации (Unix)  # noqa: E501

        :param updated_at: The updated_at of this InfoItem.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfoItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
