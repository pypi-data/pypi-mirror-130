# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DcAggregationReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_bonus': 'int',
        'only_numbers': 'list[str]',
        'skip_empty_description': 'bool'
    }

    attribute_map = {
        'min_bonus': 'min_bonus',
        'only_numbers': 'only_numbers',
        'skip_empty_description': 'skip_empty_description'
    }

    def __init__(self, min_bonus=1, only_numbers=None, skip_empty_description=True):  # noqa: E501
        """DcAggregationReq - a model defined in Swagger"""  # noqa: E501

        self._min_bonus = None
        self._only_numbers = None
        self._skip_empty_description = None
        self.discriminator = None

        if min_bonus is not None:
            self.min_bonus = min_bonus
        if only_numbers is not None:
            self.only_numbers = only_numbers
        if skip_empty_description is not None:
            self.skip_empty_description = skip_empty_description

    @property
    def min_bonus(self):
        """Gets the min_bonus of this DcAggregationReq.  # noqa: E501

        Отбирает карты с бонусами >= указанного  # noqa: E501

        :return: The min_bonus of this DcAggregationReq.  # noqa: E501
        :rtype: int
        """
        return self._min_bonus

    @min_bonus.setter
    def min_bonus(self, min_bonus):
        """Sets the min_bonus of this DcAggregationReq.

        Отбирает карты с бонусами >= указанного  # noqa: E501

        :param min_bonus: The min_bonus of this DcAggregationReq.  # noqa: E501
        :type: int
        """
        if min_bonus is not None and min_bonus < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_bonus`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_bonus = min_bonus

    @property
    def only_numbers(self):
        """Gets the only_numbers of this DcAggregationReq.  # noqa: E501

        Выбрать только из указанных номеров карт  # noqa: E501

        :return: The only_numbers of this DcAggregationReq.  # noqa: E501
        :rtype: list[str]
        """
        return self._only_numbers

    @only_numbers.setter
    def only_numbers(self, only_numbers):
        """Sets the only_numbers of this DcAggregationReq.

        Выбрать только из указанных номеров карт  # noqa: E501

        :param only_numbers: The only_numbers of this DcAggregationReq.  # noqa: E501
        :type: list[str]
        """

        self._only_numbers = only_numbers

    @property
    def skip_empty_description(self):
        """Gets the skip_empty_description of this DcAggregationReq.  # noqa: E501

        Если установлен в true, то отбрасывает все карты без описаний  # noqa: E501

        :return: The skip_empty_description of this DcAggregationReq.  # noqa: E501
        :rtype: bool
        """
        return self._skip_empty_description

    @skip_empty_description.setter
    def skip_empty_description(self, skip_empty_description):
        """Sets the skip_empty_description of this DcAggregationReq.

        Если установлен в true, то отбрасывает все карты без описаний  # noqa: E501

        :param skip_empty_description: The skip_empty_description of this DcAggregationReq.  # noqa: E501
        :type: bool
        """

        self._skip_empty_description = skip_empty_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DcAggregationReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DcAggregationReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
