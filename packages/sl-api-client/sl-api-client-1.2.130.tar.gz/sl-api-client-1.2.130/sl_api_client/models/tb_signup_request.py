# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TbSignupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_name': 'str',
        'bik': 'str',
        'checking_account': 'str',
        'company_email': 'str',
        'company_name': 'str',
        'company_phone': 'str',
        'correspondent_account': 'str',
        'email': 'str',
        'first_name': 'str',
        'inn': 'str',
        'kpp': 'str',
        'last_name': 'str',
        'middle_name': 'str',
        'ogrn': 'str',
        'ogrnip': 'str',
        'okved': 'list[str]',
        'password': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'bank_name': 'bankName',
        'bik': 'bik',
        'checking_account': 'checkingAccount',
        'company_email': 'companyEmail',
        'company_name': 'companyName',
        'company_phone': 'companyPhone',
        'correspondent_account': 'correspondentAccount',
        'email': 'email',
        'first_name': 'firstName',
        'inn': 'inn',
        'kpp': 'kpp',
        'last_name': 'lastName',
        'middle_name': 'middleName',
        'ogrn': 'ogrn',
        'ogrnip': 'ogrnip',
        'okved': 'okved',
        'password': 'password',
        'phone': 'phone'
    }

    def __init__(self, bank_name=None, bik=None, checking_account=None, company_email=None, company_name=None, company_phone=None, correspondent_account=None, email=None, first_name=None, inn=None, kpp=None, last_name=None, middle_name=None, ogrn=None, ogrnip=None, okved=None, password=None, phone=None):  # noqa: E501
        """TbSignupRequest - a model defined in Swagger"""  # noqa: E501

        self._bank_name = None
        self._bik = None
        self._checking_account = None
        self._company_email = None
        self._company_name = None
        self._company_phone = None
        self._correspondent_account = None
        self._email = None
        self._first_name = None
        self._inn = None
        self._kpp = None
        self._last_name = None
        self._middle_name = None
        self._ogrn = None
        self._ogrnip = None
        self._okved = None
        self._password = None
        self._phone = None
        self.discriminator = None

        if bank_name is not None:
            self.bank_name = bank_name
        if bik is not None:
            self.bik = bik
        if checking_account is not None:
            self.checking_account = checking_account
        if company_email is not None:
            self.company_email = company_email
        if company_name is not None:
            self.company_name = company_name
        if company_phone is not None:
            self.company_phone = company_phone
        if correspondent_account is not None:
            self.correspondent_account = correspondent_account
        self.email = email
        self.first_name = first_name
        if inn is not None:
            self.inn = inn
        if kpp is not None:
            self.kpp = kpp
        self.last_name = last_name
        if middle_name is not None:
            self.middle_name = middle_name
        if ogrn is not None:
            self.ogrn = ogrn
        if ogrnip is not None:
            self.ogrnip = ogrnip
        if okved is not None:
            self.okved = okved
        self.password = password
        self.phone = phone

    @property
    def bank_name(self):
        """Gets the bank_name of this TbSignupRequest.  # noqa: E501

        Наименование банка  # noqa: E501

        :return: The bank_name of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this TbSignupRequest.

        Наименование банка  # noqa: E501

        :param bank_name: The bank_name of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def bik(self):
        """Gets the bik of this TbSignupRequest.  # noqa: E501

        БИК  # noqa: E501

        :return: The bik of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._bik

    @bik.setter
    def bik(self, bik):
        """Sets the bik of this TbSignupRequest.

        БИК  # noqa: E501

        :param bik: The bik of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._bik = bik

    @property
    def checking_account(self):
        """Gets the checking_account of this TbSignupRequest.  # noqa: E501

        Расчетный счет  # noqa: E501

        :return: The checking_account of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._checking_account

    @checking_account.setter
    def checking_account(self, checking_account):
        """Sets the checking_account of this TbSignupRequest.

        Расчетный счет  # noqa: E501

        :param checking_account: The checking_account of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._checking_account = checking_account

    @property
    def company_email(self):
        """Gets the company_email of this TbSignupRequest.  # noqa: E501

        Электронная почта компании  # noqa: E501

        :return: The company_email of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_email

    @company_email.setter
    def company_email(self, company_email):
        """Sets the company_email of this TbSignupRequest.

        Электронная почта компании  # noqa: E501

        :param company_email: The company_email of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._company_email = company_email

    @property
    def company_name(self):
        """Gets the company_name of this TbSignupRequest.  # noqa: E501

        Наименование компании  # noqa: E501

        :return: The company_name of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this TbSignupRequest.

        Наименование компании  # noqa: E501

        :param company_name: The company_name of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_phone(self):
        """Gets the company_phone of this TbSignupRequest.  # noqa: E501

        Телефон компании  # noqa: E501

        :return: The company_phone of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_phone

    @company_phone.setter
    def company_phone(self, company_phone):
        """Sets the company_phone of this TbSignupRequest.

        Телефон компании  # noqa: E501

        :param company_phone: The company_phone of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._company_phone = company_phone

    @property
    def correspondent_account(self):
        """Gets the correspondent_account of this TbSignupRequest.  # noqa: E501

        Корреспондентский счет  # noqa: E501

        :return: The correspondent_account of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._correspondent_account

    @correspondent_account.setter
    def correspondent_account(self, correspondent_account):
        """Sets the correspondent_account of this TbSignupRequest.

        Корреспондентский счет  # noqa: E501

        :param correspondent_account: The correspondent_account of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._correspondent_account = correspondent_account

    @property
    def email(self):
        """Gets the email of this TbSignupRequest.  # noqa: E501

        Электронная почта  # noqa: E501

        :return: The email of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TbSignupRequest.

        Электронная почта  # noqa: E501

        :param email: The email of this TbSignupRequest.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this TbSignupRequest.  # noqa: E501

        Имя  # noqa: E501

        :return: The first_name of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this TbSignupRequest.

        Имя  # noqa: E501

        :param first_name: The first_name of this TbSignupRequest.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def inn(self):
        """Gets the inn of this TbSignupRequest.  # noqa: E501

        ИНН  # noqa: E501

        :return: The inn of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._inn

    @inn.setter
    def inn(self, inn):
        """Sets the inn of this TbSignupRequest.

        ИНН  # noqa: E501

        :param inn: The inn of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._inn = inn

    @property
    def kpp(self):
        """Gets the kpp of this TbSignupRequest.  # noqa: E501

        КПП  # noqa: E501

        :return: The kpp of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._kpp

    @kpp.setter
    def kpp(self, kpp):
        """Sets the kpp of this TbSignupRequest.

        КПП  # noqa: E501

        :param kpp: The kpp of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._kpp = kpp

    @property
    def last_name(self):
        """Gets the last_name of this TbSignupRequest.  # noqa: E501

        Фамилия  # noqa: E501

        :return: The last_name of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this TbSignupRequest.

        Фамилия  # noqa: E501

        :param last_name: The last_name of this TbSignupRequest.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this TbSignupRequest.  # noqa: E501

        Отчество  # noqa: E501

        :return: The middle_name of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this TbSignupRequest.

        Отчество  # noqa: E501

        :param middle_name: The middle_name of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def ogrn(self):
        """Gets the ogrn of this TbSignupRequest.  # noqa: E501

        ОГРН  # noqa: E501

        :return: The ogrn of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._ogrn

    @ogrn.setter
    def ogrn(self, ogrn):
        """Sets the ogrn of this TbSignupRequest.

        ОГРН  # noqa: E501

        :param ogrn: The ogrn of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._ogrn = ogrn

    @property
    def ogrnip(self):
        """Gets the ogrnip of this TbSignupRequest.  # noqa: E501

        ОГРНИП  # noqa: E501

        :return: The ogrnip of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._ogrnip

    @ogrnip.setter
    def ogrnip(self, ogrnip):
        """Sets the ogrnip of this TbSignupRequest.

        ОГРНИП  # noqa: E501

        :param ogrnip: The ogrnip of this TbSignupRequest.  # noqa: E501
        :type: str
        """

        self._ogrnip = ogrnip

    @property
    def okved(self):
        """Gets the okved of this TbSignupRequest.  # noqa: E501

        Вид деятельности (ОКВЭД)  # noqa: E501

        :return: The okved of this TbSignupRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._okved

    @okved.setter
    def okved(self, okved):
        """Sets the okved of this TbSignupRequest.

        Вид деятельности (ОКВЭД)  # noqa: E501

        :param okved: The okved of this TbSignupRequest.  # noqa: E501
        :type: list[str]
        """

        self._okved = okved

    @property
    def password(self):
        """Gets the password of this TbSignupRequest.  # noqa: E501

        Пароль  # noqa: E501

        :return: The password of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TbSignupRequest.

        Пароль  # noqa: E501

        :param password: The password of this TbSignupRequest.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this TbSignupRequest.  # noqa: E501

        Телефон  # noqa: E501

        :return: The phone of this TbSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this TbSignupRequest.

        Телефон  # noqa: E501

        :param phone: The phone of this TbSignupRequest.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TbSignupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TbSignupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
