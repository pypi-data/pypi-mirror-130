# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Winner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cid': 'str',
        'code': 'str',
        'created_at': 'int',
        'emails': 'list[str]',
        'full_name': 'str',
        'hist_id': 'str',
        'id': 'str',
        'phones': 'list[str]',
        'uid': 'str'
    }

    attribute_map = {
        'cid': 'cid',
        'code': 'code',
        'created_at': 'created_at',
        'emails': 'emails',
        'full_name': 'full_name',
        'hist_id': 'hist_id',
        'id': 'id',
        'phones': 'phones',
        'uid': 'uid'
    }

    def __init__(self, cid=None, code=None, created_at=None, emails=None, full_name=None, hist_id=None, id=None, phones=None, uid=None):  # noqa: E501
        """Winner - a model defined in Swagger"""  # noqa: E501

        self._cid = None
        self._code = None
        self._created_at = None
        self._emails = None
        self._full_name = None
        self._hist_id = None
        self._id = None
        self._phones = None
        self._uid = None
        self.discriminator = None

        if cid is not None:
            self.cid = cid
        if code is not None:
            self.code = code
        if created_at is not None:
            self.created_at = created_at
        if emails is not None:
            self.emails = emails
        if full_name is not None:
            self.full_name = full_name
        if hist_id is not None:
            self.hist_id = hist_id
        if id is not None:
            self.id = id
        if phones is not None:
            self.phones = phones
        if uid is not None:
            self.uid = uid

    @property
    def cid(self):
        """Gets the cid of this Winner.  # noqa: E501

        (read-only) ID компании  # noqa: E501

        :return: The cid of this Winner.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Winner.

        (read-only) ID компании  # noqa: E501

        :param cid: The cid of this Winner.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def code(self):
        """Gets the code of this Winner.  # noqa: E501

        (read-only) Промокод  # noqa: E501

        :return: The code of this Winner.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Winner.

        (read-only) Промокод  # noqa: E501

        :param code: The code of this Winner.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def created_at(self):
        """Gets the created_at of this Winner.  # noqa: E501

        (read-only) Время создания записи  # noqa: E501

        :return: The created_at of this Winner.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Winner.

        (read-only) Время создания записи  # noqa: E501

        :param created_at: The created_at of this Winner.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def emails(self):
        """Gets the emails of this Winner.  # noqa: E501

        (read-only) Email-ы победителя  # noqa: E501

        :return: The emails of this Winner.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Winner.

        (read-only) Email-ы победителя  # noqa: E501

        :param emails: The emails of this Winner.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def full_name(self):
        """Gets the full_name of this Winner.  # noqa: E501

        (read-only) ФИО победителя  # noqa: E501

        :return: The full_name of this Winner.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Winner.

        (read-only) ФИО победителя  # noqa: E501

        :param full_name: The full_name of this Winner.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def hist_id(self):
        """Gets the hist_id of this Winner.  # noqa: E501

        (read-only) ID истории/акции  # noqa: E501

        :return: The hist_id of this Winner.  # noqa: E501
        :rtype: str
        """
        return self._hist_id

    @hist_id.setter
    def hist_id(self, hist_id):
        """Sets the hist_id of this Winner.

        (read-only) ID истории/акции  # noqa: E501

        :param hist_id: The hist_id of this Winner.  # noqa: E501
        :type: str
        """

        self._hist_id = hist_id

    @property
    def id(self):
        """Gets the id of this Winner.  # noqa: E501


        :return: The id of this Winner.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Winner.


        :param id: The id of this Winner.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def phones(self):
        """Gets the phones of this Winner.  # noqa: E501

        (read-only) Телефоны победителя  # noqa: E501

        :return: The phones of this Winner.  # noqa: E501
        :rtype: list[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Winner.

        (read-only) Телефоны победителя  # noqa: E501

        :param phones: The phones of this Winner.  # noqa: E501
        :type: list[str]
        """

        self._phones = phones

    @property
    def uid(self):
        """Gets the uid of this Winner.  # noqa: E501

        (read-only) ID победителя  # noqa: E501

        :return: The uid of this Winner.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Winner.

        (read-only) ID победителя  # noqa: E501

        :param uid: The uid of this Winner.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Winner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Winner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
