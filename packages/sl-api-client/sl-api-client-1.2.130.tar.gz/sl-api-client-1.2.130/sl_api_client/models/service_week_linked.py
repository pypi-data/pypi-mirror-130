# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServiceWeekLinked(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'str',
        'shop_id': 'str',
        'week': 'ServiceWeek'
    }

    attribute_map = {
        'resource_id': 'resourceId',
        'shop_id': 'shopId',
        'week': 'week'
    }

    def __init__(self, resource_id=None, shop_id=None, week=None):  # noqa: E501
        """ServiceWeekLinked - a model defined in Swagger"""  # noqa: E501

        self._resource_id = None
        self._shop_id = None
        self._week = None
        self.discriminator = None

        if resource_id is not None:
            self.resource_id = resource_id
        if shop_id is not None:
            self.shop_id = shop_id
        if week is not None:
            self.week = week

    @property
    def resource_id(self):
        """Gets the resource_id of this ServiceWeekLinked.  # noqa: E501

        Идентификатор ресурса  # noqa: E501

        :return: The resource_id of this ServiceWeekLinked.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ServiceWeekLinked.

        Идентификатор ресурса  # noqa: E501

        :param resource_id: The resource_id of this ServiceWeekLinked.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def shop_id(self):
        """Gets the shop_id of this ServiceWeekLinked.  # noqa: E501

        Идентификатор магазина  # noqa: E501

        :return: The shop_id of this ServiceWeekLinked.  # noqa: E501
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this ServiceWeekLinked.

        Идентификатор магазина  # noqa: E501

        :param shop_id: The shop_id of this ServiceWeekLinked.  # noqa: E501
        :type: str
        """

        self._shop_id = shop_id

    @property
    def week(self):
        """Gets the week of this ServiceWeekLinked.  # noqa: E501


        :return: The week of this ServiceWeekLinked.  # noqa: E501
        :rtype: ServiceWeek
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this ServiceWeekLinked.


        :param week: The week of this ServiceWeekLinked.  # noqa: E501
        :type: ServiceWeek
        """

        self._week = week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceWeekLinked, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceWeekLinked):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
