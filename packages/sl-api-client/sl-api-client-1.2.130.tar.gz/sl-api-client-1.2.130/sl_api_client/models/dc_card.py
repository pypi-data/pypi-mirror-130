# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DcCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'bonus': 'float',
        'description': 'str',
        'discount': 'float',
        'first_name': 'str',
        'last_name': 'str',
        'middle_name': 'str',
        'phone': 'str',
        'type': 'str'
    }

    attribute_map = {
        'number': 'number',
        'bonus': 'bonus',
        'description': 'description',
        'discount': 'discount',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'middle_name': 'middleName',
        'phone': 'phone',
        'type': 'type'
    }

    def __init__(self, number=None, bonus=None, description=None, discount=None, first_name=None, last_name=None, middle_name=None, phone=None, type=None):  # noqa: E501
        """DcCard - a model defined in Swagger"""  # noqa: E501

        self._number = None
        self._bonus = None
        self._description = None
        self._discount = None
        self._first_name = None
        self._last_name = None
        self._middle_name = None
        self._phone = None
        self._type = None
        self.discriminator = None

        self.number = number
        if bonus is not None:
            self.bonus = bonus
        if description is not None:
            self.description = description
        if discount is not None:
            self.discount = discount
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if middle_name is not None:
            self.middle_name = middle_name
        if phone is not None:
            self.phone = phone
        self.type = type

    @property
    def number(self):
        """Gets the number of this DcCard.  # noqa: E501

        Номер карты  # noqa: E501

        :return: The number of this DcCard.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DcCard.

        Номер карты  # noqa: E501

        :param number: The number of this DcCard.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def bonus(self):
        """Gets the bonus of this DcCard.  # noqa: E501

        Размер бонуса  # noqa: E501

        :return: The bonus of this DcCard.  # noqa: E501
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this DcCard.

        Размер бонуса  # noqa: E501

        :param bonus: The bonus of this DcCard.  # noqa: E501
        :type: float
        """
        if bonus is not None and bonus < 0:  # noqa: E501
            raise ValueError("Invalid value for `bonus`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bonus = bonus

    @property
    def description(self):
        """Gets the description of this DcCard.  # noqa: E501

        Дополнительная информация о карте  # noqa: E501

        :return: The description of this DcCard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DcCard.

        Дополнительная информация о карте  # noqa: E501

        :param description: The description of this DcCard.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this DcCard.  # noqa: E501

        Скидка по карте  # noqa: E501

        :return: The discount of this DcCard.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this DcCard.

        Скидка по карте  # noqa: E501

        :param discount: The discount of this DcCard.  # noqa: E501
        :type: float
        """
        if discount is not None and discount > 1:  # noqa: E501
            raise ValueError("Invalid value for `discount`, must be a value less than or equal to `1`")  # noqa: E501
        if discount is not None and discount < 0:  # noqa: E501
            raise ValueError("Invalid value for `discount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount = discount

    @property
    def first_name(self):
        """Gets the first_name of this DcCard.  # noqa: E501

        Имя владельца карты  # noqa: E501

        :return: The first_name of this DcCard.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DcCard.

        Имя владельца карты  # noqa: E501

        :param first_name: The first_name of this DcCard.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this DcCard.  # noqa: E501

        Фамилия владельца карты  # noqa: E501

        :return: The last_name of this DcCard.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DcCard.

        Фамилия владельца карты  # noqa: E501

        :param last_name: The last_name of this DcCard.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this DcCard.  # noqa: E501

        Отчество/второе имя владельца карты  # noqa: E501

        :return: The middle_name of this DcCard.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this DcCard.

        Отчество/второе имя владельца карты  # noqa: E501

        :param middle_name: The middle_name of this DcCard.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def phone(self):
        """Gets the phone of this DcCard.  # noqa: E501

        Номер телефона к которому привязана карта  # noqa: E501

        :return: The phone of this DcCard.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this DcCard.

        Номер телефона к которому привязана карта  # noqa: E501

        :param phone: The phone of this DcCard.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def type(self):
        """Gets the type of this DcCard.  # noqa: E501


        :return: The type of this DcCard.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DcCard.


        :param type: The type of this DcCard.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["discount", "bonus"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DcCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DcCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
