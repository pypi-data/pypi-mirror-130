# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class History(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        'cid': 'str',
        'codes': 'list[str]',
        'count_free': 'int',
        'created_at': 'int',
        'id': 'str',
        'mailing_id': 'str',
        'push_text': 'str',
        'started_at': 'str',
        'statistics': 'Statistic',
        'updated_at': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'cid': 'cid',
        'codes': 'codes',
        'count_free': 'count_free',
        'created_at': 'created_at',
        'id': 'id',
        'mailing_id': 'mailing_id',
        'push_text': 'push_text',
        'started_at': 'started_at',
        'statistics': 'statistics',
        'updated_at': 'updated_at'
    }

    def __init__(self, amount=None, cid=None, codes=None, count_free=None, created_at=None, id=None, mailing_id=None, push_text=None, started_at=None, statistics=None, updated_at=None):  # noqa: E501
        """History - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._cid = None
        self._codes = None
        self._count_free = None
        self._created_at = None
        self._id = None
        self._mailing_id = None
        self._push_text = None
        self._started_at = None
        self._statistics = None
        self._updated_at = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if cid is not None:
            self.cid = cid
        if codes is not None:
            self.codes = codes
        if count_free is not None:
            self.count_free = count_free
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if mailing_id is not None:
            self.mailing_id = mailing_id
        if push_text is not None:
            self.push_text = push_text
        if started_at is not None:
            self.started_at = started_at
        if statistics is not None:
            self.statistics = statistics
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def amount(self):
        """Gets the amount of this History.  # noqa: E501

        (read-only) Общее количество промокодов  # noqa: E501

        :return: The amount of this History.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this History.

        (read-only) Общее количество промокодов  # noqa: E501

        :param amount: The amount of this History.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def cid(self):
        """Gets the cid of this History.  # noqa: E501

        (read-only) ID компании  # noqa: E501

        :return: The cid of this History.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this History.

        (read-only) ID компании  # noqa: E501

        :param cid: The cid of this History.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def codes(self):
        """Gets the codes of this History.  # noqa: E501

        (read-only) Розыгранные промокоды  # noqa: E501

        :return: The codes of this History.  # noqa: E501
        :rtype: list[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this History.

        (read-only) Розыгранные промокоды  # noqa: E501

        :param codes: The codes of this History.  # noqa: E501
        :type: list[str]
        """

        self._codes = codes

    @property
    def count_free(self):
        """Gets the count_free of this History.  # noqa: E501

        (read-only) Оставшиеся кол-во не розыгранных промокодов  # noqa: E501

        :return: The count_free of this History.  # noqa: E501
        :rtype: int
        """
        return self._count_free

    @count_free.setter
    def count_free(self, count_free):
        """Sets the count_free of this History.

        (read-only) Оставшиеся кол-во не розыгранных промокодов  # noqa: E501

        :param count_free: The count_free of this History.  # noqa: E501
        :type: int
        """

        self._count_free = count_free

    @property
    def created_at(self):
        """Gets the created_at of this History.  # noqa: E501

        (read-only) Время создания записи  # noqa: E501

        :return: The created_at of this History.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this History.

        (read-only) Время создания записи  # noqa: E501

        :param created_at: The created_at of this History.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this History.  # noqa: E501

        (read-only) ID истории  # noqa: E501

        :return: The id of this History.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this History.

        (read-only) ID истории  # noqa: E501

        :param id: The id of this History.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mailing_id(self):
        """Gets the mailing_id of this History.  # noqa: E501

        (read-only) ID рассылки в message  # noqa: E501

        :return: The mailing_id of this History.  # noqa: E501
        :rtype: str
        """
        return self._mailing_id

    @mailing_id.setter
    def mailing_id(self, mailing_id):
        """Sets the mailing_id of this History.

        (read-only) ID рассылки в message  # noqa: E501

        :param mailing_id: The mailing_id of this History.  # noqa: E501
        :type: str
        """

        self._mailing_id = mailing_id

    @property
    def push_text(self):
        """Gets the push_text of this History.  # noqa: E501

        Текст Push-сообщений  # noqa: E501

        :return: The push_text of this History.  # noqa: E501
        :rtype: str
        """
        return self._push_text

    @push_text.setter
    def push_text(self, push_text):
        """Sets the push_text of this History.

        Текст Push-сообщений  # noqa: E501

        :param push_text: The push_text of this History.  # noqa: E501
        :type: str
        """

        self._push_text = push_text

    @property
    def started_at(self):
        """Gets the started_at of this History.  # noqa: E501

        (read-only) Время начала акции  # noqa: E501

        :return: The started_at of this History.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this History.

        (read-only) Время начала акции  # noqa: E501

        :param started_at: The started_at of this History.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def statistics(self):
        """Gets the statistics of this History.  # noqa: E501

        (read-only) Статистика  # noqa: E501

        :return: The statistics of this History.  # noqa: E501
        :rtype: Statistic
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this History.

        (read-only) Статистика  # noqa: E501

        :param statistics: The statistics of this History.  # noqa: E501
        :type: Statistic
        """

        self._statistics = statistics

    @property
    def updated_at(self):
        """Gets the updated_at of this History.  # noqa: E501

        (read-only) Время обновления записи  # noqa: E501

        :return: The updated_at of this History.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this History.

        (read-only) Время обновления записи  # noqa: E501

        :param updated_at: The updated_at of this History.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(History, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, History):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
