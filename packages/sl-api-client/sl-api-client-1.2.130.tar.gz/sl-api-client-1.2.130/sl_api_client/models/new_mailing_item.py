# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewMailingItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'Content',
        'name': 'str',
        'send_time': 'str'
    }

    attribute_map = {
        'content': 'content',
        'name': 'name',
        'send_time': 'sendTime'
    }

    def __init__(self, content=None, name=None, send_time=None):  # noqa: E501
        """NewMailingItem - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._name = None
        self._send_time = None
        self.discriminator = None

        self.content = content
        if name is not None:
            self.name = name
        if send_time is not None:
            self.send_time = send_time

    @property
    def content(self):
        """Gets the content of this NewMailingItem.  # noqa: E501


        :return: The content of this NewMailingItem.  # noqa: E501
        :rtype: Content
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NewMailingItem.


        :param content: The content of this NewMailingItem.  # noqa: E501
        :type: Content
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def name(self):
        """Gets the name of this NewMailingItem.  # noqa: E501


        :return: The name of this NewMailingItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewMailingItem.


        :param name: The name of this NewMailingItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def send_time(self):
        """Gets the send_time of this NewMailingItem.  # noqa: E501


        :return: The send_time of this NewMailingItem.  # noqa: E501
        :rtype: str
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time):
        """Sets the send_time of this NewMailingItem.


        :param send_time: The send_time of this NewMailingItem.  # noqa: E501
        :type: str
        """

        self._send_time = send_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewMailingItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewMailingItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
