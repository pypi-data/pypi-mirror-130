# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DcLoyaltyHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance_change': 'float',
        'mechanic': 'str',
        'message': 'str',
        'time': 'int'
    }

    attribute_map = {
        'balance_change': 'balanceChange',
        'mechanic': 'mechanic',
        'message': 'message',
        'time': 'time'
    }

    def __init__(self, balance_change=None, mechanic=None, message=None, time=None):  # noqa: E501
        """DcLoyaltyHistory - a model defined in Swagger"""  # noqa: E501

        self._balance_change = None
        self._mechanic = None
        self._message = None
        self._time = None
        self.discriminator = None

        if balance_change is not None:
            self.balance_change = balance_change
        if mechanic is not None:
            self.mechanic = mechanic
        if message is not None:
            self.message = message
        if time is not None:
            self.time = time

    @property
    def balance_change(self):
        """Gets the balance_change of this DcLoyaltyHistory.  # noqa: E501

        Изменение бонусного баланса  # noqa: E501

        :return: The balance_change of this DcLoyaltyHistory.  # noqa: E501
        :rtype: float
        """
        return self._balance_change

    @balance_change.setter
    def balance_change(self, balance_change):
        """Sets the balance_change of this DcLoyaltyHistory.

        Изменение бонусного баланса  # noqa: E501

        :param balance_change: The balance_change of this DcLoyaltyHistory.  # noqa: E501
        :type: float
        """

        self._balance_change = balance_change

    @property
    def mechanic(self):
        """Gets the mechanic of this DcLoyaltyHistory.  # noqa: E501

        Применяемая механника  # noqa: E501

        :return: The mechanic of this DcLoyaltyHistory.  # noqa: E501
        :rtype: str
        """
        return self._mechanic

    @mechanic.setter
    def mechanic(self, mechanic):
        """Sets the mechanic of this DcLoyaltyHistory.

        Применяемая механника  # noqa: E501

        :param mechanic: The mechanic of this DcLoyaltyHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["custom", "cardBinding", "inviteCode", "inviteApply", "profileApply", "vkGroup"]  # noqa: E501
        if mechanic not in allowed_values:
            raise ValueError(
                "Invalid value for `mechanic` ({0}), must be one of {1}"  # noqa: E501
                .format(mechanic, allowed_values)
            )

        self._mechanic = mechanic

    @property
    def message(self):
        """Gets the message of this DcLoyaltyHistory.  # noqa: E501

        Текстовое сообщение  # noqa: E501

        :return: The message of this DcLoyaltyHistory.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DcLoyaltyHistory.

        Текстовое сообщение  # noqa: E501

        :param message: The message of this DcLoyaltyHistory.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def time(self):
        """Gets the time of this DcLoyaltyHistory.  # noqa: E501

        Таймштамп события (Unix)  # noqa: E501

        :return: The time of this DcLoyaltyHistory.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DcLoyaltyHistory.

        Таймштамп события (Unix)  # noqa: E501

        :param time: The time of this DcLoyaltyHistory.  # noqa: E501
        :type: int
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DcLoyaltyHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DcLoyaltyHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
