# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CloudLoyaltyOperationCollected(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'executed_at': 'str',
        'purchase_id': 'str',
        'total_amount': 'float'
    }

    attribute_map = {
        'executed_at': 'executedAt',
        'purchase_id': 'purchaseId',
        'total_amount': 'totalAmount'
    }

    def __init__(self, executed_at=None, purchase_id=None, total_amount=None):  # noqa: E501
        """CloudLoyaltyOperationCollected - a model defined in Swagger"""  # noqa: E501

        self._executed_at = None
        self._purchase_id = None
        self._total_amount = None
        self.discriminator = None

        self.executed_at = executed_at
        self.purchase_id = purchase_id
        self.total_amount = total_amount

    @property
    def executed_at(self):
        """Gets the executed_at of this CloudLoyaltyOperationCollected.  # noqa: E501

        дата продажи  # noqa: E501

        :return: The executed_at of this CloudLoyaltyOperationCollected.  # noqa: E501
        :rtype: str
        """
        return self._executed_at

    @executed_at.setter
    def executed_at(self, executed_at):
        """Sets the executed_at of this CloudLoyaltyOperationCollected.

        дата продажи  # noqa: E501

        :param executed_at: The executed_at of this CloudLoyaltyOperationCollected.  # noqa: E501
        :type: str
        """
        if executed_at is None:
            raise ValueError("Invalid value for `executed_at`, must not be `None`")  # noqa: E501

        self._executed_at = executed_at

    @property
    def purchase_id(self):
        """Gets the purchase_id of this CloudLoyaltyOperationCollected.  # noqa: E501

        идентификатор продажи  # noqa: E501

        :return: The purchase_id of this CloudLoyaltyOperationCollected.  # noqa: E501
        :rtype: str
        """
        return self._purchase_id

    @purchase_id.setter
    def purchase_id(self, purchase_id):
        """Sets the purchase_id of this CloudLoyaltyOperationCollected.

        идентификатор продажи  # noqa: E501

        :param purchase_id: The purchase_id of this CloudLoyaltyOperationCollected.  # noqa: E501
        :type: str
        """
        if purchase_id is None:
            raise ValueError("Invalid value for `purchase_id`, must not be `None`")  # noqa: E501

        self._purchase_id = purchase_id

    @property
    def total_amount(self):
        """Gets the total_amount of this CloudLoyaltyOperationCollected.  # noqa: E501

        сумма покупки  # noqa: E501

        :return: The total_amount of this CloudLoyaltyOperationCollected.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CloudLoyaltyOperationCollected.

        сумма покупки  # noqa: E501

        :param total_amount: The total_amount of this CloudLoyaltyOperationCollected.  # noqa: E501
        :type: float
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudLoyaltyOperationCollected, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudLoyaltyOperationCollected):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
