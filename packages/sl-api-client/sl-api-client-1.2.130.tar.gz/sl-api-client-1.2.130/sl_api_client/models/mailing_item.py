# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MailingItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'id': 'str',
        'name': 'str',
        'send_time': 'str',
        'target': 'object',
        'title': 'str',
        'body': 'str'
    }

    attribute_map = {
        'create_time': 'createTime',
        'id': 'id',
        'name': 'name',
        'send_time': 'sendTime',
        'target': 'target',
        'title': 'title',
        'body': 'body'
    }

    def __init__(self, create_time=None, id=None, name=None, send_time=None, target=None, title=None, body=None):  # noqa: E501
        """MailingItem - a model defined in Swagger"""  # noqa: E501

        self._create_time = None
        self._id = None
        self._name = None
        self._send_time = None
        self._target = None
        self._title = None
        self._body = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if send_time is not None:
            self.send_time = send_time
        self.target = target
        if title is not None:
            self.title = title
        self.body = body

    @property
    def create_time(self):
        """Gets the create_time of this MailingItem.  # noqa: E501

        Дата создания рассылки  # noqa: E501

        :return: The create_time of this MailingItem.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MailingItem.

        Дата создания рассылки  # noqa: E501

        :param create_time: The create_time of this MailingItem.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def id(self):
        """Gets the id of this MailingItem.  # noqa: E501

        Идентфикатор рассылки  # noqa: E501

        :return: The id of this MailingItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MailingItem.

        Идентфикатор рассылки  # noqa: E501

        :param id: The id of this MailingItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MailingItem.  # noqa: E501

        Название рассылки  # noqa: E501

        :return: The name of this MailingItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MailingItem.

        Название рассылки  # noqa: E501

        :param name: The name of this MailingItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def send_time(self):
        """Gets the send_time of this MailingItem.  # noqa: E501

        Дата отправки рассылки  # noqa: E501

        :return: The send_time of this MailingItem.  # noqa: E501
        :rtype: str
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time):
        """Sets the send_time of this MailingItem.

        Дата отправки рассылки  # noqa: E501

        :param send_time: The send_time of this MailingItem.  # noqa: E501
        :type: str
        """

        self._send_time = send_time

    @property
    def target(self):
        """Gets the target of this MailingItem.  # noqa: E501

        Объект с данными о получателях рассылки  # noqa: E501

        :return: The target of this MailingItem.  # noqa: E501
        :rtype: object
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this MailingItem.

        Объект с данными о получателях рассылки  # noqa: E501

        :param target: The target of this MailingItem.  # noqa: E501
        :type: object
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def title(self):
        """Gets the title of this MailingItem.  # noqa: E501

        Заголовок сообщения  # noqa: E501

        :return: The title of this MailingItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MailingItem.

        Заголовок сообщения  # noqa: E501

        :param title: The title of this MailingItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def body(self):
        """Gets the body of this MailingItem.  # noqa: E501

        Тело сообщения  # noqa: E501

        :return: The body of this MailingItem.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MailingItem.

        Тело сообщения  # noqa: E501

        :param body: The body of this MailingItem.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailingItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailingItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
