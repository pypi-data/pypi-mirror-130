# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportTicket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'str',
        'properties': 'list[IPropertyValue]',
        'reason': 'str',
        'subject': 'str',
        'created': 'int',
        'id': 'str',
        'operator_id': 'str',
        'status': 'str',
        'updated': 'int',
        'user_id': 'str'
    }

    attribute_map = {
        'body': 'body',
        'properties': 'properties',
        'reason': 'reason',
        'subject': 'subject',
        'created': 'created',
        'id': 'id',
        'operator_id': 'operatorId',
        'status': 'status',
        'updated': 'updated',
        'user_id': 'userId'
    }

    def __init__(self, body=None, properties=None, reason=None, subject=None, created=None, id=None, operator_id=None, status='new', updated=None, user_id=None):  # noqa: E501
        """SupportTicket - a model defined in Swagger"""  # noqa: E501

        self._body = None
        self._properties = None
        self._reason = None
        self._subject = None
        self._created = None
        self._id = None
        self._operator_id = None
        self._status = None
        self._updated = None
        self._user_id = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if properties is not None:
            self.properties = properties
        self.reason = reason
        if subject is not None:
            self.subject = subject
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if operator_id is not None:
            self.operator_id = operator_id
        if status is not None:
            self.status = status
        if updated is not None:
            self.updated = updated
        self.user_id = user_id

    @property
    def body(self):
        """Gets the body of this SupportTicket.  # noqa: E501

        Тело сообщения  # noqa: E501

        :return: The body of this SupportTicket.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SupportTicket.

        Тело сообщения  # noqa: E501

        :param body: The body of this SupportTicket.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def properties(self):
        """Gets the properties of this SupportTicket.  # noqa: E501


        :return: The properties of this SupportTicket.  # noqa: E501
        :rtype: list[IPropertyValue]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SupportTicket.


        :param properties: The properties of this SupportTicket.  # noqa: E501
        :type: list[IPropertyValue]
        """

        self._properties = properties

    @property
    def reason(self):
        """Gets the reason of this SupportTicket.  # noqa: E501

        Название на латиннице (^[0-9a-zA-Z-_]+$) причины обращения  # noqa: E501

        :return: The reason of this SupportTicket.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SupportTicket.

        Название на латиннице (^[0-9a-zA-Z-_]+$) причины обращения  # noqa: E501

        :param reason: The reason of this SupportTicket.  # noqa: E501
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def subject(self):
        """Gets the subject of this SupportTicket.  # noqa: E501

        Заголовок обращения (Тема)  # noqa: E501

        :return: The subject of this SupportTicket.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SupportTicket.

        Заголовок обращения (Тема)  # noqa: E501

        :param subject: The subject of this SupportTicket.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def created(self):
        """Gets the created of this SupportTicket.  # noqa: E501

        Таймштамп создания (Unix)  # noqa: E501

        :return: The created of this SupportTicket.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SupportTicket.

        Таймштамп создания (Unix)  # noqa: E501

        :param created: The created of this SupportTicket.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this SupportTicket.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The id of this SupportTicket.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupportTicket.

        Идентификатор  # noqa: E501

        :param id: The id of this SupportTicket.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def operator_id(self):
        """Gets the operator_id of this SupportTicket.  # noqa: E501

        Идентификатор оператора (если не задан - выбирается первый из существующих)  # noqa: E501

        :return: The operator_id of this SupportTicket.  # noqa: E501
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this SupportTicket.

        Идентификатор оператора (если не задан - выбирается первый из существующих)  # noqa: E501

        :param operator_id: The operator_id of this SupportTicket.  # noqa: E501
        :type: str
        """

        self._operator_id = operator_id

    @property
    def status(self):
        """Gets the status of this SupportTicket.  # noqa: E501

        * new -  тикет создан, но еще не обрабатывается опетором (не назначен оператор); * open - тикет обрабатывается, но ответ еще не отправлен клиенту (возможны внутренние примечания к тикету, невидимые клиенту); * pending - тикет обработан, ожидается ответ от клиента на отправленный ответ от компании; * resolved - тикет решен, допускается ответы от клиента (в таком случае тикет повторно 'открывается');  * closed - тикет закрыт, новые обновления со стороны оператора или клиента невозможны   # noqa: E501

        :return: The status of this SupportTicket.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupportTicket.

        * new -  тикет создан, но еще не обрабатывается опетором (не назначен оператор); * open - тикет обрабатывается, но ответ еще не отправлен клиенту (возможны внутренние примечания к тикету, невидимые клиенту); * pending - тикет обработан, ожидается ответ от клиента на отправленный ответ от компании; * resolved - тикет решен, допускается ответы от клиента (в таком случае тикет повторно 'открывается');  * closed - тикет закрыт, новые обновления со стороны оператора или клиента невозможны   # noqa: E501

        :param status: The status of this SupportTicket.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "open", "pending", "resolved", "closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this SupportTicket.  # noqa: E501

        Таймштамп обновления (Unix)  # noqa: E501

        :return: The updated of this SupportTicket.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SupportTicket.

        Таймштамп обновления (Unix)  # noqa: E501

        :param updated: The updated of this SupportTicket.  # noqa: E501
        :type: int
        """

        self._updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this SupportTicket.  # noqa: E501

        Идентификатор пользователя  # noqa: E501

        :return: The user_id of this SupportTicket.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SupportTicket.

        Идентификатор пользователя  # noqa: E501

        :param user_id: The user_id of this SupportTicket.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportTicket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportTicket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
