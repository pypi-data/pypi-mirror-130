# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog_item_id': 'str',
        'data': 'CartItemData',
        'discount_price': 'float',
        'id': 'str',
        'portion': 'float',
        'price': 'float',
        'quantity': 'int',
        'unit': 'str'
    }

    attribute_map = {
        'catalog_item_id': 'catalogItemId',
        'data': 'data',
        'discount_price': 'discountPrice',
        'id': 'id',
        'portion': 'portion',
        'price': 'price',
        'quantity': 'quantity',
        'unit': 'unit'
    }

    def __init__(self, catalog_item_id=None, data=None, discount_price=None, id=None, portion=None, price=None, quantity=1, unit='pc'):  # noqa: E501
        """CartItem - a model defined in Swagger"""  # noqa: E501

        self._catalog_item_id = None
        self._data = None
        self._discount_price = None
        self._id = None
        self._portion = None
        self._price = None
        self._quantity = None
        self._unit = None
        self.discriminator = None

        if catalog_item_id is not None:
            self.catalog_item_id = catalog_item_id
        if data is not None:
            self.data = data
        if discount_price is not None:
            self.discount_price = discount_price
        if id is not None:
            self.id = id
        if portion is not None:
            self.portion = portion
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if unit is not None:
            self.unit = unit

    @property
    def catalog_item_id(self):
        """Gets the catalog_item_id of this CartItem.  # noqa: E501

        Идентификатор в каталоге  # noqa: E501

        :return: The catalog_item_id of this CartItem.  # noqa: E501
        :rtype: str
        """
        return self._catalog_item_id

    @catalog_item_id.setter
    def catalog_item_id(self, catalog_item_id):
        """Sets the catalog_item_id of this CartItem.

        Идентификатор в каталоге  # noqa: E501

        :param catalog_item_id: The catalog_item_id of this CartItem.  # noqa: E501
        :type: str
        """

        self._catalog_item_id = catalog_item_id

    @property
    def data(self):
        """Gets the data of this CartItem.  # noqa: E501


        :return: The data of this CartItem.  # noqa: E501
        :rtype: CartItemData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CartItem.


        :param data: The data of this CartItem.  # noqa: E501
        :type: CartItemData
        """

        self._data = data

    @property
    def discount_price(self):
        """Gets the discount_price of this CartItem.  # noqa: E501

        Цена товара со скидкой  # noqa: E501

        :return: The discount_price of this CartItem.  # noqa: E501
        :rtype: float
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this CartItem.

        Цена товара со скидкой  # noqa: E501

        :param discount_price: The discount_price of this CartItem.  # noqa: E501
        :type: float
        """
        if discount_price is not None and discount_price < 0:  # noqa: E501
            raise ValueError("Invalid value for `discount_price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount_price = discount_price

    @property
    def id(self):
        """Gets the id of this CartItem.  # noqa: E501

        Идентификатор в корзине  # noqa: E501

        :return: The id of this CartItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CartItem.

        Идентификатор в корзине  # noqa: E501

        :param id: The id of this CartItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def portion(self):
        """Gets the portion of this CartItem.  # noqa: E501

        Чему равна единица товара в единицах измерения  # noqa: E501

        :return: The portion of this CartItem.  # noqa: E501
        :rtype: float
        """
        return self._portion

    @portion.setter
    def portion(self, portion):
        """Sets the portion of this CartItem.

        Чему равна единица товара в единицах измерения  # noqa: E501

        :param portion: The portion of this CartItem.  # noqa: E501
        :type: float
        """
        if portion is not None and portion < 0.001:  # noqa: E501
            raise ValueError("Invalid value for `portion`, must be a value greater than or equal to `0.001`")  # noqa: E501

        self._portion = portion

    @property
    def price(self):
        """Gets the price of this CartItem.  # noqa: E501

        Цена товара  # noqa: E501

        :return: The price of this CartItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CartItem.

        Цена товара  # noqa: E501

        :param price: The price of this CartItem.  # noqa: E501
        :type: float
        """
        if price is not None and price < 0:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this CartItem.  # noqa: E501

        Количество единиц товара  # noqa: E501

        :return: The quantity of this CartItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CartItem.

        Количество единиц товара  # noqa: E501

        :param quantity: The quantity of this CartItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def unit(self):
        """Gets the unit of this CartItem.  # noqa: E501

        Единицы измерения товара  # noqa: E501

        :return: The unit of this CartItem.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CartItem.

        Единицы измерения товара  # noqa: E501

        :param unit: The unit of this CartItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["pc", "l", "ml", "kg", "g"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
