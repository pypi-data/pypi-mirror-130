# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MessageFabric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_type': 'str',
        'body': 'str',
        'channels': 'list[str]',
        'create': 'int',
        'fire_time': 'int',
        'id': 'str',
        'name': 'str',
        'payload': 'object',
        'query': 'object',
        'title': 'str'
    }

    attribute_map = {
        'app_type': 'appType',
        'body': 'body',
        'channels': 'channels',
        'create': 'create',
        'fire_time': 'fireTime',
        'id': 'id',
        'name': 'name',
        'payload': 'payload',
        'query': 'query',
        'title': 'title'
    }

    def __init__(self, app_type=None, body=None, channels=None, create=None, fire_time=None, id=None, name=None, payload=None, query=None, title=None):  # noqa: E501
        """MessageFabric - a model defined in Swagger"""  # noqa: E501

        self._app_type = None
        self._body = None
        self._channels = None
        self._create = None
        self._fire_time = None
        self._id = None
        self._name = None
        self._payload = None
        self._query = None
        self._title = None
        self.discriminator = None

        if app_type is not None:
            self.app_type = app_type
        self.body = body
        self.channels = channels
        if create is not None:
            self.create = create
        if fire_time is not None:
            self.fire_time = fire_time
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if payload is not None:
            self.payload = payload
        if query is not None:
            self.query = query
        if title is not None:
            self.title = title

    @property
    def app_type(self):
        """Gets the app_type of this MessageFabric.  # noqa: E501

        Тип приложения в рамках одной компании  # noqa: E501

        :return: The app_type of this MessageFabric.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this MessageFabric.

        Тип приложения в рамках одной компании  # noqa: E501

        :param app_type: The app_type of this MessageFabric.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def body(self):
        """Gets the body of this MessageFabric.  # noqa: E501

        Тело сообщения  # noqa: E501

        :return: The body of this MessageFabric.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MessageFabric.

        Тело сообщения  # noqa: E501

        :param body: The body of this MessageFabric.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def channels(self):
        """Gets the channels of this MessageFabric.  # noqa: E501

        Список каналов по которым должно быть разослано сообщение  # noqa: E501

        :return: The channels of this MessageFabric.  # noqa: E501
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this MessageFabric.

        Список каналов по которым должно быть разослано сообщение  # noqa: E501

        :param channels: The channels of this MessageFabric.  # noqa: E501
        :type: list[str]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")  # noqa: E501
        allowed_values = ["email", "sms", "androidPush", "iosPush"]  # noqa: E501
        if not set(channels).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `channels` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(channels) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._channels = channels

    @property
    def create(self):
        """Gets the create of this MessageFabric.  # noqa: E501

        Таймштамп создания (Unix)  # noqa: E501

        :return: The create of this MessageFabric.  # noqa: E501
        :rtype: int
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this MessageFabric.

        Таймштамп создания (Unix)  # noqa: E501

        :param create: The create of this MessageFabric.  # noqa: E501
        :type: int
        """

        self._create = create

    @property
    def fire_time(self):
        """Gets the fire_time of this MessageFabric.  # noqa: E501

        Таймштамп запуска рассылки (Unix)  # noqa: E501

        :return: The fire_time of this MessageFabric.  # noqa: E501
        :rtype: int
        """
        return self._fire_time

    @fire_time.setter
    def fire_time(self, fire_time):
        """Sets the fire_time of this MessageFabric.

        Таймштамп запуска рассылки (Unix)  # noqa: E501

        :param fire_time: The fire_time of this MessageFabric.  # noqa: E501
        :type: int
        """

        self._fire_time = fire_time

    @property
    def id(self):
        """Gets the id of this MessageFabric.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The id of this MessageFabric.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageFabric.

        Идентификатор  # noqa: E501

        :param id: The id of this MessageFabric.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MessageFabric.  # noqa: E501

        Название рассылки для административной панели (не уникальное)  # noqa: E501

        :return: The name of this MessageFabric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MessageFabric.

        Название рассылки для административной панели (не уникальное)  # noqa: E501

        :param name: The name of this MessageFabric.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def payload(self):
        """Gets the payload of this MessageFabric.  # noqa: E501

        Объект дополнительной нагрузки для сообщения. (Используется в PUSH)  # noqa: E501

        :return: The payload of this MessageFabric.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this MessageFabric.

        Объект дополнительной нагрузки для сообщения. (Используется в PUSH)  # noqa: E501

        :param payload: The payload of this MessageFabric.  # noqa: E501
        :type: object
        """

        self._payload = payload

    @property
    def query(self):
        """Gets the query of this MessageFabric.  # noqa: E501

        Объект передаваемый в запрос /dynamic/user/search/  # noqa: E501

        :return: The query of this MessageFabric.  # noqa: E501
        :rtype: object
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this MessageFabric.

        Объект передаваемый в запрос /dynamic/user/search/  # noqa: E501

        :param query: The query of this MessageFabric.  # noqa: E501
        :type: object
        """

        self._query = query

    @property
    def title(self):
        """Gets the title of this MessageFabric.  # noqa: E501

        Заголовок сообщения  # noqa: E501

        :return: The title of this MessageFabric.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MessageFabric.

        Заголовок сообщения  # noqa: E501

        :param title: The title of this MessageFabric.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageFabric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageFabric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
