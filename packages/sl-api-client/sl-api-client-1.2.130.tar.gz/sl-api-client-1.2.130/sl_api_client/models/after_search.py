# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AfterSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'after': 'str',
        'filter': 'SearchFilter',
        'limit': 'int',
        'only': 'list[str]',
        'query': 'str'
    }

    attribute_map = {
        'after': 'after',
        'filter': 'filter',
        'limit': 'limit',
        'only': 'only',
        'query': 'query'
    }

    def __init__(self, after=None, filter=None, limit=50, only=None, query=None):  # noqa: E501
        """AfterSearch - a model defined in Swagger"""  # noqa: E501

        self._after = None
        self._filter = None
        self._limit = None
        self._only = None
        self._query = None
        self.discriminator = None

        if after is not None:
            self.after = after
        if filter is not None:
            self.filter = filter
        if limit is not None:
            self.limit = limit
        if only is not None:
            self.only = only
        if query is not None:
            self.query = query

    @property
    def after(self):
        """Gets the after of this AfterSearch.  # noqa: E501

        Идентификатор обекта после которого продолжить поиск, если не задан то вернется результат с начала  # noqa: E501

        :return: The after of this AfterSearch.  # noqa: E501
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this AfterSearch.

        Идентификатор обекта после которого продолжить поиск, если не задан то вернется результат с начала  # noqa: E501

        :param after: The after of this AfterSearch.  # noqa: E501
        :type: str
        """

        self._after = after

    @property
    def filter(self):
        """Gets the filter of this AfterSearch.  # noqa: E501


        :return: The filter of this AfterSearch.  # noqa: E501
        :rtype: SearchFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this AfterSearch.


        :param filter: The filter of this AfterSearch.  # noqa: E501
        :type: SearchFilter
        """

        self._filter = filter

    @property
    def limit(self):
        """Gets the limit of this AfterSearch.  # noqa: E501

        Количество выбираемых элементов  # noqa: E501

        :return: The limit of this AfterSearch.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AfterSearch.

        Количество выбираемых элементов  # noqa: E501

        :param limit: The limit of this AfterSearch.  # noqa: E501
        :type: int
        """
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def only(self):
        """Gets the only of this AfterSearch.  # noqa: E501

        Список полей, которые необходимо получить из индекса  # noqa: E501

        :return: The only of this AfterSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._only

    @only.setter
    def only(self, only):
        """Sets the only of this AfterSearch.

        Список полей, которые необходимо получить из индекса  # noqa: E501

        :param only: The only of this AfterSearch.  # noqa: E501
        :type: list[str]
        """

        self._only = only

    @property
    def query(self):
        """Gets the query of this AfterSearch.  # noqa: E501

        Поисковая строка  # noqa: E501

        :return: The query of this AfterSearch.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AfterSearch.

        Поисковая строка  # noqa: E501

        :param query: The query of this AfterSearch.  # noqa: E501
        :type: str
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AfterSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AfterSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
