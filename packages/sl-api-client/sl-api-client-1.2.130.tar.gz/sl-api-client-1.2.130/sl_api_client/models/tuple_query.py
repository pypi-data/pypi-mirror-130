# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TupleQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'offset': 'int',
        'order': 'str',
        'order_by': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'order': 'order',
        'order_by': 'orderBy'
    }

    def __init__(self, limit=50, offset=0, order='DESC', order_by='created_at'):  # noqa: E501
        """TupleQuery - a model defined in Swagger"""  # noqa: E501

        self._limit = None
        self._offset = None
        self._order = None
        self._order_by = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if order is not None:
            self.order = order
        if order_by is not None:
            self.order_by = order_by

    @property
    def limit(self):
        """Gets the limit of this TupleQuery.  # noqa: E501

        Количество выбираемых элементов  # noqa: E501

        :return: The limit of this TupleQuery.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TupleQuery.

        Количество выбираемых элементов  # noqa: E501

        :param limit: The limit of this TupleQuery.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this TupleQuery.  # noqa: E501

        Смещение от начала выборки  # noqa: E501

        :return: The offset of this TupleQuery.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TupleQuery.

        Смещение от начала выборки  # noqa: E501

        :param offset: The offset of this TupleQuery.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def order(self):
        """Gets the order of this TupleQuery.  # noqa: E501

        Порядок сортировки по полю указанному в orderBy. Доступны значения DESK и ASC  # noqa: E501

        :return: The order of this TupleQuery.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TupleQuery.

        Порядок сортировки по полю указанному в orderBy. Доступны значения DESK и ASC  # noqa: E501

        :param order: The order of this TupleQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["DESC", "ASC"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"  # noqa: E501
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def order_by(self):
        """Gets the order_by of this TupleQuery.  # noqa: E501

        По какому полю должна происходить сортировка. Доступны поля created_at и updated_at  # noqa: E501

        :return: The order_by of this TupleQuery.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this TupleQuery.

        По какому полю должна происходить сортировка. Доступны поля created_at и updated_at  # noqa: E501

        :param order_by: The order_by of this TupleQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["created_at", "updated_at"]  # noqa: E501
        if order_by not in allowed_values:
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"  # noqa: E501
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TupleQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TupleQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
