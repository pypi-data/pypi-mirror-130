# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IPropertyValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extra': 'object',
        '_import': 'bool',
        'key': 'str',
        'name': 'str',
        'type': 'str',
        'view': 'str',
        'value': 'list[object]'
    }

    attribute_map = {
        'extra': 'extra',
        '_import': 'import',
        'key': 'key',
        'name': 'name',
        'type': 'type',
        'view': 'view',
        'value': 'value'
    }

    def __init__(self, extra=None, _import=None, key=None, name=None, type='ipString', view='vNone', value=None):  # noqa: E501
        """IPropertyValue - a model defined in Swagger"""  # noqa: E501

        self._extra = None
        self.__import = None
        self._key = None
        self._name = None
        self._type = None
        self._view = None
        self._value = None
        self.discriminator = None

        if extra is not None:
            self.extra = extra
        if _import is not None:
            self._import = _import
        self.key = key
        if name is not None:
            self.name = name
        self.type = type
        if view is not None:
            self.view = view
        if value is not None:
            self.value = value

    @property
    def extra(self):
        """Gets the extra of this IPropertyValue.  # noqa: E501

        Содержимое зависит от view * vNone - Специальный тип объекта. Служит для обозначения скрытых свойств, которые не отображаются в пользовательском интерфейсе. * vRange - Объект позволяет задать диапазон значений в формате [x,y], где x - минимальное значение, y - максимальное значение.  * vSelect - Хранит 1 значение заданной переменной. Может быть представлен в формате: string, integer, float, ipObject. * vMultiSelect - Массив, хранящий несколько вариантов значений (более 2). Позволяет осуществить множественный выбор. Может быть представлен в формате: string, integer, float, ipObject. * vCheckbox - Объект дополнительных параметров. Например: массив списка доступных вариантов значения       * vPoint - Объект типа ipObject. Отражает координаты заданной точки вида долгота (lat), широта (lon). Используется для задания координат на местности. Пример: { \"lat\": 55.543543, \"lon\": 63.2324 } * vImageUrl - Позволяет хранить ссылку в формате url на любое изображение в интернет пространстве. Пример: https://octodex.github.com/images/dojocat.jpg * vUrl - Хранить ссылку в формате string на любой внешний элемент в интернет пространстве. Пример: https://ru.wikipedia.org * vDate - Хранит дату по стандарту RFC3339 (год-месяц-день). Задается в формате string. Пример: 2017-07-21 * vDateTime - Хранит дату и время по стандарту RFC3339. Задается в формате string. Пример: 1995-12-01T12:00:27.87+00:20   # noqa: E501

        :return: The extra of this IPropertyValue.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this IPropertyValue.

        Содержимое зависит от view * vNone - Специальный тип объекта. Служит для обозначения скрытых свойств, которые не отображаются в пользовательском интерфейсе. * vRange - Объект позволяет задать диапазон значений в формате [x,y], где x - минимальное значение, y - максимальное значение.  * vSelect - Хранит 1 значение заданной переменной. Может быть представлен в формате: string, integer, float, ipObject. * vMultiSelect - Массив, хранящий несколько вариантов значений (более 2). Позволяет осуществить множественный выбор. Может быть представлен в формате: string, integer, float, ipObject. * vCheckbox - Объект дополнительных параметров. Например: массив списка доступных вариантов значения       * vPoint - Объект типа ipObject. Отражает координаты заданной точки вида долгота (lat), широта (lon). Используется для задания координат на местности. Пример: { \"lat\": 55.543543, \"lon\": 63.2324 } * vImageUrl - Позволяет хранить ссылку в формате url на любое изображение в интернет пространстве. Пример: https://octodex.github.com/images/dojocat.jpg * vUrl - Хранить ссылку в формате string на любой внешний элемент в интернет пространстве. Пример: https://ru.wikipedia.org * vDate - Хранит дату по стандарту RFC3339 (год-месяц-день). Задается в формате string. Пример: 2017-07-21 * vDateTime - Хранит дату и время по стандарту RFC3339. Задается в формате string. Пример: 1995-12-01T12:00:27.87+00:20   # noqa: E501

        :param extra: The extra of this IPropertyValue.  # noqa: E501
        :type: object
        """

        self._extra = extra

    @property
    def _import(self):
        """Gets the _import of this IPropertyValue.  # noqa: E501

        Флаг означающий автоматически импортирована сущность или нет  # noqa: E501

        :return: The _import of this IPropertyValue.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this IPropertyValue.

        Флаг означающий автоматически импортирована сущность или нет  # noqa: E501

        :param _import: The _import of this IPropertyValue.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def key(self):
        """Gets the key of this IPropertyValue.  # noqa: E501

        Ключ, уникальный в рамках соответствующего блока (информационной системы, сервиса пользователей, каталога, заказов). Ключ может состоять только из цифр, латинских букв в верхнем и нижнем регистре, символов нижнего подчеркивания и тире.  # noqa: E501

        :return: The key of this IPropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IPropertyValue.

        Ключ, уникальный в рамках соответствующего блока (информационной системы, сервиса пользователей, каталога, заказов). Ключ может состоять только из цифр, латинских букв в верхнем и нижнем регистре, символов нижнего подчеркивания и тире.  # noqa: E501

        :param key: The key of this IPropertyValue.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self):
        """Gets the name of this IPropertyValue.  # noqa: E501

        Название свойства  # noqa: E501

        :return: The name of this IPropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IPropertyValue.

        Название свойства  # noqa: E501

        :param name: The name of this IPropertyValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this IPropertyValue.  # noqa: E501

        Тип свойства  # noqa: E501

        :return: The type of this IPropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IPropertyValue.

        Тип свойства  # noqa: E501

        :param type: The type of this IPropertyValue.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ipString", "ipInteger", "ipBoolean", "ipFloat", "ipObject", "ipOption", "ipImage"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def view(self):
        """Gets the view of this IPropertyValue.  # noqa: E501

        Описание объектов    * vNone - специальный тип (скрытое свойство)   * vRange - указание промежутка   * vSelect - выбор пользователем 1 значения из списка    * vMultiSelect - множественный выбор значений из списка   * vCheckbox - управление параметром с двумя состояниями   * vPoint - любая точка вида ipObject   * vImageUrl - ссылка на изображение    * vUrl - любая ссылка в формате string   * vInfosystemId - хранит идентификатор информационной системы    * vInfosystemItemId - хранит идентификатор элемента   * vCatalogGroupId - хранит идентификатор группы каталога    * vCatalogItemId - хранит идентификатор элемента каталога   * vShopGroupId - хранит идентификатор группы магазина    * vShopItemId - хранит идентификатор элемента магазина   * vDocumentGroupId - хранит идентификатор группы документа   * vDocumentItemId - хранит идентификатор элемента документа   * vDocumentItemName - хранит идентификатор элемента документа (название)   * vDate - дата   * vDateTime - дата и время    # noqa: E501

        :return: The view of this IPropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this IPropertyValue.

        Описание объектов    * vNone - специальный тип (скрытое свойство)   * vRange - указание промежутка   * vSelect - выбор пользователем 1 значения из списка    * vMultiSelect - множественный выбор значений из списка   * vCheckbox - управление параметром с двумя состояниями   * vPoint - любая точка вида ipObject   * vImageUrl - ссылка на изображение    * vUrl - любая ссылка в формате string   * vInfosystemId - хранит идентификатор информационной системы    * vInfosystemItemId - хранит идентификатор элемента   * vCatalogGroupId - хранит идентификатор группы каталога    * vCatalogItemId - хранит идентификатор элемента каталога   * vShopGroupId - хранит идентификатор группы магазина    * vShopItemId - хранит идентификатор элемента магазина   * vDocumentGroupId - хранит идентификатор группы документа   * vDocumentItemId - хранит идентификатор элемента документа   * vDocumentItemName - хранит идентификатор элемента документа (название)   * vDate - дата   * vDateTime - дата и время    # noqa: E501

        :param view: The view of this IPropertyValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["vNone", "vRange", "vSelect", "vMultiSelect", "vCheckbox", "vPoint", "vImageUrl", "vUrl", "vInfosystemId", "vInfosystemItemId", "vCatalogGroupId", "vCatalogItemId", "vShopGroupId", "vShopItemId", "vDocumentGroupId", "vDocumentItemId", "vDocumentItemName", "vDate", "vDateTime"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"  # noqa: E501
                .format(view, allowed_values)
            )

        self._view = view

    @property
    def value(self):
        """Gets the value of this IPropertyValue.  # noqa: E501


        :return: The value of this IPropertyValue.  # noqa: E501
        :rtype: list[object]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IPropertyValue.


        :param value: The value of this IPropertyValue.  # noqa: E501
        :type: list[object]
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPropertyValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPropertyValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
