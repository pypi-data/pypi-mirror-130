# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Shop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'group': 'str',
        'id': 'str',
        '_import': 'bool',
        'location': 'Point',
        'name': 'str',
        'phones': 'list[str]',
        'timezone': 'str',
        'work_times': 'WeekWorkTime'
    }

    attribute_map = {
        'address': 'address',
        'group': 'group',
        'id': 'id',
        '_import': 'import',
        'location': 'location',
        'name': 'name',
        'phones': 'phones',
        'timezone': 'timezone',
        'work_times': 'workTimes'
    }

    def __init__(self, address=None, group=None, id=None, _import=None, location=None, name=None, phones=None, timezone=None, work_times=None):  # noqa: E501
        """Shop - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._group = None
        self._id = None
        self.__import = None
        self._location = None
        self._name = None
        self._phones = None
        self._timezone = None
        self._work_times = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if _import is not None:
            self._import = _import
        if location is not None:
            self.location = location
        self.name = name
        if phones is not None:
            self.phones = phones
        if timezone is not None:
            self.timezone = timezone
        if work_times is not None:
            self.work_times = work_times

    @property
    def address(self):
        """Gets the address of this Shop.  # noqa: E501

        Адрес  # noqa: E501

        :return: The address of this Shop.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Shop.

        Адрес  # noqa: E501

        :param address: The address of this Shop.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def group(self):
        """Gets the group of this Shop.  # noqa: E501

        Идентификатор родительской группы. Если пусто, то в корне располагается  # noqa: E501

        :return: The group of this Shop.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Shop.

        Идентификатор родительской группы. Если пусто, то в корне располагается  # noqa: E501

        :param group: The group of this Shop.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this Shop.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The id of this Shop.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Shop.

        Идентификатор  # noqa: E501

        :param id: The id of this Shop.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def _import(self):
        """Gets the _import of this Shop.  # noqa: E501

        Флаг означающий автоматически импортирована сущность или нет  # noqa: E501

        :return: The _import of this Shop.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this Shop.

        Флаг означающий автоматически импортирована сущность или нет  # noqa: E501

        :param _import: The _import of this Shop.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def location(self):
        """Gets the location of this Shop.  # noqa: E501


        :return: The location of this Shop.  # noqa: E501
        :rtype: Point
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Shop.


        :param location: The location of this Shop.  # noqa: E501
        :type: Point
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Shop.  # noqa: E501

        Название магазина  # noqa: E501

        :return: The name of this Shop.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Shop.

        Название магазина  # noqa: E501

        :param name: The name of this Shop.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phones(self):
        """Gets the phones of this Shop.  # noqa: E501

        Номера телефонов точки продаж  # noqa: E501

        :return: The phones of this Shop.  # noqa: E501
        :rtype: list[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Shop.

        Номера телефонов точки продаж  # noqa: E501

        :param phones: The phones of this Shop.  # noqa: E501
        :type: list[str]
        """

        self._phones = phones

    @property
    def timezone(self):
        """Gets the timezone of this Shop.  # noqa: E501

        Cписок основан на базе данных временных https://www.iana.org/time-zones (https://tools.ietf.org/html/rfc6557)  # noqa: E501

        :return: The timezone of this Shop.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Shop.

        Cписок основан на базе данных временных https://www.iana.org/time-zones (https://tools.ietf.org/html/rfc6557)  # noqa: E501

        :param timezone: The timezone of this Shop.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def work_times(self):
        """Gets the work_times of this Shop.  # noqa: E501


        :return: The work_times of this Shop.  # noqa: E501
        :rtype: WeekWorkTime
        """
        return self._work_times

    @work_times.setter
    def work_times(self, work_times):
        """Sets the work_times of this Shop.


        :param work_times: The work_times of this Shop.  # noqa: E501
        :type: WeekWorkTime
        """

        self._work_times = work_times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shop, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
