# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderWithProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'int',
        'email': 'str',
        'error': 'str',
        'first_name': 'str',
        'id': 'str',
        'last_name': 'str',
        'middle_name': 'str',
        'number': 'str',
        'payment_type': 'str',
        'phone': 'str',
        'remote_id': 'str',
        'status': 'str',
        'updated_at': 'int',
        'user_id': 'str',
        'properties': 'list[IPropertyValue]'
    }

    attribute_map = {
        'created_at': 'created_at',
        'email': 'email',
        'error': 'error',
        'first_name': 'firstName',
        'id': 'id',
        'last_name': 'lastName',
        'middle_name': 'middleName',
        'number': 'number',
        'payment_type': 'paymentType',
        'phone': 'phone',
        'remote_id': 'remoteId',
        'status': 'status',
        'updated_at': 'updated_at',
        'user_id': 'userId',
        'properties': 'properties'
    }

    def __init__(self, created_at=None, email=None, error=None, first_name=None, id=None, last_name=None, middle_name=None, number=None, payment_type='cash', phone=None, remote_id=None, status=None, updated_at=None, user_id=None, properties=None):  # noqa: E501
        """OrderWithProperties - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._email = None
        self._error = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._middle_name = None
        self._number = None
        self._payment_type = None
        self._phone = None
        self._remote_id = None
        self._status = None
        self._updated_at = None
        self._user_id = None
        self._properties = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if email is not None:
            self.email = email
        if error is not None:
            self.error = error
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if middle_name is not None:
            self.middle_name = middle_name
        if number is not None:
            self.number = number
        if payment_type is not None:
            self.payment_type = payment_type
        if phone is not None:
            self.phone = phone
        if remote_id is not None:
            self.remote_id = remote_id
        if status is not None:
            self.status = status
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id
        if properties is not None:
            self.properties = properties

    @property
    def created_at(self):
        """Gets the created_at of this OrderWithProperties.  # noqa: E501

        Unixstamp создания (не указывать при создании/изменении)  # noqa: E501

        :return: The created_at of this OrderWithProperties.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrderWithProperties.

        Unixstamp создания (не указывать при создании/изменении)  # noqa: E501

        :param created_at: The created_at of this OrderWithProperties.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this OrderWithProperties.  # noqa: E501

        Емейл пользователя  # noqa: E501

        :return: The email of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrderWithProperties.

        Емейл пользователя  # noqa: E501

        :param email: The email of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def error(self):
        """Gets the error of this OrderWithProperties.  # noqa: E501

        Текст ошибки для статуса rejected (отмена заказа). Может заменяться любым другим текстовым сообщением  # noqa: E501

        :return: The error of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this OrderWithProperties.

        Текст ошибки для статуса rejected (отмена заказа). Может заменяться любым другим текстовым сообщением  # noqa: E501

        :param error: The error of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def first_name(self):
        """Gets the first_name of this OrderWithProperties.  # noqa: E501

        Имя  # noqa: E501

        :return: The first_name of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OrderWithProperties.

        Имя  # noqa: E501

        :param first_name: The first_name of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this OrderWithProperties.  # noqa: E501

        Идентификатор заказа (не указывать)  # noqa: E501

        :return: The id of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderWithProperties.

        Идентификатор заказа (не указывать)  # noqa: E501

        :param id: The id of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this OrderWithProperties.  # noqa: E501

        Фамилия  # noqa: E501

        :return: The last_name of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OrderWithProperties.

        Фамилия  # noqa: E501

        :param last_name: The last_name of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this OrderWithProperties.  # noqa: E501

        Отчество  # noqa: E501

        :return: The middle_name of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this OrderWithProperties.

        Отчество  # noqa: E501

        :param middle_name: The middle_name of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def number(self):
        """Gets the number of this OrderWithProperties.  # noqa: E501

        Номер заказа (не указывать)  # noqa: E501

        :return: The number of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrderWithProperties.

        Номер заказа (не указывать)  # noqa: E501

        :param number: The number of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def payment_type(self):
        """Gets the payment_type of this OrderWithProperties.  # noqa: E501

        Вид платежа * card - банковская карта * cash - наличные * cardOnDelivery - картой при получении   # noqa: E501

        :return: The payment_type of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this OrderWithProperties.

        Вид платежа * card - банковская карта * cash - наличные * cardOnDelivery - картой при получении   # noqa: E501

        :param payment_type: The payment_type of this OrderWithProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["card", "cash", "cardOnDelivery"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def phone(self):
        """Gets the phone of this OrderWithProperties.  # noqa: E501

        Телефон пользователя  # noqa: E501

        :return: The phone of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this OrderWithProperties.

        Телефон пользователя  # noqa: E501

        :param phone: The phone of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def remote_id(self):
        """Gets the remote_id of this OrderWithProperties.  # noqa: E501

        Идентификатор заказа во внешней системе (кассовый сервер, 1С и т.д.)  # noqa: E501

        :return: The remote_id of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this OrderWithProperties.

        Идентификатор заказа во внешней системе (кассовый сервер, 1С и т.д.)  # noqa: E501

        :param remote_id: The remote_id of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def status(self):
        """Gets the status of this OrderWithProperties.  # noqa: E501

        Статус заказа * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтверждения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   # noqa: E501

        :return: The status of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderWithProperties.

        Статус заказа * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтверждения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   # noqa: E501

        :param status: The status of this OrderWithProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["cart", "create", "confirmed", "await", "pay", "delivery", "complete", "cancelled", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this OrderWithProperties.  # noqa: E501

        Unixstamp обновления (не указывать при создании/изменении)  # noqa: E501

        :return: The updated_at of this OrderWithProperties.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrderWithProperties.

        Unixstamp обновления (не указывать при создании/изменении)  # noqa: E501

        :param updated_at: The updated_at of this OrderWithProperties.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this OrderWithProperties.  # noqa: E501

        Идентификатор пользователя (не указывать)  # noqa: E501

        :return: The user_id of this OrderWithProperties.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OrderWithProperties.

        Идентификатор пользователя (не указывать)  # noqa: E501

        :param user_id: The user_id of this OrderWithProperties.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def properties(self):
        """Gets the properties of this OrderWithProperties.  # noqa: E501


        :return: The properties of this OrderWithProperties.  # noqa: E501
        :rtype: list[IPropertyValue]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OrderWithProperties.


        :param properties: The properties of this OrderWithProperties.  # noqa: E501
        :type: list[IPropertyValue]
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderWithProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderWithProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
