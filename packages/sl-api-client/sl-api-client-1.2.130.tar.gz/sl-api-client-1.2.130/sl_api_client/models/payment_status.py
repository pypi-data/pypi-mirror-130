# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        '_date': 'str',
        'state': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        '_date': 'date',
        'state': 'state'
    }

    def __init__(self, amount=None, _date=None, state=None):  # noqa: E501
        """PaymentStatus - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self.__date = None
        self._state = None
        self.discriminator = None

        self.amount = amount
        self._date = _date
        self.state = state

    @property
    def amount(self):
        """Gets the amount of this PaymentStatus.  # noqa: E501

        Сумма платежа в минимальных единицах валюты (копейки, центы и т. п.).  # noqa: E501

        :return: The amount of this PaymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentStatus.

        Сумма платежа в минимальных единицах валюты (копейки, центы и т. п.).  # noqa: E501

        :param amount: The amount of this PaymentStatus.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this PaymentStatus.  # noqa: E501

        Дата регистрации заказа  # noqa: E501

        :return: The _date of this PaymentStatus.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PaymentStatus.

        Дата регистрации заказа  # noqa: E501

        :param _date: The _date of this PaymentStatus.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def state(self):
        """Gets the state of this PaymentStatus.  # noqa: E501

        Состояние заказа  # noqa: E501

        :return: The state of this PaymentStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PaymentStatus.

        Состояние заказа  # noqa: E501

        :param state: The state of this PaymentStatus.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["CREATED", "APPROVED", "DEPOSITED", "DECLINED", "REVERSED", "REFUNDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
