# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserSpaceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current': 'int',
        'space_key': 'str',
        'versions': 'list[int]'
    }

    attribute_map = {
        'current': 'current',
        'space_key': 'spaceKey',
        'versions': 'versions'
    }

    def __init__(self, current=None, space_key=None, versions=None):  # noqa: E501
        """UserSpaceResponse - a model defined in Swagger"""  # noqa: E501

        self._current = None
        self._space_key = None
        self._versions = None
        self.discriminator = None

        self.current = current
        self.space_key = space_key
        self.versions = versions

    @property
    def current(self):
        """Gets the current of this UserSpaceResponse.  # noqa: E501

        Версия создаваемого пространства  # noqa: E501

        :return: The current of this UserSpaceResponse.  # noqa: E501
        :rtype: int
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this UserSpaceResponse.

        Версия создаваемого пространства  # noqa: E501

        :param current: The current of this UserSpaceResponse.  # noqa: E501
        :type: int
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")  # noqa: E501

        self._current = current

    @property
    def space_key(self):
        """Gets the space_key of this UserSpaceResponse.  # noqa: E501

        Ключ пространства пользователя  # noqa: E501

        :return: The space_key of this UserSpaceResponse.  # noqa: E501
        :rtype: str
        """
        return self._space_key

    @space_key.setter
    def space_key(self, space_key):
        """Sets the space_key of this UserSpaceResponse.

        Ключ пространства пользователя  # noqa: E501

        :param space_key: The space_key of this UserSpaceResponse.  # noqa: E501
        :type: str
        """
        if space_key is None:
            raise ValueError("Invalid value for `space_key`, must not be `None`")  # noqa: E501

        self._space_key = space_key

    @property
    def versions(self):
        """Gets the versions of this UserSpaceResponse.  # noqa: E501

        Доступные версии пространства  # noqa: E501

        :return: The versions of this UserSpaceResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this UserSpaceResponse.

        Доступные версии пространства  # noqa: E501

        :param versions: The versions of this UserSpaceResponse.  # noqa: E501
        :type: list[int]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSpaceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSpaceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
