# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Aggregation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'filter': 'SearchFilter',
        'mode': 'str',
        'name': 'str',
        'size': 'int'
    }

    attribute_map = {
        'field': 'field',
        'filter': 'filter',
        'mode': 'mode',
        'name': 'name',
        'size': 'size'
    }

    def __init__(self, field=None, filter=None, mode=None, name=None, size=100):  # noqa: E501
        """Aggregation - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._filter = None
        self._mode = None
        self._name = None
        self._size = None
        self.discriminator = None

        self.field = field
        if filter is not None:
            self.filter = filter
        self.mode = mode
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size

    @property
    def field(self):
        """Gets the field of this Aggregation.  # noqa: E501

        Название поля.  # noqa: E501

        :return: The field of this Aggregation.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this Aggregation.

        Название поля.  # noqa: E501

        :param field: The field of this Aggregation.  # noqa: E501
        :type: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def filter(self):
        """Gets the filter of this Aggregation.  # noqa: E501


        :return: The filter of this Aggregation.  # noqa: E501
        :rtype: SearchFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Aggregation.


        :param filter: The filter of this Aggregation.  # noqa: E501
        :type: SearchFilter
        """

        self._filter = filter

    @property
    def mode(self):
        """Gets the mode of this Aggregation.  # noqa: E501

        Описание параметров фильтрации    * sum - сумма   * min - минимальное значение   * avg - среднее значение   * max - максимальное значение   * terms - выборка из всех вариантов значений. Необходимо использовать вместе с size для исключения большой выборки и наложения ограничения.   # noqa: E501

        :return: The mode of this Aggregation.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Aggregation.

        Описание параметров фильтрации    * sum - сумма   * min - минимальное значение   * avg - среднее значение   * max - максимальное значение   * terms - выборка из всех вариантов значений. Необходимо использовать вместе с size для исключения большой выборки и наложения ограничения.   # noqa: E501

        :param mode: The mode of this Aggregation.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["sum", "min", "avg", "max", "terms"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this Aggregation.  # noqa: E501

        Название агрегации в ответе  # noqa: E501

        :return: The name of this Aggregation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Aggregation.

        Название агрегации в ответе  # noqa: E501

        :param name: The name of this Aggregation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this Aggregation.  # noqa: E501

        Количество выбираемых  в ответе агрегации  # noqa: E501

        :return: The size of this Aggregation.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Aggregation.

        Количество выбираемых  в ответе агрегации  # noqa: E501

        :param size: The size of this Aggregation.  # noqa: E501
        :type: int
        """
        if size is not None and size < 1:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Aggregation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Aggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
