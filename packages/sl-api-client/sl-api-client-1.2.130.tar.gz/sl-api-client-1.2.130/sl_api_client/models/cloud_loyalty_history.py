# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CloudLoyaltyHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'at': 'str',
        'operation': 'str',
        'operation_name': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'at': 'at',
        'operation': 'operation',
        'operation_name': 'operationName'
    }

    def __init__(self, amount=None, at=None, operation=None, operation_name=None):  # noqa: E501
        """CloudLoyaltyHistory - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._at = None
        self._operation = None
        self._operation_name = None
        self.discriminator = None

        self.amount = amount
        self.at = at
        self.operation = operation
        self.operation_name = operation_name

    @property
    def amount(self):
        """Gets the amount of this CloudLoyaltyHistory.  # noqa: E501

        количество бонусов, на которое изменилось состояние счета Для операций прихода значение положительное. Для расхода - отрицательное   # noqa: E501

        :return: The amount of this CloudLoyaltyHistory.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CloudLoyaltyHistory.

        количество бонусов, на которое изменилось состояние счета Для операций прихода значение положительное. Для расхода - отрицательное   # noqa: E501

        :param amount: The amount of this CloudLoyaltyHistory.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def at(self):
        """Gets the at of this CloudLoyaltyHistory.  # noqa: E501

        дата произошедшего события  # noqa: E501

        :return: The at of this CloudLoyaltyHistory.  # noqa: E501
        :rtype: str
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this CloudLoyaltyHistory.

        дата произошедшего события  # noqa: E501

        :param at: The at of this CloudLoyaltyHistory.  # noqa: E501
        :type: str
        """
        if at is None:
            raise ValueError("Invalid value for `at`, must not be `None`")  # noqa: E501

        self._at = at

    @property
    def operation(self):
        """Gets the operation of this CloudLoyaltyHistory.  # noqa: E501

        вид произведенной операции Одно из следующих значений: * OPERATION_APPLIED - списание на оплату покупки (расход) * OPERATION_COLLECTED - начисление за покупку (приход) * OPERATION_EXPIRED - сгорание бонусов по истечении срока (расход) * OPERATION_REFUNDED - отмена списания бонусов при возврате товара (приход) * OPERATION_CANCELLED - отмена начисленных бонусов при возврате товара (расход) * OPERATION_RECEIVED - начисление акционных бонусов (приход) * OPERATION_RECALLED - отзыв акционных бонусов (расход) * OPERATION_APPLY_REVERTED - откат списанных бонусов при откате транзакции продажи (приход) * OPERATION_COLLECT_REVERTED - откат начисленных бонусов при откате транзакции продажи (расход) Список операций в будущем может быть расширен.   # noqa: E501

        :return: The operation of this CloudLoyaltyHistory.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CloudLoyaltyHistory.

        вид произведенной операции Одно из следующих значений: * OPERATION_APPLIED - списание на оплату покупки (расход) * OPERATION_COLLECTED - начисление за покупку (приход) * OPERATION_EXPIRED - сгорание бонусов по истечении срока (расход) * OPERATION_REFUNDED - отмена списания бонусов при возврате товара (приход) * OPERATION_CANCELLED - отмена начисленных бонусов при возврате товара (расход) * OPERATION_RECEIVED - начисление акционных бонусов (приход) * OPERATION_RECALLED - отзыв акционных бонусов (расход) * OPERATION_APPLY_REVERTED - откат списанных бонусов при откате транзакции продажи (приход) * OPERATION_COLLECT_REVERTED - откат начисленных бонусов при откате транзакции продажи (расход) Список операций в будущем может быть расширен.   # noqa: E501

        :param operation: The operation of this CloudLoyaltyHistory.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def operation_name(self):
        """Gets the operation_name of this CloudLoyaltyHistory.  # noqa: E501

        описание операции  Одно из следующих значений: * Оплата покупки * Начисление за покупку * Списание по истечении срока * Отмена списания * Отмена начисления * Начисление по акции * Отмена Список операций в будущем может быть расширен.   # noqa: E501

        :return: The operation_name of this CloudLoyaltyHistory.  # noqa: E501
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this CloudLoyaltyHistory.

        описание операции  Одно из следующих значений: * Оплата покупки * Начисление за покупку * Списание по истечении срока * Отмена списания * Отмена начисления * Начисление по акции * Отмена Список операций в будущем может быть расширен.   # noqa: E501

        :param operation_name: The operation_name of this CloudLoyaltyHistory.  # noqa: E501
        :type: str
        """
        if operation_name is None:
            raise ValueError("Invalid value for `operation_name`, must not be `None`")  # noqa: E501

        self._operation_name = operation_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudLoyaltyHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudLoyaltyHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
