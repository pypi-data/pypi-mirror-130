# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CloudLoyaltyClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birthdate': 'str',
        'bonuses': 'float',
        'card': 'float',
        'card_string': 'str',
        'email': 'str',
        'external_id': 'str',
        'full_name': 'str',
        'gender': 'float',
        'level': 'float',
        'name': 'str',
        'patronymic_name': 'str',
        'pending_bonuses': 'float',
        'phone_number': 'str',
        'surname': 'str'
    }

    attribute_map = {
        'birthdate': 'birthdate',
        'bonuses': 'bonuses',
        'card': 'card',
        'card_string': 'cardString',
        'email': 'email',
        'external_id': 'externalId',
        'full_name': 'fullName',
        'gender': 'gender',
        'level': 'level',
        'name': 'name',
        'patronymic_name': 'patronymicName',
        'pending_bonuses': 'pendingBonuses',
        'phone_number': 'phoneNumber',
        'surname': 'surname'
    }

    def __init__(self, birthdate=None, bonuses=None, card=None, card_string=None, email=None, external_id=None, full_name=None, gender=None, level=None, name=None, patronymic_name=None, pending_bonuses=None, phone_number=None, surname=None):  # noqa: E501
        """CloudLoyaltyClient - a model defined in Swagger"""  # noqa: E501

        self._birthdate = None
        self._bonuses = None
        self._card = None
        self._card_string = None
        self._email = None
        self._external_id = None
        self._full_name = None
        self._gender = None
        self._level = None
        self._name = None
        self._patronymic_name = None
        self._pending_bonuses = None
        self._phone_number = None
        self._surname = None
        self.discriminator = None

        if birthdate is not None:
            self.birthdate = birthdate
        if bonuses is not None:
            self.bonuses = bonuses
        if card is not None:
            self.card = card
        if card_string is not None:
            self.card_string = card_string
        if email is not None:
            self.email = email
        if external_id is not None:
            self.external_id = external_id
        if full_name is not None:
            self.full_name = full_name
        if gender is not None:
            self.gender = gender
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name
        if patronymic_name is not None:
            self.patronymic_name = patronymic_name
        if pending_bonuses is not None:
            self.pending_bonuses = pending_bonuses
        if phone_number is not None:
            self.phone_number = phone_number
        if surname is not None:
            self.surname = surname

    @property
    def birthdate(self):
        """Gets the birthdate of this CloudLoyaltyClient.  # noqa: E501

        дата рождения Если год рождения неизвестен, возвращается 1900.  # noqa: E501

        :return: The birthdate of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this CloudLoyaltyClient.

        дата рождения Если год рождения неизвестен, возвращается 1900.  # noqa: E501

        :param birthdate: The birthdate of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._birthdate = birthdate

    @property
    def bonuses(self):
        """Gets the bonuses of this CloudLoyaltyClient.  # noqa: E501

        баланс доступных бонусов  # noqa: E501

        :return: The bonuses of this CloudLoyaltyClient.  # noqa: E501
        :rtype: float
        """
        return self._bonuses

    @bonuses.setter
    def bonuses(self, bonuses):
        """Sets the bonuses of this CloudLoyaltyClient.

        баланс доступных бонусов  # noqa: E501

        :param bonuses: The bonuses of this CloudLoyaltyClient.  # noqa: E501
        :type: float
        """

        self._bonuses = bonuses

    @property
    def card(self):
        """Gets the card of this CloudLoyaltyClient.  # noqa: E501

        номер бонусной карты  # noqa: E501

        :return: The card of this CloudLoyaltyClient.  # noqa: E501
        :rtype: float
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this CloudLoyaltyClient.

        номер бонусной карты  # noqa: E501

        :param card: The card of this CloudLoyaltyClient.  # noqa: E501
        :type: float
        """

        self._card = card

    @property
    def card_string(self):
        """Gets the card_string of this CloudLoyaltyClient.  # noqa: E501

        номер бонусной карты в виде строки  # noqa: E501

        :return: The card_string of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._card_string

    @card_string.setter
    def card_string(self, card_string):
        """Sets the card_string of this CloudLoyaltyClient.

        номер бонусной карты в виде строки  # noqa: E501

        :param card_string: The card_string of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._card_string = card_string

    @property
    def email(self):
        """Gets the email of this CloudLoyaltyClient.  # noqa: E501

        адрес электронной почты клиента  # noqa: E501

        :return: The email of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CloudLoyaltyClient.

        адрес электронной почты клиента  # noqa: E501

        :param email: The email of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this CloudLoyaltyClient.  # noqa: E501

        внешний идентификатор клиента  # noqa: E501

        :return: The external_id of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CloudLoyaltyClient.

        внешний идентификатор клиента  # noqa: E501

        :param external_id: The external_id of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def full_name(self):
        """Gets the full_name of this CloudLoyaltyClient.  # noqa: E501

        фамилия, имя и отчество одной строкой  # noqa: E501

        :return: The full_name of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CloudLoyaltyClient.

        фамилия, имя и отчество одной строкой  # noqa: E501

        :param full_name: The full_name of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this CloudLoyaltyClient.  # noqa: E501

        пол клиента Значения: * 0 - пол неизвестен, * 1 - мужской, * 2 - женский  # noqa: E501

        :return: The gender of this CloudLoyaltyClient.  # noqa: E501
        :rtype: float
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CloudLoyaltyClient.

        пол клиента Значения: * 0 - пол неизвестен, * 1 - мужской, * 2 - женский  # noqa: E501

        :param gender: The gender of this CloudLoyaltyClient.  # noqa: E501
        :type: float
        """

        self._gender = gender

    @property
    def level(self):
        """Gets the level of this CloudLoyaltyClient.  # noqa: E501

        уровень клиента в программе лояльности  # noqa: E501

        :return: The level of this CloudLoyaltyClient.  # noqa: E501
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CloudLoyaltyClient.

        уровень клиента в программе лояльности  # noqa: E501

        :param level: The level of this CloudLoyaltyClient.  # noqa: E501
        :type: float
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this CloudLoyaltyClient.  # noqa: E501

        имя  # noqa: E501

        :return: The name of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudLoyaltyClient.

        имя  # noqa: E501

        :param name: The name of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def patronymic_name(self):
        """Gets the patronymic_name of this CloudLoyaltyClient.  # noqa: E501

        отчество  # noqa: E501

        :return: The patronymic_name of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._patronymic_name

    @patronymic_name.setter
    def patronymic_name(self, patronymic_name):
        """Sets the patronymic_name of this CloudLoyaltyClient.

        отчество  # noqa: E501

        :param patronymic_name: The patronymic_name of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._patronymic_name = patronymic_name

    @property
    def pending_bonuses(self):
        """Gets the pending_bonuses of this CloudLoyaltyClient.  # noqa: E501

        баланс ожидаемых бонусов  # noqa: E501

        :return: The pending_bonuses of this CloudLoyaltyClient.  # noqa: E501
        :rtype: float
        """
        return self._pending_bonuses

    @pending_bonuses.setter
    def pending_bonuses(self, pending_bonuses):
        """Sets the pending_bonuses of this CloudLoyaltyClient.

        баланс ожидаемых бонусов  # noqa: E501

        :param pending_bonuses: The pending_bonuses of this CloudLoyaltyClient.  # noqa: E501
        :type: float
        """

        self._pending_bonuses = pending_bonuses

    @property
    def phone_number(self):
        """Gets the phone_number of this CloudLoyaltyClient.  # noqa: E501

        номер телефона клиента  # noqa: E501

        :return: The phone_number of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CloudLoyaltyClient.

        номер телефона клиента  # noqa: E501

        :param phone_number: The phone_number of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def surname(self):
        """Gets the surname of this CloudLoyaltyClient.  # noqa: E501

        фамилия  # noqa: E501

        :return: The surname of this CloudLoyaltyClient.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CloudLoyaltyClient.

        фамилия  # noqa: E501

        :param surname: The surname of this CloudLoyaltyClient.  # noqa: E501
        :type: str
        """

        self._surname = surname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudLoyaltyClient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudLoyaltyClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
