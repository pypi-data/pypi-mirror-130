# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PromotionLaunchResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'history_id': 'str',
        'promo_id': 'str',
        'promocodes': 'list[str]'
    }

    attribute_map = {
        'history_id': 'history_id',
        'promo_id': 'promo_id',
        'promocodes': 'promocodes'
    }

    def __init__(self, history_id=None, promo_id=None, promocodes=None):  # noqa: E501
        """PromotionLaunchResp - a model defined in Swagger"""  # noqa: E501

        self._history_id = None
        self._promo_id = None
        self._promocodes = None
        self.discriminator = None

        if history_id is not None:
            self.history_id = history_id
        if promo_id is not None:
            self.promo_id = promo_id
        if promocodes is not None:
            self.promocodes = promocodes

    @property
    def history_id(self):
        """Gets the history_id of this PromotionLaunchResp.  # noqa: E501


        :return: The history_id of this PromotionLaunchResp.  # noqa: E501
        :rtype: str
        """
        return self._history_id

    @history_id.setter
    def history_id(self, history_id):
        """Sets the history_id of this PromotionLaunchResp.


        :param history_id: The history_id of this PromotionLaunchResp.  # noqa: E501
        :type: str
        """

        self._history_id = history_id

    @property
    def promo_id(self):
        """Gets the promo_id of this PromotionLaunchResp.  # noqa: E501


        :return: The promo_id of this PromotionLaunchResp.  # noqa: E501
        :rtype: str
        """
        return self._promo_id

    @promo_id.setter
    def promo_id(self, promo_id):
        """Sets the promo_id of this PromotionLaunchResp.


        :param promo_id: The promo_id of this PromotionLaunchResp.  # noqa: E501
        :type: str
        """

        self._promo_id = promo_id

    @property
    def promocodes(self):
        """Gets the promocodes of this PromotionLaunchResp.  # noqa: E501


        :return: The promocodes of this PromotionLaunchResp.  # noqa: E501
        :rtype: list[str]
        """
        return self._promocodes

    @promocodes.setter
    def promocodes(self, promocodes):
        """Sets the promocodes of this PromotionLaunchResp.


        :param promocodes: The promocodes of this PromotionLaunchResp.  # noqa: E501
        :type: list[str]
        """

        self._promocodes = promocodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionLaunchResp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionLaunchResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
