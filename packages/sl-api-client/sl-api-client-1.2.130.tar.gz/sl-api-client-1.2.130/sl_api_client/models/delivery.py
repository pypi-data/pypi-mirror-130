# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Delivery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'object',
        'discount_price': 'float',
        'name': 'str',
        'price': 'float',
        'type': 'str'
    }

    attribute_map = {
        'data': 'data',
        'discount_price': 'discountPrice',
        'name': 'name',
        'price': 'price',
        'type': 'type'
    }

    def __init__(self, data=None, discount_price=None, name=None, price=None, type=None):  # noqa: E501
        """Delivery - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._discount_price = None
        self._name = None
        self._price = None
        self._type = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if discount_price is not None:
            self.discount_price = discount_price
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if type is not None:
            self.type = type

    @property
    def data(self):
        """Gets the data of this Delivery.  # noqa: E501

        Объект с кастомными данными о доставке  # noqa: E501

        :return: The data of this Delivery.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Delivery.

        Объект с кастомными данными о доставке  # noqa: E501

        :param data: The data of this Delivery.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def discount_price(self):
        """Gets the discount_price of this Delivery.  # noqa: E501

        Цена доставки со скидкой  # noqa: E501

        :return: The discount_price of this Delivery.  # noqa: E501
        :rtype: float
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this Delivery.

        Цена доставки со скидкой  # noqa: E501

        :param discount_price: The discount_price of this Delivery.  # noqa: E501
        :type: float
        """
        if discount_price is not None and discount_price < 0:  # noqa: E501
            raise ValueError("Invalid value for `discount_price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount_price = discount_price

    @property
    def name(self):
        """Gets the name of this Delivery.  # noqa: E501

        Название доставки  # noqa: E501

        :return: The name of this Delivery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Delivery.

        Название доставки  # noqa: E501

        :param name: The name of this Delivery.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Delivery.  # noqa: E501

        Цена доставки  # noqa: E501

        :return: The price of this Delivery.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Delivery.

        Цена доставки  # noqa: E501

        :param price: The price of this Delivery.  # noqa: E501
        :type: float
        """
        if price is not None and price < 0:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._price = price

    @property
    def type(self):
        """Gets the type of this Delivery.  # noqa: E501

        Ключ типа доставки  # noqa: E501

        :return: The type of this Delivery.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Delivery.

        Ключ типа доставки  # noqa: E501

        :param type: The type of this Delivery.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Delivery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Delivery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
