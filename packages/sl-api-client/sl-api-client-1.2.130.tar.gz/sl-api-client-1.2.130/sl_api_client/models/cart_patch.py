# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartPatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery': 'Delivery',
        'items': 'CartItems',
        'loyalty': 'Loyalty',
        'stage': 'Stage',
        'version': 'int'
    }

    attribute_map = {
        'delivery': 'delivery',
        'items': 'items',
        'loyalty': 'loyalty',
        'stage': 'stage',
        'version': 'version'
    }

    def __init__(self, delivery=None, items=None, loyalty=None, stage=None, version=None):  # noqa: E501
        """CartPatch - a model defined in Swagger"""  # noqa: E501

        self._delivery = None
        self._items = None
        self._loyalty = None
        self._stage = None
        self._version = None
        self.discriminator = None

        if delivery is not None:
            self.delivery = delivery
        if items is not None:
            self.items = items
        if loyalty is not None:
            self.loyalty = loyalty
        if stage is not None:
            self.stage = stage
        if version is not None:
            self.version = version

    @property
    def delivery(self):
        """Gets the delivery of this CartPatch.  # noqa: E501


        :return: The delivery of this CartPatch.  # noqa: E501
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this CartPatch.


        :param delivery: The delivery of this CartPatch.  # noqa: E501
        :type: Delivery
        """

        self._delivery = delivery

    @property
    def items(self):
        """Gets the items of this CartPatch.  # noqa: E501


        :return: The items of this CartPatch.  # noqa: E501
        :rtype: CartItems
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CartPatch.


        :param items: The items of this CartPatch.  # noqa: E501
        :type: CartItems
        """

        self._items = items

    @property
    def loyalty(self):
        """Gets the loyalty of this CartPatch.  # noqa: E501


        :return: The loyalty of this CartPatch.  # noqa: E501
        :rtype: Loyalty
        """
        return self._loyalty

    @loyalty.setter
    def loyalty(self, loyalty):
        """Sets the loyalty of this CartPatch.


        :param loyalty: The loyalty of this CartPatch.  # noqa: E501
        :type: Loyalty
        """

        self._loyalty = loyalty

    @property
    def stage(self):
        """Gets the stage of this CartPatch.  # noqa: E501


        :return: The stage of this CartPatch.  # noqa: E501
        :rtype: Stage
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this CartPatch.


        :param stage: The stage of this CartPatch.  # noqa: E501
        :type: Stage
        """

        self._stage = stage

    @property
    def version(self):
        """Gets the version of this CartPatch.  # noqa: E501

        Версия, на базе которой делается обновление  # noqa: E501

        :return: The version of this CartPatch.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CartPatch.

        Версия, на базе которой делается обновление  # noqa: E501

        :param version: The version of this CartPatch.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartPatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
