# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WeekWorkTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fr': 'WorkTime',
        'mo': 'WorkTime',
        'sa': 'WorkTime',
        'su': 'WorkTime',
        'th': 'WorkTime',
        'tu': 'WorkTime',
        'we': 'WorkTime'
    }

    attribute_map = {
        'fr': 'fr',
        'mo': 'mo',
        'sa': 'sa',
        'su': 'su',
        'th': 'th',
        'tu': 'tu',
        'we': 'we'
    }

    def __init__(self, fr=None, mo=None, sa=None, su=None, th=None, tu=None, we=None):  # noqa: E501
        """WeekWorkTime - a model defined in Swagger"""  # noqa: E501

        self._fr = None
        self._mo = None
        self._sa = None
        self._su = None
        self._th = None
        self._tu = None
        self._we = None
        self.discriminator = None

        if fr is not None:
            self.fr = fr
        if mo is not None:
            self.mo = mo
        if sa is not None:
            self.sa = sa
        if su is not None:
            self.su = su
        if th is not None:
            self.th = th
        if tu is not None:
            self.tu = tu
        if we is not None:
            self.we = we

    @property
    def fr(self):
        """Gets the fr of this WeekWorkTime.  # noqa: E501


        :return: The fr of this WeekWorkTime.  # noqa: E501
        :rtype: WorkTime
        """
        return self._fr

    @fr.setter
    def fr(self, fr):
        """Sets the fr of this WeekWorkTime.


        :param fr: The fr of this WeekWorkTime.  # noqa: E501
        :type: WorkTime
        """

        self._fr = fr

    @property
    def mo(self):
        """Gets the mo of this WeekWorkTime.  # noqa: E501


        :return: The mo of this WeekWorkTime.  # noqa: E501
        :rtype: WorkTime
        """
        return self._mo

    @mo.setter
    def mo(self, mo):
        """Sets the mo of this WeekWorkTime.


        :param mo: The mo of this WeekWorkTime.  # noqa: E501
        :type: WorkTime
        """

        self._mo = mo

    @property
    def sa(self):
        """Gets the sa of this WeekWorkTime.  # noqa: E501


        :return: The sa of this WeekWorkTime.  # noqa: E501
        :rtype: WorkTime
        """
        return self._sa

    @sa.setter
    def sa(self, sa):
        """Sets the sa of this WeekWorkTime.


        :param sa: The sa of this WeekWorkTime.  # noqa: E501
        :type: WorkTime
        """

        self._sa = sa

    @property
    def su(self):
        """Gets the su of this WeekWorkTime.  # noqa: E501


        :return: The su of this WeekWorkTime.  # noqa: E501
        :rtype: WorkTime
        """
        return self._su

    @su.setter
    def su(self, su):
        """Sets the su of this WeekWorkTime.


        :param su: The su of this WeekWorkTime.  # noqa: E501
        :type: WorkTime
        """

        self._su = su

    @property
    def th(self):
        """Gets the th of this WeekWorkTime.  # noqa: E501


        :return: The th of this WeekWorkTime.  # noqa: E501
        :rtype: WorkTime
        """
        return self._th

    @th.setter
    def th(self, th):
        """Sets the th of this WeekWorkTime.


        :param th: The th of this WeekWorkTime.  # noqa: E501
        :type: WorkTime
        """

        self._th = th

    @property
    def tu(self):
        """Gets the tu of this WeekWorkTime.  # noqa: E501


        :return: The tu of this WeekWorkTime.  # noqa: E501
        :rtype: WorkTime
        """
        return self._tu

    @tu.setter
    def tu(self, tu):
        """Sets the tu of this WeekWorkTime.


        :param tu: The tu of this WeekWorkTime.  # noqa: E501
        :type: WorkTime
        """

        self._tu = tu

    @property
    def we(self):
        """Gets the we of this WeekWorkTime.  # noqa: E501


        :return: The we of this WeekWorkTime.  # noqa: E501
        :rtype: WorkTime
        """
        return self._we

    @we.setter
    def we(self, we):
        """Sets the we of this WeekWorkTime.


        :param we: The we of this WeekWorkTime.  # noqa: E501
        :type: WorkTime
        """

        self._we = we

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeekWorkTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeekWorkTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
