# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MessageHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'int',
        'errors': 'list[ErrorMessage]',
        'id': 'str',
        'message_factory': 'MessageFabric',
        'statistics': 'MessageHistoryStatistic'
    }

    attribute_map = {
        'create': 'create',
        'errors': 'errors',
        'id': 'id',
        'message_factory': 'messageFactory',
        'statistics': 'statistics'
    }

    def __init__(self, create=None, errors=None, id=None, message_factory=None, statistics=None):  # noqa: E501
        """MessageHistory - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._errors = None
        self._id = None
        self._message_factory = None
        self._statistics = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if errors is not None:
            self.errors = errors
        if id is not None:
            self.id = id
        if message_factory is not None:
            self.message_factory = message_factory
        if statistics is not None:
            self.statistics = statistics

    @property
    def create(self):
        """Gets the create of this MessageHistory.  # noqa: E501

        Таймштамп создания (Unix)  # noqa: E501

        :return: The create of this MessageHistory.  # noqa: E501
        :rtype: int
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this MessageHistory.

        Таймштамп создания (Unix)  # noqa: E501

        :param create: The create of this MessageHistory.  # noqa: E501
        :type: int
        """

        self._create = create

    @property
    def errors(self):
        """Gets the errors of this MessageHistory.  # noqa: E501

        Список ошибок  # noqa: E501

        :return: The errors of this MessageHistory.  # noqa: E501
        :rtype: list[ErrorMessage]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this MessageHistory.

        Список ошибок  # noqa: E501

        :param errors: The errors of this MessageHistory.  # noqa: E501
        :type: list[ErrorMessage]
        """

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this MessageHistory.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The id of this MessageHistory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageHistory.

        Идентификатор  # noqa: E501

        :param id: The id of this MessageHistory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_factory(self):
        """Gets the message_factory of this MessageHistory.  # noqa: E501


        :return: The message_factory of this MessageHistory.  # noqa: E501
        :rtype: MessageFabric
        """
        return self._message_factory

    @message_factory.setter
    def message_factory(self, message_factory):
        """Sets the message_factory of this MessageHistory.


        :param message_factory: The message_factory of this MessageHistory.  # noqa: E501
        :type: MessageFabric
        """

        self._message_factory = message_factory

    @property
    def statistics(self):
        """Gets the statistics of this MessageHistory.  # noqa: E501


        :return: The statistics of this MessageHistory.  # noqa: E501
        :rtype: MessageHistoryStatistic
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this MessageHistory.


        :param statistics: The statistics of this MessageHistory.  # noqa: E501
        :type: MessageHistoryStatistic
        """

        self._statistics = statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
