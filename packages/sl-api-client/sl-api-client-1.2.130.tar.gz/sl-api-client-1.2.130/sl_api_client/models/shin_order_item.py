# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ShinOrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog_item_id': 'str',
        'description': 'str',
        'id': 'str',
        'image': 'str',
        'measure': 'str',
        'name': 'str',
        'old_price': 'float',
        'price': 'float',
        'quantity': 'float',
        'remote_id': 'str',
        'shop_id': 'str',
        'unit': 'float'
    }

    attribute_map = {
        'catalog_item_id': 'catalogItemId',
        'description': 'description',
        'id': 'id',
        'image': 'image',
        'measure': 'measure',
        'name': 'name',
        'old_price': 'oldPrice',
        'price': 'price',
        'quantity': 'quantity',
        'remote_id': 'remoteId',
        'shop_id': 'shopId',
        'unit': 'unit'
    }

    def __init__(self, catalog_item_id=None, description=None, id=None, image=None, measure='u', name=None, old_price=None, price=None, quantity=None, remote_id=None, shop_id=None, unit=1.0):  # noqa: E501
        """ShinOrderItem - a model defined in Swagger"""  # noqa: E501

        self._catalog_item_id = None
        self._description = None
        self._id = None
        self._image = None
        self._measure = None
        self._name = None
        self._old_price = None
        self._price = None
        self._quantity = None
        self._remote_id = None
        self._shop_id = None
        self._unit = None
        self.discriminator = None

        if catalog_item_id is not None:
            self.catalog_item_id = catalog_item_id
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if measure is not None:
            self.measure = measure
        if name is not None:
            self.name = name
        if old_price is not None:
            self.old_price = old_price
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if remote_id is not None:
            self.remote_id = remote_id
        if shop_id is not None:
            self.shop_id = shop_id
        if unit is not None:
            self.unit = unit

    @property
    def catalog_item_id(self):
        """Gets the catalog_item_id of this ShinOrderItem.  # noqa: E501

        Идентификатор товара в каталоге (UUID)  # noqa: E501

        :return: The catalog_item_id of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._catalog_item_id

    @catalog_item_id.setter
    def catalog_item_id(self, catalog_item_id):
        """Sets the catalog_item_id of this ShinOrderItem.

        Идентификатор товара в каталоге (UUID)  # noqa: E501

        :param catalog_item_id: The catalog_item_id of this ShinOrderItem.  # noqa: E501
        :type: str
        """

        self._catalog_item_id = catalog_item_id

    @property
    def description(self):
        """Gets the description of this ShinOrderItem.  # noqa: E501

        Короткое описание  # noqa: E501

        :return: The description of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShinOrderItem.

        Короткое описание  # noqa: E501

        :param description: The description of this ShinOrderItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ShinOrderItem.  # noqa: E501

        Идентификатор позиции в заказе (UUID) (не указывать)  # noqa: E501

        :return: The id of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShinOrderItem.

        Идентификатор позиции в заказе (UUID) (не указывать)  # noqa: E501

        :param id: The id of this ShinOrderItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ShinOrderItem.  # noqa: E501

        URL изображения превью  # noqa: E501

        :return: The image of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ShinOrderItem.

        URL изображения превью  # noqa: E501

        :param image: The image of this ShinOrderItem.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def measure(self):
        """Gets the measure of this ShinOrderItem.  # noqa: E501

        Единица измерения  # noqa: E501

        :return: The measure of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._measure

    @measure.setter
    def measure(self, measure):
        """Sets the measure of this ShinOrderItem.

        Единица измерения  # noqa: E501

        :param measure: The measure of this ShinOrderItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["u", "kg", "gm", "lit", "mlit", "sec", "day", "hour"]  # noqa: E501
        if measure not in allowed_values:
            raise ValueError(
                "Invalid value for `measure` ({0}), must be one of {1}"  # noqa: E501
                .format(measure, allowed_values)
            )

        self._measure = measure

    @property
    def name(self):
        """Gets the name of this ShinOrderItem.  # noqa: E501

        Название  # noqa: E501

        :return: The name of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShinOrderItem.

        Название  # noqa: E501

        :param name: The name of this ShinOrderItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def old_price(self):
        """Gets the old_price of this ShinOrderItem.  # noqa: E501

        Оригинальная стоимость позиции без скидок (не указывать, берется из каталога)  # noqa: E501

        :return: The old_price of this ShinOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ShinOrderItem.

        Оригинальная стоимость позиции без скидок (не указывать, берется из каталога)  # noqa: E501

        :param old_price: The old_price of this ShinOrderItem.  # noqa: E501
        :type: float
        """

        self._old_price = old_price

    @property
    def price(self):
        """Gets the price of this ShinOrderItem.  # noqa: E501

        Стоимость позиции со скидкой  # noqa: E501

        :return: The price of this ShinOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ShinOrderItem.

        Стоимость позиции со скидкой  # noqa: E501

        :param price: The price of this ShinOrderItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this ShinOrderItem.  # noqa: E501

        Количество  # noqa: E501

        :return: The quantity of this ShinOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ShinOrderItem.

        Количество  # noqa: E501

        :param quantity: The quantity of this ShinOrderItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def remote_id(self):
        """Gets the remote_id of this ShinOrderItem.  # noqa: E501

        Идентификатор товара во внешней системе (кассовый сервер, 1С и т.д.)  # noqa: E501

        :return: The remote_id of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this ShinOrderItem.

        Идентификатор товара во внешней системе (кассовый сервер, 1С и т.д.)  # noqa: E501

        :param remote_id: The remote_id of this ShinOrderItem.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def shop_id(self):
        """Gets the shop_id of this ShinOrderItem.  # noqa: E501

        Идентификатор магазина (UUID)  # noqa: E501

        :return: The shop_id of this ShinOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this ShinOrderItem.

        Идентификатор магазина (UUID)  # noqa: E501

        :param shop_id: The shop_id of this ShinOrderItem.  # noqa: E501
        :type: str
        """

        self._shop_id = shop_id

    @property
    def unit(self):
        """Gets the unit of this ShinOrderItem.  # noqa: E501

        Минимальная единица  # noqa: E501

        :return: The unit of this ShinOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ShinOrderItem.

        Минимальная единица  # noqa: E501

        :param unit: The unit of this ShinOrderItem.  # noqa: E501
        :type: float
        """
        if unit is not None and unit < 0.001:  # noqa: E501
            raise ValueError("Invalid value for `unit`, must be a value greater than or equal to `0.001`")  # noqa: E501

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShinOrderItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShinOrderItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
