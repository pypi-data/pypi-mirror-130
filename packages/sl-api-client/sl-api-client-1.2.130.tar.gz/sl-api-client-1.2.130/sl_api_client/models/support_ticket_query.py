# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportTicketQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'offset': 'int',
        'operator_id': 'str',
        'order': 'str',
        'order_by': 'str',
        'reason': 'str',
        'statuses': 'list[str]',
        'user_id': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'operator_id': 'operatorId',
        'order': 'order',
        'order_by': 'orderBy',
        'reason': 'reason',
        'statuses': 'statuses',
        'user_id': 'userId'
    }

    def __init__(self, limit=50, offset=0, operator_id=None, order='DESC', order_by='created', reason=None, statuses=None, user_id=None):  # noqa: E501
        """SupportTicketQuery - a model defined in Swagger"""  # noqa: E501

        self._limit = None
        self._offset = None
        self._operator_id = None
        self._order = None
        self._order_by = None
        self._reason = None
        self._statuses = None
        self._user_id = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if operator_id is not None:
            self.operator_id = operator_id
        if order is not None:
            self.order = order
        if order_by is not None:
            self.order_by = order_by
        if reason is not None:
            self.reason = reason
        if statuses is not None:
            self.statuses = statuses
        if user_id is not None:
            self.user_id = user_id

    @property
    def limit(self):
        """Gets the limit of this SupportTicketQuery.  # noqa: E501

        Количество выбираемых элементов  # noqa: E501

        :return: The limit of this SupportTicketQuery.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SupportTicketQuery.

        Количество выбираемых элементов  # noqa: E501

        :param limit: The limit of this SupportTicketQuery.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this SupportTicketQuery.  # noqa: E501

        Смещение от начала выборки  # noqa: E501

        :return: The offset of this SupportTicketQuery.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SupportTicketQuery.

        Смещение от начала выборки  # noqa: E501

        :param offset: The offset of this SupportTicketQuery.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def operator_id(self):
        """Gets the operator_id of this SupportTicketQuery.  # noqa: E501

        Идентификатор оператора. Игнорируется при запроса /ticket/{userId}/  # noqa: E501

        :return: The operator_id of this SupportTicketQuery.  # noqa: E501
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this SupportTicketQuery.

        Идентификатор оператора. Игнорируется при запроса /ticket/{userId}/  # noqa: E501

        :param operator_id: The operator_id of this SupportTicketQuery.  # noqa: E501
        :type: str
        """

        self._operator_id = operator_id

    @property
    def order(self):
        """Gets the order of this SupportTicketQuery.  # noqa: E501

        Порядок сортировки по полю указанному в orderBy  # noqa: E501

        :return: The order of this SupportTicketQuery.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SupportTicketQuery.

        Порядок сортировки по полю указанному в orderBy  # noqa: E501

        :param order: The order of this SupportTicketQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["DESC", "ASC"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"  # noqa: E501
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def order_by(self):
        """Gets the order_by of this SupportTicketQuery.  # noqa: E501

        По какому полю должна происходить сортировка.  # noqa: E501

        :return: The order_by of this SupportTicketQuery.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SupportTicketQuery.

        По какому полю должна происходить сортировка.  # noqa: E501

        :param order_by: The order_by of this SupportTicketQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["created", "updated"]  # noqa: E501
        if order_by not in allowed_values:
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"  # noqa: E501
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    @property
    def reason(self):
        """Gets the reason of this SupportTicketQuery.  # noqa: E501

        Название причины на латиннице (^[0-9a-zA-Z-_]+$)  # noqa: E501

        :return: The reason of this SupportTicketQuery.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SupportTicketQuery.

        Название причины на латиннице (^[0-9a-zA-Z-_]+$)  # noqa: E501

        :param reason: The reason of this SupportTicketQuery.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def statuses(self):
        """Gets the statuses of this SupportTicketQuery.  # noqa: E501

        Массив выбираемых статусов (OR)  # noqa: E501

        :return: The statuses of this SupportTicketQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this SupportTicketQuery.

        Массив выбираемых статусов (OR)  # noqa: E501

        :param statuses: The statuses of this SupportTicketQuery.  # noqa: E501
        :type: list[str]
        """

        self._statuses = statuses

    @property
    def user_id(self):
        """Gets the user_id of this SupportTicketQuery.  # noqa: E501

        Идентификатор пользователя. Игнорируется при запроса /ticket/{userId}/  # noqa: E501

        :return: The user_id of this SupportTicketQuery.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SupportTicketQuery.

        Идентификатор пользователя. Игнорируется при запроса /ticket/{userId}/  # noqa: E501

        :param user_id: The user_id of this SupportTicketQuery.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportTicketQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportTicketQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
