# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderDelivery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'apartment': 'str',
        'city': 'str',
        'comment': 'str',
        'contact_name': 'str',
        'contact_phone': 'str',
        'delivery_type': 'str',
        'doorphone': 'str',
        'floor': 'str',
        'staircase': 'str',
        'typ': 'str'
    }

    attribute_map = {
        'address': 'address',
        'apartment': 'apartment',
        'city': 'city',
        'comment': 'comment',
        'contact_name': 'contactName',
        'contact_phone': 'contactPhone',
        'delivery_type': 'deliveryType',
        'doorphone': 'doorphone',
        'floor': 'floor',
        'staircase': 'staircase',
        'typ': 'typ'
    }

    def __init__(self, address=None, apartment=None, city=None, comment=None, contact_name=None, contact_phone=None, delivery_type=None, doorphone=None, floor=None, staircase=None, typ='undefined'):  # noqa: E501
        """OrderDelivery - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._apartment = None
        self._city = None
        self._comment = None
        self._contact_name = None
        self._contact_phone = None
        self._delivery_type = None
        self._doorphone = None
        self._floor = None
        self._staircase = None
        self._typ = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if apartment is not None:
            self.apartment = apartment
        if city is not None:
            self.city = city
        if comment is not None:
            self.comment = comment
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_phone is not None:
            self.contact_phone = contact_phone
        if delivery_type is not None:
            self.delivery_type = delivery_type
        if doorphone is not None:
            self.doorphone = doorphone
        if floor is not None:
            self.floor = floor
        if staircase is not None:
            self.staircase = staircase
        if typ is not None:
            self.typ = typ

    @property
    def address(self):
        """Gets the address of this OrderDelivery.  # noqa: E501

        Адрес. Включает в себя улицу и дом  # noqa: E501

        :return: The address of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrderDelivery.

        Адрес. Включает в себя улицу и дом  # noqa: E501

        :param address: The address of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def apartment(self):
        """Gets the apartment of this OrderDelivery.  # noqa: E501

        Номер квартиры  # noqa: E501

        :return: The apartment of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._apartment

    @apartment.setter
    def apartment(self, apartment):
        """Sets the apartment of this OrderDelivery.

        Номер квартиры  # noqa: E501

        :param apartment: The apartment of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._apartment = apartment

    @property
    def city(self):
        """Gets the city of this OrderDelivery.  # noqa: E501

        Город. Может включать в себя так же регион  # noqa: E501

        :return: The city of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrderDelivery.

        Город. Может включать в себя так же регион  # noqa: E501

        :param city: The city of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def comment(self):
        """Gets the comment of this OrderDelivery.  # noqa: E501

        Комментарий заказа  # noqa: E501

        :return: The comment of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this OrderDelivery.

        Комментарий заказа  # noqa: E501

        :param comment: The comment of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def contact_name(self):
        """Gets the contact_name of this OrderDelivery.  # noqa: E501

        Имя получателя. Может отличаться от имени заказчика  # noqa: E501

        :return: The contact_name of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this OrderDelivery.

        Имя получателя. Может отличаться от имени заказчика  # noqa: E501

        :param contact_name: The contact_name of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_phone(self):
        """Gets the contact_phone of this OrderDelivery.  # noqa: E501

        Номер телефона получателя. Только цифры. Может отличаться от телефона заказчика  # noqa: E501

        :return: The contact_phone of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this OrderDelivery.

        Номер телефона получателя. Только цифры. Может отличаться от телефона заказчика  # noqa: E501

        :param contact_phone: The contact_phone of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._contact_phone = contact_phone

    @property
    def delivery_type(self):
        """Gets the delivery_type of this OrderDelivery.  # noqa: E501

        DEPRECATED Тип доставки (заменен на поле \"typ\")  # noqa: E501

        :return: The delivery_type of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this OrderDelivery.

        DEPRECATED Тип доставки (заменен на поле \"typ\")  # noqa: E501

        :param delivery_type: The delivery_type of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._delivery_type = delivery_type

    @property
    def doorphone(self):
        """Gets the doorphone of this OrderDelivery.  # noqa: E501

        Код домофона  # noqa: E501

        :return: The doorphone of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._doorphone

    @doorphone.setter
    def doorphone(self, doorphone):
        """Sets the doorphone of this OrderDelivery.

        Код домофона  # noqa: E501

        :param doorphone: The doorphone of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._doorphone = doorphone

    @property
    def floor(self):
        """Gets the floor of this OrderDelivery.  # noqa: E501

        Этаж  # noqa: E501

        :return: The floor of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this OrderDelivery.

        Этаж  # noqa: E501

        :param floor: The floor of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._floor = floor

    @property
    def staircase(self):
        """Gets the staircase of this OrderDelivery.  # noqa: E501

        Подъезд  # noqa: E501

        :return: The staircase of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._staircase

    @staircase.setter
    def staircase(self, staircase):
        """Sets the staircase of this OrderDelivery.

        Подъезд  # noqa: E501

        :param staircase: The staircase of this OrderDelivery.  # noqa: E501
        :type: str
        """

        self._staircase = staircase

    @property
    def typ(self):
        """Gets the typ of this OrderDelivery.  # noqa: E501

        Тип доставки * undefined - Неопределенный тип (используется как скрывающий атрибут строки доставки в шаблоне письма) * pickup - Самовывоз * delivery - Доставка   # noqa: E501

        :return: The typ of this OrderDelivery.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this OrderDelivery.

        Тип доставки * undefined - Неопределенный тип (используется как скрывающий атрибут строки доставки в шаблоне письма) * pickup - Самовывоз * delivery - Доставка   # noqa: E501

        :param typ: The typ of this OrderDelivery.  # noqa: E501
        :type: str
        """
        allowed_values = ["undefined", "pickup", "delivery"]  # noqa: E501
        if typ not in allowed_values:
            raise ValueError(
                "Invalid value for `typ` ({0}), must be one of {1}"  # noqa: E501
                .format(typ, allowed_values)
            )

        self._typ = typ

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderDelivery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderDelivery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
