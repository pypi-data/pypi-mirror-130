# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SearchFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'mode': 'str',
        'sub_filter': 'list[SearchFilter]',
        'value': 'object'
    }

    attribute_map = {
        'field': 'field',
        'mode': 'mode',
        'sub_filter': 'subFilter',
        'value': 'value'
    }

    def __init__(self, field=None, mode=None, sub_filter=None, value=None):  # noqa: E501
        """SearchFilter - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._mode = None
        self._sub_filter = None
        self._value = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if mode is not None:
            self.mode = mode
        if sub_filter is not None:
            self.sub_filter = sub_filter
        if value is not None:
            self.value = value

    @property
    def field(self):
        """Gets the field of this SearchFilter.  # noqa: E501

        Название поля  # noqa: E501

        :return: The field of this SearchFilter.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SearchFilter.

        Название поля  # noqa: E501

        :param field: The field of this SearchFilter.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def mode(self):
        """Gets the mode of this SearchFilter.  # noqa: E501

        Логическая операция для элементов subFilter  # noqa: E501

        :return: The mode of this SearchFilter.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SearchFilter.

        Логическая операция для элементов subFilter  # noqa: E501

        :param mode: The mode of this SearchFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def sub_filter(self):
        """Gets the sub_filter of this SearchFilter.  # noqa: E501

        Массив searchFilter объектов подусловий свойств второго уровня и так далее  # noqa: E501

        :return: The sub_filter of this SearchFilter.  # noqa: E501
        :rtype: list[SearchFilter]
        """
        return self._sub_filter

    @sub_filter.setter
    def sub_filter(self, sub_filter):
        """Sets the sub_filter of this SearchFilter.

        Массив searchFilter объектов подусловий свойств второго уровня и так далее  # noqa: E501

        :param sub_filter: The sub_filter of this SearchFilter.  # noqa: E501
        :type: list[SearchFilter]
        """

        self._sub_filter = sub_filter

    @property
    def value(self):
        """Gets the value of this SearchFilter.  # noqa: E501

        Значение поля. Может быть массив из двух числовых элементов где элемент первый это нижная граница, а элемент второй это верхная граница (если один из них будет null, тогда нет ограничения соответствующего) или если это строка то принимая во внимание cmp. Если value не передается, то проверяется наличие атрибута  # noqa: E501

        :return: The value of this SearchFilter.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SearchFilter.

        Значение поля. Может быть массив из двух числовых элементов где элемент первый это нижная граница, а элемент второй это верхная граница (если один из них будет null, тогда нет ограничения соответствующего) или если это строка то принимая во внимание cmp. Если value не передается, то проверяется наличие атрибута  # noqa: E501

        :param value: The value of this SearchFilter.  # noqa: E501
        :type: object
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
