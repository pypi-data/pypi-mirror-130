# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatisticsEventOrderStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'new_value': 'str',
        'old_value': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'new_value': 'newValue',
        'old_value': 'oldValue',
        'uid': 'uid'
    }

    def __init__(self, id=None, new_value=None, old_value=None, uid=None):  # noqa: E501
        """StatisticsEventOrderStatus - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._new_value = None
        self._old_value = None
        self._uid = None
        self.discriminator = None

        self.id = id
        self.new_value = new_value
        if old_value is not None:
            self.old_value = old_value
        self.uid = uid

    @property
    def id(self):
        """Gets the id of this StatisticsEventOrderStatus.  # noqa: E501

        Идентификатор объекта заказа  # noqa: E501

        :return: The id of this StatisticsEventOrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatisticsEventOrderStatus.

        Идентификатор объекта заказа  # noqa: E501

        :param id: The id of this StatisticsEventOrderStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def new_value(self):
        """Gets the new_value of this StatisticsEventOrderStatus.  # noqa: E501

        Новый статус заказа * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   # noqa: E501

        :return: The new_value of this StatisticsEventOrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this StatisticsEventOrderStatus.

        Новый статус заказа * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   # noqa: E501

        :param new_value: The new_value of this StatisticsEventOrderStatus.  # noqa: E501
        :type: str
        """
        if new_value is None:
            raise ValueError("Invalid value for `new_value`, must not be `None`")  # noqa: E501
        allowed_values = ["cart", "create", "confirmed", "await", "pay", "delivery", "complete", "cancelled", "rejected"]  # noqa: E501
        if new_value not in allowed_values:
            raise ValueError(
                "Invalid value for `new_value` ({0}), must be one of {1}"  # noqa: E501
                .format(new_value, allowed_values)
            )

        self._new_value = new_value

    @property
    def old_value(self):
        """Gets the old_value of this StatisticsEventOrderStatus.  # noqa: E501

        Предыдущий статус. Может быть пустым в случае создания заказа * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   # noqa: E501

        :return: The old_value of this StatisticsEventOrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this StatisticsEventOrderStatus.

        Предыдущий статус. Может быть пустым в случае создания заказа * cart - корзина, заказ еще формируется * create - создан * confirmed - подтвержден * await - ожидает подтвержения * pay - ожидает оплаты * delivery - доставка * complete - выполнен * cancelled - отменен * rejected - отклонен   # noqa: E501

        :param old_value: The old_value of this StatisticsEventOrderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["cart", "create", "confirmed", "await", "pay", "delivery", "complete", "cancelled", "rejected"]  # noqa: E501
        if old_value not in allowed_values:
            raise ValueError(
                "Invalid value for `old_value` ({0}), must be one of {1}"  # noqa: E501
                .format(old_value, allowed_values)
            )

        self._old_value = old_value

    @property
    def uid(self):
        """Gets the uid of this StatisticsEventOrderStatus.  # noqa: E501

        Идентификатор владельца заказа  # noqa: E501

        :return: The uid of this StatisticsEventOrderStatus.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this StatisticsEventOrderStatus.

        Идентификатор владельца заказа  # noqa: E501

        :param uid: The uid of this StatisticsEventOrderStatus.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatisticsEventOrderStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatisticsEventOrderStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
