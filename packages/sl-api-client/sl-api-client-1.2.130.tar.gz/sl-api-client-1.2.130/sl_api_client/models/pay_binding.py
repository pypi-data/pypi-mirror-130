# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PayBinding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'binding_id': 'str',
        'expiry_date': 'str',
        'masked_pan': 'str'
    }

    attribute_map = {
        'binding_id': 'bindingId',
        'expiry_date': 'expiryDate',
        'masked_pan': 'maskedPan'
    }

    def __init__(self, binding_id=None, expiry_date=None, masked_pan=None):  # noqa: E501
        """PayBinding - a model defined in Swagger"""  # noqa: E501

        self._binding_id = None
        self._expiry_date = None
        self._masked_pan = None
        self.discriminator = None

        if binding_id is not None:
            self.binding_id = binding_id
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if masked_pan is not None:
            self.masked_pan = masked_pan

    @property
    def binding_id(self):
        """Gets the binding_id of this PayBinding.  # noqa: E501

        Идентификатор связки  # noqa: E501

        :return: The binding_id of this PayBinding.  # noqa: E501
        :rtype: str
        """
        return self._binding_id

    @binding_id.setter
    def binding_id(self, binding_id):
        """Sets the binding_id of this PayBinding.

        Идентификатор связки  # noqa: E501

        :param binding_id: The binding_id of this PayBinding.  # noqa: E501
        :type: str
        """

        self._binding_id = binding_id

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PayBinding.  # noqa: E501

        Срок истечения действия карты в формате ММ/ГГ. Указан только после оплаты заказа.  # noqa: E501

        :return: The expiry_date of this PayBinding.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PayBinding.

        Срок истечения действия карты в формате ММ/ГГ. Указан только после оплаты заказа.  # noqa: E501

        :param expiry_date: The expiry_date of this PayBinding.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def masked_pan(self):
        """Gets the masked_pan of this PayBinding.  # noqa: E501

        Маскированный номер карты, которая использовалась для оплаты. Указан только после оплаты заказа.  # noqa: E501

        :return: The masked_pan of this PayBinding.  # noqa: E501
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this PayBinding.

        Маскированный номер карты, которая использовалась для оплаты. Указан только после оплаты заказа.  # noqa: E501

        :param masked_pan: The masked_pan of this PayBinding.  # noqa: E501
        :type: str
        """

        self._masked_pan = masked_pan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayBinding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayBinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
