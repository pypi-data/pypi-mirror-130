# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MessageTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'str',
        'is_base': 'bool',
        'key': 'str',
        'payload': 'str',
        'title': 'str'
    }

    attribute_map = {
        'body': 'body',
        'is_base': 'isBase',
        'key': 'key',
        'payload': 'payload',
        'title': 'title'
    }

    def __init__(self, body=None, is_base=None, key=None, payload=None, title=None):  # noqa: E501
        """MessageTemplate - a model defined in Swagger"""  # noqa: E501

        self._body = None
        self._is_base = None
        self._key = None
        self._payload = None
        self._title = None
        self.discriminator = None

        self.body = body
        if is_base is not None:
            self.is_base = is_base
        self.key = key
        if payload is not None:
            self.payload = payload
        if title is not None:
            self.title = title

    @property
    def body(self):
        """Gets the body of this MessageTemplate.  # noqa: E501

        Шаблон тела сообщения  # noqa: E501

        :return: The body of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MessageTemplate.

        Шаблон тела сообщения  # noqa: E501

        :param body: The body of this MessageTemplate.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def is_base(self):
        """Gets the is_base of this MessageTemplate.  # noqa: E501

        Флаг, который говорит о том, что шаблон является базовым.  # noqa: E501

        :return: The is_base of this MessageTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._is_base

    @is_base.setter
    def is_base(self, is_base):
        """Sets the is_base of this MessageTemplate.

        Флаг, который говорит о том, что шаблон является базовым.  # noqa: E501

        :param is_base: The is_base of this MessageTemplate.  # noqa: E501
        :type: bool
        """

        self._is_base = is_base

    @property
    def key(self):
        """Gets the key of this MessageTemplate.  # noqa: E501

        Уникальный в рамках комнаии ключ шаблона  # noqa: E501

        :return: The key of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MessageTemplate.

        Уникальный в рамках комнаии ключ шаблона  # noqa: E501

        :param key: The key of this MessageTemplate.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def payload(self):
        """Gets the payload of this MessageTemplate.  # noqa: E501

        Шаблон payload сообщения если необходим  # noqa: E501

        :return: The payload of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this MessageTemplate.

        Шаблон payload сообщения если необходим  # noqa: E501

        :param payload: The payload of this MessageTemplate.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def title(self):
        """Gets the title of this MessageTemplate.  # noqa: E501

        Шаблон заголовка  # noqa: E501

        :return: The title of this MessageTemplate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MessageTemplate.

        Шаблон заголовка  # noqa: E501

        :param title: The title of this MessageTemplate.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
