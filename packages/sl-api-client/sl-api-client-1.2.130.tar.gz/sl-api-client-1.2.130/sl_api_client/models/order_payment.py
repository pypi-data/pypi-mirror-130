# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        'id': 'str',
        'is_successful': 'bool',
        'status': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'id': 'id',
        'is_successful': 'isSuccessful',
        'status': 'status'
    }

    def __init__(self, amount=0, id=None, is_successful=False, status='none'):  # noqa: E501
        """OrderPayment - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._id = None
        self._is_successful = None
        self._status = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        self.id = id
        self.is_successful = is_successful
        self.status = status

    @property
    def amount(self):
        """Gets the amount of this OrderPayment.  # noqa: E501

        Сумма платежа в копейках  # noqa: E501

        :return: The amount of this OrderPayment.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderPayment.

        Сумма платежа в копейках  # noqa: E501

        :param amount: The amount of this OrderPayment.  # noqa: E501
        :type: int
        """
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def id(self):
        """Gets the id of this OrderPayment.  # noqa: E501

        Уникальный номер заказа в системе платёжного шлюза (UUID)  # noqa: E501

        :return: The id of this OrderPayment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderPayment.

        Уникальный номер заказа в системе платёжного шлюза (UUID)  # noqa: E501

        :param id: The id of this OrderPayment.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_successful(self):
        """Gets the is_successful of this OrderPayment.  # noqa: E501

        Флаг успешности платежа  # noqa: E501

        :return: The is_successful of this OrderPayment.  # noqa: E501
        :rtype: bool
        """
        return self._is_successful

    @is_successful.setter
    def is_successful(self, is_successful):
        """Sets the is_successful of this OrderPayment.

        Флаг успешности платежа  # noqa: E501

        :param is_successful: The is_successful of this OrderPayment.  # noqa: E501
        :type: bool
        """
        if is_successful is None:
            raise ValueError("Invalid value for `is_successful`, must not be `None`")  # noqa: E501

        self._is_successful = is_successful

    @property
    def status(self):
        """Gets the status of this OrderPayment.  # noqa: E501

        Описание платежных статусов   * approved - заказ подтвержден   * deposited - заказ завершен   * reversed - заказ отменен   * refunded - произведен возврат средств по заказу   * declinedByTimeout - время сессии истекло   * none - статус неизвестен   # noqa: E501

        :return: The status of this OrderPayment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderPayment.

        Описание платежных статусов   * approved - заказ подтвержден   * deposited - заказ завершен   * reversed - заказ отменен   * refunded - произведен возврат средств по заказу   * declinedByTimeout - время сессии истекло   * none - статус неизвестен   # noqa: E501

        :param status: The status of this OrderPayment.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["approved", "deposited", "reversed", "refunded", "declinedByTimeout", "none"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
