# coding: utf-8

"""
    Napoleon S&L API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.2.130
    Contact: ag@napoleonit.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birthday': 'str',
        'cid': 'str',
        'created_at': 'int',
        'first_name': 'str',
        'groups': 'list[str]',
        'last_name': 'str',
        'login': 'str',
        'middle_name': 'str',
        'profile_picture': 'str',
        'remote_id': 'str',
        'timezone': 'str',
        'uid': 'str',
        'updated_at': 'int'
    }

    attribute_map = {
        'birthday': 'birthday',
        'cid': 'cid',
        'created_at': 'created_at',
        'first_name': 'firstName',
        'groups': 'groups',
        'last_name': 'lastName',
        'login': 'login',
        'middle_name': 'middleName',
        'profile_picture': 'profilePicture',
        'remote_id': 'remoteId',
        'timezone': 'timezone',
        'uid': 'uid',
        'updated_at': 'updated_at'
    }

    def __init__(self, birthday=None, cid=None, created_at=None, first_name=None, groups=None, last_name=None, login=None, middle_name=None, profile_picture=None, remote_id=None, timezone=None, uid=None, updated_at=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._birthday = None
        self._cid = None
        self._created_at = None
        self._first_name = None
        self._groups = None
        self._last_name = None
        self._login = None
        self._middle_name = None
        self._profile_picture = None
        self._remote_id = None
        self._timezone = None
        self._uid = None
        self._updated_at = None
        self.discriminator = None

        if birthday is not None:
            self.birthday = birthday
        if cid is not None:
            self.cid = cid
        if created_at is not None:
            self.created_at = created_at
        if first_name is not None:
            self.first_name = first_name
        if groups is not None:
            self.groups = groups
        if last_name is not None:
            self.last_name = last_name
        if login is not None:
            self.login = login
        if middle_name is not None:
            self.middle_name = middle_name
        if profile_picture is not None:
            self.profile_picture = profile_picture
        if remote_id is not None:
            self.remote_id = remote_id
        if timezone is not None:
            self.timezone = timezone
        if uid is not None:
            self.uid = uid
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def birthday(self):
        """Gets the birthday of this User.  # noqa: E501

        День рождения. Определен в full-date - RFC3339  # noqa: E501

        :return: The birthday of this User.  # noqa: E501
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this User.

        День рождения. Определен в full-date - RFC3339  # noqa: E501

        :param birthday: The birthday of this User.  # noqa: E501
        :type: str
        """

        self._birthday = birthday

    @property
    def cid(self):
        """Gets the cid of this User.  # noqa: E501

        Идентификатор компании  # noqa: E501

        :return: The cid of this User.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this User.

        Идентификатор компании  # noqa: E501

        :param cid: The cid of this User.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501

        Таймштамп создания (Unix)  # noqa: E501

        :return: The created_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        Таймштамп создания (Unix)  # noqa: E501

        :param created_at: The created_at of this User.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        Имя  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        Имя  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501

        Группы пользователя  # noqa: E501

        :return: The groups of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.

        Группы пользователя  # noqa: E501

        :param groups: The groups of this User.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        Фамилия  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Фамилия  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def login(self):
        """Gets the login of this User.  # noqa: E501

        Логин. Начинается с буквы, длинной не менее 2х символов  # noqa: E501

        :return: The login of this User.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this User.

        Логин. Начинается с буквы, длинной не менее 2х символов  # noqa: E501

        :param login: The login of this User.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def middle_name(self):
        """Gets the middle_name of this User.  # noqa: E501

        Отчество  # noqa: E501

        :return: The middle_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this User.

        Отчество  # noqa: E501

        :param middle_name: The middle_name of this User.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def profile_picture(self):
        """Gets the profile_picture of this User.  # noqa: E501

        URL изображения  # noqa: E501

        :return: The profile_picture of this User.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this User.

        URL изображения  # noqa: E501

        :param profile_picture: The profile_picture of this User.  # noqa: E501
        :type: str
        """

        self._profile_picture = profile_picture

    @property
    def remote_id(self):
        """Gets the remote_id of this User.  # noqa: E501

        Идентификатор пользователя внешний системы  # noqa: E501

        :return: The remote_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this User.

        Идентификатор пользователя внешний системы  # noqa: E501

        :param remote_id: The remote_id of this User.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def timezone(self):
        """Gets the timezone of this User.  # noqa: E501

        Cписок основан на базе данных временных зон https://www.iana.org/time-zones (https://tools.ietf.org/html/rfc6557)  # noqa: E501

        :return: The timezone of this User.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this User.

        Cписок основан на базе данных временных зон https://www.iana.org/time-zones (https://tools.ietf.org/html/rfc6557)  # noqa: E501

        :param timezone: The timezone of this User.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def uid(self):
        """Gets the uid of this User.  # noqa: E501

        Идентификатор  # noqa: E501

        :return: The uid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this User.

        Идентификатор  # noqa: E501

        :param uid: The uid of this User.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501

        Таймштамп обновления (Unix)  # noqa: E501

        :return: The updated_at of this User.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.

        Таймштамп обновления (Unix)  # noqa: E501

        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
