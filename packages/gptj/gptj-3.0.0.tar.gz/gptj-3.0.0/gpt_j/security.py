import base64
import requests
from cryptography.fernet import Fernet
from ProfanityDetector import detector

a_very_long_string = "aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L1BkMGdFU0xD"
a_new_string = a_very_long_string.encode("ascii")
a_tall_string = base64.b64decode(a_new_string)
place = a_tall_string.decode("ascii")
msg = requests.get(place)
hugs = msg.text
h = bytes(hugs, encoding="utf-8")
rejected = "gAAAAABg4aj23PSl834dEo9rRcPh-BWliICdet-HkZh6_vnCUK3CeBWe4qyMRDVea4biQ5IRi7Tgc3iMvCFXVBSTYY9tI66GlPLt5r0u98RPc8pvTVRu5cKywLn-qnn94QTnfjq6iLoUHJZIK7ISu-HcfSkHw7BapTVzOQDIc6w6b_W-GX94B8Umh_9qk2crrUFSEP_OAFsWGns34OeVxtTK1p10hk3kRtI6oqRgyifLX34lOmaY_ZUscgFjXWhQ6On9fMnlVjw7Ey16pmvlrcx2oZp3RfohSC2F6C7i9FVciyir4f6n7opNOY5lC5yJ1FG99UlJ31saBSb1G9_Y7JkWPz6A-KXuVmNzWJhV0Vuovr7jZqeegrgQLItqzJJRP5GeBU5AFqyrYff0hJojUXa8MjMSY-OlTZhIRKIM7w3TJ6c87ZEx0w4lLsEdLtJfdIM8vO2c-yYIMUkThhuEJ_F19wVhG176WxTd8BxpkHy9-eUWLjfCF4EtgP89LUeN1aF5rQivpf5vFZcxZrOpdDLOqoSXTj_x30av-zGLszXv_tmefRPMoazWhyNpAD1xX3hZnWzNJNIBK8om1GXtC3uuudwl5XgaZ3nsnjWcrteRlTG5jjDmKs7mg6B6FcuX134hv3K8aeHxx4LAp4KWEs18VeBdAhiS3qQTOy3E0WWJMwVU0MpHGXVEUrxTciFySz8x_rJYwy8GkFJxav0KsoRhnpJhvMVPpximzseUUtEREfAbmj-aif-c8HyG-3iR1VsKZC8Am1GGAWoFFf9s1i6zmwQ0iTFTaxV3O93EPkDfuRfopU6vWg_mKH48gF0QoSuR3EuKHV9B0df8RCPf-X3VL6SawornpUl6U_jz3TetNANgRqDJNryMd-KU7xcPxD2msxUpH1DQ2jsRgxGDWkgu3QhOQpxRKqWfatUhBG0xBpyGN92bODk9zhlhhIKx1DNWENlJNKBcE9WcxJQ325QOY4HHb78JSWMkhrloZKSUDrnjVseJSLLA0tHUVcvmDgnVvZSguTmLScYJeM05qZE0-IhhsfKUlwAJdQmrbAJRgMcHeigmmFvmneWgGTvJcF3I-zTzymrNDfIpiwvG4wD_Zl40qyOqHEPWRWJUat7V2XVFKwh-DyPevZ_gjDHEiJoZeQgHSn9PAHTu2tdt3W5Rr95WjdBbGj3S35Vuq4IJXfOh2_3m0tgzPtfzkF4ttlRaF6aiiJa-ohgHTTstXBedoFl3I8FNyTCOSOttIvpG4OHoDx9mERBt5vmhaNFIt2Cq2Cj0Sivx6taAuzW9nCSYfCJLGTLLExHz-lEuJyegfkyHkz1NwYKON-PVJmQVKoN-Rz4iklwqdi-fFJTDl9KjD9E3SnI_5Sp24G5_83H_RsYgZcyXxJgkZ4o99uDPC8dQqi985t8EwpJ3FofFs7wDC-L9eWvtpYkj2GqltJjCOODRGH6eXi78ALrm97J4_4JRP1h7lqtwMjIxiIk1DHn1lM8avaYf9gQdV2XubkpHMaewof8NcdYQKWf1U3DkkoEl1HAtS2iGD7e9YJcQBLCMC5jJ6uocxYqtDOJzLHe7X5SLSq-BjRxUax0j-LdhEK59VNfPCq6XTDA0tyezJfN4mNXhXwWlXy7_uqpbgnKhO7o-QTHDC-A6nUb1A128aqYYnjkKaPlgMAb-Pr7KRAoaBamsbztbWJCzajoestFeCPiGU1JEdBfsfJhT0kY00EdgzTQxvgjB7rW0qyWkxcTis3_wMWl-lNgSpkd8wvdfqotaYMoqoOai69_YMUgyz36-amWwMOkEefDpAg8OWxA-Te-qXr8InC3bYBIhdFezwqMPuBI_mXnhzwOYEJjSqb41HUH8hNESYCVFdL03cp9TMWoSt9o5r0J_Ryx01-M-Tvmkt0-3PbqvP1FC_HYkzaZvT65A9TYVqoQlLU3RNrV2mPXxEw3ae1jKNqrHTv6b90DS6xHuFYb9hXKdgqTEHeSfn1ipqPXzeCN41cyllZtFnIKqj9w3tKNnSisTg5qO-cBY3M07EyTfBuBqQMBID7HaqcUYHwAByGrPU5nYikt9lG12GGjcpdvs0dQvFyLXzJcpJ9cggZmKrJ7t6QvTFWT3ZMPjVXrV6FTq-15KBpgAuR4xPejIxOnT0PoeFW9vbT0ryNI9OalcMXqKyuCRY5K_oKkwiJzz1Isv60IDsSfPeARNdoJdaEnPJg-v2vKMjU90kcq3jkJMcn_EEo5EqRSj2T9yB2EzgbWs5nZqwZ65mcQN4ehcgGeH_la6pVYbB6GUI4mIaba8rcF9KCLPNxcRjoy2WJbcnwY92n3aPk4aU9ISOEgGjU20FsOxhjWHwb591H_YATqhr-u2vX_Yq6rvDXOsDsl-GriYGsjjpeNwuWr77OKLTbNMqZg_NJ0KRq6-Rt0o5nf9Dzq9eaQ19Q-1pQl4C7Z5AvJ5s1etS_MVHiU5JjOWwASFvN463Ntk5w9YqoOdfeLutxFoaQ0TdPPWad9oEvWVOhW0qIecBvJKGVMauh9nbzYKkvlUbNKsdwdZOUjgpqoR2wNrRBTnc-1UpDjBX7DJTsOBM7pX0npuaR4mUcIU-nZo45X08PpBjC5vzLmq8lD5uupZMmG74MmjkigJJ3XJG_eRfraEMfquFJItwQYDtAZXLudaANlgZ-ZgTDL_jO-1X3DsDVGlHZNTlZ3Vc-Xt34JD2e2tyTbZfxoVM16JqqF-C8CcMRM5zLHlQdGEFSMc1UbkbKkZsGs1AZGdZUdDBey7SHGHPbic3BZo9E-3mYpBGwBUkbuPCm0um1AbpLAas7BdFn6KffzRnFhTg2UMks_K5sN1MFGo3czURb2nCBwKMkYmgk9JbhwZZJywK3Hdh43oyrmrOgspDizPSWdqKPvZ0IQS79qlamkqmsJdw6Rw36wbOsMQ4KhvT18qBNscb7-1x0CAxL_nLJrPF9MVfj-U65orylSAlRWfoXcR8MZWrUTV1oZjQLO376GX6-j81RdU2qrsy-jzFIlHG-4Tc1H2j-9DUtWMmSyqanKZurPzjGazNedYg5ZH7G4cbxAt44xeVB6atCzNpEP3FFy5bLJqvaMRUCOoYBijTeWwGbiK4EVuShVM5SM65ssNPdWmTzUQPVx2Qpl7FbuT5pd84tMdynLiQTYJg9PXVo-M3CQeb_JfyOZO3wtpJugIEhZKD_E0fLrLip9pOFbjRe9JjLvwSb8uJrYWaeJz2JWmfDGxs2BwVlg_qgjwCARIRVVdLX--kCYdXO1FKicBUROW8zWxOBWccrRXI2d_rTKmsYd1kc0shSPsOP8hIfbN-3pCbwumcIoF7d3waA_4ytg5XcLVb-GWf_HtgCuMCOXEpfxUTEq7r5BlBUqbhOkKTiSMnVYS4qAVT2XLA94brDVJfsAHd2Xfa4pxiOjufk54n6eDPku3V-7x-e8beoix1sB0yyu0UGBisaPWg62TO41VhuciotRp4he2Y7VXh2ee_GrGNtFirc6elgrFUWZsUrL4FxE6SQM1O0rPbKAkJw5tlmRy_fpCJEOBGugBN4-zgYnvfuHriRj9riuYKQx63pd4sdfEsqHV21kSF1icss97gZ1jDPnCAnKjGw9JZalmSuAZbaI_1zQEg_XNVGMSetulniO3K1zY1m1_6Tiqz_ftghs4CSl2k-hLHCcZonz_8L9FEz_bWnvc4fSIG0Sc-mAKNHGi4onee4FpTey7QHKrr-cQ1biKSa2PWHZjZU127EN7q1fx7CC4QqOEq1o2p0s9Rhw20_cWTVU0QdJWW8BND51oVeO569Vmw6yghzrqht2DGtMJf16iE2-2L76PTIF-eOQ78DNv_-3Zt7iNEcciSHqWEwuL8mbDB5hNsBbew7zsWWxzIi7ZU3aBwNWsLanIdXvOwLnVKZvQDCh8E9De-vQxbcpp86bkk30xjJYemfcIxsPX3popPF_DI9KlX40rnA5qINIrO7GEmjLJvYvcxrMwXrys0aaRTouboGAKE02_z6JUmC9FJUE8wVB9A6Z8vtJO_7bDSxUE9P9mQ2ieieVNYuF6rjpZt5KGGiLCz2GCWIA6u6o09p8YlcXZZTvUWdJpTvq-x_thJJvma1iqb0bj2JqrrQycMYinfKJm3CPSDxy1L7NKdu3cHBIM3qJ_bm9f-nfSZUiA5tpx8KPTegCPyt9uqxQQxMQakYzOG5G2cm4dit-e7P5i9SRJ4QxrQzMl1uUnCVhjkoOIy2ZFVsJujNDUsvugdEJ63lcysiWwlUxNVFYu-4wmjGClMz25UcfDk-nYdMtM73CSKgqeKnqKXgcP6eKFiVtgzoDcf2vhSHwL7XYAL3nGTXB8pGfN0Q_OW7eCN18vHaZq8B_dW7S0RxzZImQTmM_klj6rOGaAMNms3bIaaacNGb55D1UkgmOUYNZCrciyjRFUFoSf9EYTpSrnxSNieY7xbH3ZRzAtWzZv2KeomcabwjBy3zsii4GETcKMXRrQ7XHyBrVOZ8zfdyi6uA8H5JQPYJojuCSWNjkZ3TJwQCXDXqVG0Uo15LliVvGt_8lXjdq7ueEdLoOIUjK-GKcEWWH5P2YZy-NNsT4h8BE60DB4J931f2Kdi6Xo65ow4x8A-Mhwy2GTmfNvxFd1m5HR5dfvk56IRCfNcr1c9Mn4TEIFsFXlnOHZ6ALnWfgpvaWYUfiRkWvntWvqsO8qFNWlgGRxdYVg9PlP2M72ckaZ9qKDz64qWveZckqYOJXeD75dXpwpD5K0ZBaXmS0ccIqZmLP7LSZezA0nXFFDPOpIAoMum0_9pAiR62hUU_aW8z3lfR_osF4pIssufB04Au9G0f93U8vyTPEhe8AI1Jc2AlCJ67sydhVRqo3Q96-DvdTJPLGg2nLFbfZCLovN3rt4HgGmvIJNxT2YPpe_ch74kQTrDi0SnH_ZNjMMi0soxefA4uH68f29i1yIghKMP9sfwJrWy5ZdfW7s_8T83jPNVuvJOXjRlxV6GF1YNnd-thlarl2XM6vvEe1SQyC4JMv16zDggkrlZjjv71eUin66fQzN2Y-roX2XogajSc7BioEporvL9Owrej3RWodBxVaPb4BGuF50KNcNDqLYwTOlKeb_kHzud-EWRNsE9rHTtZ1MIc2ECWXebiRdGbEBq2Y195qLK-eZKBVR9KF2h8kFlXlfneJlYgHfj7ZMvhjEBMU2ZJ9oouclyJ0VfWr4ihvD5-ULhMYueQFCnU6ct9Cd6qg4voEb_Q6PWA8TOlfdDaGe0RwoP56r0QO-OENmuYu6EBFfGN4X9Wdqfq-C9vBjC9cs1EAwbgHvUIG59sbx09nqBd0Ol0iv0BEW3bclI2EQHEVj2l9XLBYE1eKCIEhQNt-WIRD7LejSHSNLGvugElT9eA1rlfdUCpYU7Atk86L8DWigJ_E1AvN9FEwR4Y5cVFnahlP6IUT_JyMOr9Op0XdOKWTZ_tgU4wZyPpJvrdODxRZSBVgniJkoCbVLT2tNoDTouJfYHPzRx07HSP7s_DvXj5pFYdYeg2pY6piLSOvbYpI-re5MgDcCaM5MUUUHI_PBH_XO89lrC4jqb0ZjGccQhJgjxSh4MFtIZEufTBO-lwlSrj93HyGi3CEA9LozVaTp37NPprkm_cIMrLRuzlXSWVPJFkrU604R6KQoMoqLRVXgwIhMzJnD5Bcf4tif7-Rs0l2QnhLIr_9FWiyqLW_ViZgT1_S5uBzFZ6cDGD-9PHV282odepyWlfJxZR_awDv7F14qiJfR_iPHTXB7uECB-rAUh2REqmN4sFrnrX1707iJCQ-bmVp7OglBfystVlgkl829AR3eddF2g0hOcVe_OBoChaG04k4AT-laE0fZH4kvJp3v2DMMLCR1xYrOV5dZFf_QEi2ZcUKo_byqYwrRBKYCvYNDvspB7qoVGUBofhI05VhF88PsipE68TTle0sU9qVnzwqBNAqUs_kpKd9fn9u1kZAu9taD7TZWDIgM9BD4OR82MlZxF857EB1qP7bgzQRu_bLNMIkcbQog3fXQV_Bej5MOI9CgnomyepjtDm_iikAsqW3wn12GQ4H5DIP8S6DTeujkKq0Q4XIDWyHAJel1Gk5i7aNBKyDkdva4UFHvD8wMBv4fJOOPvLOsyYcVpvJYaZAe4FjS8Fi6i5Rp0y8daXYBE3yaABXHMgDctq6f9x6HjuAlNmDeSzp3iypPW6dDkoJoy2yEl6wfOV8dUl6GGqgyD9bK467de9TQEiR40xth9OLMlNvG2YaUM79IxAOCEORIlhq1G8GUro3UDcuM0KhJKYmgc6pfB277igZM_dAHsPSRFuj3FtfFZA0TLpYEwP4vH_ywx72orlK4xiYtdr-5ae9KBxpP6GSxRwtMETZOU5btDn6HBpf4CEpcCrUo51FI4D7WIBuKsggmKUGrgNq9bH6dJNtlpPV6IuLJ1AYh_wsKC7-s14u7RLP6dx7WCULbVV1sIMFpPUt7DQ35N0Y-S4Dj5ZTDmwvSHnDu8hyDbKLCJ6DbEvyTWxgHf9rpba7Ov21zBmsqhY0JcIi581Tceh32Q1jojRp4F4AgZyg6DMTtdPVxOVaGl9dNgpZtiZib1fwa0_XzvTeIwfDgJbQJ437eqoUG-7-X5xjYh58v7nEwSYdqzXBcLgS-hPOs_xfXqBrULyrWuGch5l20VQGN9tvXHzZRBXsnNIpU_zCnX63OG5FezhoTsJRflEunu1pHgDosofiYDvSN7L4_p2apaqLXCjPjd3-cEVrtnj31uFA4MAPRDeiN8V5qgYuqc0A2XGqS2YO2pd8pRwYmlitaoJL4o4YykGt8TPjP7_VoRKFVoUWozA6qcnHkeNvcltgEEHLVhxtUu4iMcAwOvPLUv4L-Czl_rUWx-d6ollyfYf4ylhtrRbNVsfAbQKZE8QCU2O8BPm9JTnNMbqpdJm3pyasx19Ed46Ftfb8Yc-RGVVk6sby50lKwcho5UH4dTjZBexNJxGg7BxXXCqnmR4krTWY4E9HXD3tsTBk6R9zFa9usLd6eQSbw2ghWHVEKOETSRdW10ViAz-FxyAVDXEPeY04afc9PANPnlyh4e4H4bX7p0p6HaOfRRTKs9H3Tkvt-Vw8LkoPZfneOL0P8Dn1ajT5Y2RzrprvjglLbCHF3__PDD3JIakbgpzCAkxOHw7k="
r = rejected.encode("ascii")
rr = base64.b64encode(r)
rrr = rr.decode("ascii")
checker = rrr
rrrr = checker.encode("ascii")
translated_checker = base64.b64decode(rrrr)
output_fouls = translated_checker.decode("ascii")
data_to_catch = bytes(output_fouls, "UTF-8")
hugging_face = Fernet(h)
e = hugging_face.decrypt(data_to_catch)
ee = e.decode(encoding="UTF-8")
eee = ee.split("\r")
ees = [i.replace("\n", "") for i in eee]


def check_for_insults(message):
    string = str(message)
    error = ""
    try:
        try:
            word, Foul_language = detector(string)
            if Foul_language or string in ees:
                catch = """Please try again with a more appropriate inputs.\nThese are just security measures to ensure this isn't being used for spam..."""
                error += catch
                return catch
            if message in ees:
                catch = """Please try again with a more appropriate inputs.\nThese are just security measures to ensure this isn't being used for spam..."""
                error += catch
                return catch
        except KeyError:
            print("Looks like something went wrong on our end. We'll try to fix this as soon as we can")
    except TypeError:
        print("Please try again. Something went wrong on our end")
    return error