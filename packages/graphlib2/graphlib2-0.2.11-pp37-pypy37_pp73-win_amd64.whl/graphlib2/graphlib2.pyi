from __future__ import annotations

from typing import *

from graphlib2._types import SupportsItems

T = TypeVar("T")

class CycleError(ValueError):
    pass

class TopologicalSorter(Generic[T]):
    def __init__(
        self, graph: Optional[SupportsItems[T, Iterable[T]]] = ...
    ) -> None: ...
    def get_ready(self) -> List[T]: ...
    def add(self, node: T, *predecessors: T) -> None: ...
    def done(self, *nodes: T) -> None: ...
    def is_active(self) -> bool: ...
    def prepare(self) -> None: ...
    def static_order(self) -> Iterable[T]: ...
    def copy(self) -> TopologicalSorter[T]: ...
