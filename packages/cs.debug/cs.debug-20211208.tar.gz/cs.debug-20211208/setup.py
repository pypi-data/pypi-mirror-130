#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.debug',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20211208',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  description =
    'Assorted debugging facilities.',
  long_description =
    ('Assorted debugging facilities.\n'    
 '\n'    
 '*Latest release 20211208*:\n'    
 '@trace moved to cs.pyfunc, other minor changes.\n'    
 '\n'    
 '## Function `DEBUG(f, force=False)`\n'    
 '\n'    
 'Decorator to wrap functions in timing and value debuggers.\n'    
 '\n'    
 '## Function `debug_object_shell(o, prompt=None)`\n'    
 '\n'    
 'Interactive prompt for inspecting variables.\n'    
 '\n'    
 '## Class `DebuggingLock(DebugWrapper,types.SimpleNamespace)`\n'    
 '\n'    
 'Wrapper class for `threading.Lock` to trace creation and use.\n'    
 '\n'    
 '`cs.threads.Lock()` returns one of these in debug mode or a raw\n'    
 '`threading.Lock` otherwise.\n'    
 '\n'    
 '### Method `DebuggingLock.acquire(self, *a)`\n'    
 '\n'    
 'Acquire the lock.\n'    
 '\n'    
 '### Method `DebuggingLock.release(self)`\n'    
 '\n'    
 'Release the lock.\n'    
 '\n'    
 '## Class `DebuggingRLock(DebugWrapper,types.SimpleNamespace)`\n'    
 '\n'    
 'Wrapper class for threading.RLock to trace creation and use.\n'    
 '\n'    
 '`cs.threads.RLock()` returns on of these in debug mode or a raw\n'    
 '`threading.RLock` otherwise.\n'    
 '\n'    
 '## Class `DebugShell(cmd.Cmd)`\n'    
 '\n'    
 'An interactive prompt for python statements, attached to `/dev/tty` by '    
 'default.\n'    
 '\n'    
 '### Method `DebugShell.default(self, line)`\n'    
 '\n'    
 'Default command action.\n'    
 '\n'    
 '## Class `DebugWrapper(types.SimpleNamespace)`\n'    
 '\n'    
 'Base class for classes presenting debugging wrappers.\n'    
 '\n'    
 '## Function `DF(func, *a, **kw)`\n'    
 '\n'    
 'Wrapper for a function call to debug its use.\n'    
 '\n'    
 'This requires rewriting the call from `f(*a,*kw)` to `DF(f,*a,**kw)`.\n'    
 'Alternatively one could rewrite as `DEBUG(f)(*a,**kw)`.\n'    
 '\n'    
 '## Function `Lock()`\n'    
 '\n'    
 'Factory function: if `cs.logutils.loginfo.level<=logging.DEBUG`\n'    
 'then return a `DebuggingLock`, otherwise a `threading.Lock`.\n'    
 '\n'    
 '## Function `openfiles(substr=None, pid=None)`\n'    
 '\n'    
 'Run lsof(8) against process `pid`\n'    
 'returning paths of open files whose paths contain `substr`.\n'    
 '\n'    
 'Parameters:\n'    
 '* `substr`: default substring to select by; default returns all paths.\n'    
 '* `pid`: process to examine; default from `os.getpid()`.\n'    
 '\n'    
 '## Function `RLock()`\n'    
 '\n'    
 'Factory function: if `cs.logutils.loginfo.level<=logging.DEBUG`\n'    
 'then return a `DebuggingRLock`, otherwise a `threading.RLock`.\n'    
 '\n'    
 '## Function `selftest(module_name, defaultTest=None, argv=None)`\n'    
 '\n'    
 'Called by my unit tests.\n'    
 '\n'    
 '## Function `stack_dump(stack=None, limit=None, logger=None, '    
 'log_level=None)`\n'    
 '\n'    
 'Dump a stack trace to a logger.\n'    
 '\n'    
 'Parameters:\n'    
 '* `stack`: a stack list as returned by `traceback.extract_stack`.\n'    
 '  If missing or `None`, use the result of `traceback.extract_stack()`.\n'    
 '* `limit`: a limit to the number of stack entries to dump.\n'    
 '  If missing or `None`, dump all entries.\n'    
 '* `logger`: a `logger.Logger` ducktype or the name of a logger.\n'    
 '  If missing or `None`, obtain a logger from `logging.getLogger()`.\n'    
 '* `log_level`: the logging level for the dump.\n'    
 '  If missing or `None`, use `cs.logutils.loginfo.level`.\n'    
 '\n'    
 '## Function `thread_dump(Ts=None, fp=None)`\n'    
 '\n'    
 'Write thread identifiers and stack traces to the file `fp`.\n'    
 '\n'    
 'Parameters:\n'    
 '* `Ts`: the `Thread`s to dump; if unspecified use `threading.enumerate()`.\n'    
 '* `fp`: the file to which to write; if unspecified use `sys.stderr`.\n'    
 '\n'    
 '## Class `TimingOutLock`\n'    
 '\n'    
 'A `Lock` replacement which times out, used for locating deadlock points.\n'    
 '\n'    
 '## Function `trace_caller(func)`\n'    
 '\n'    
 'Decorator to report the caller of a function when called.\n'    
 '\n'    
 '## Class `TraceSuite`\n'    
 '\n'    
 'Context manager to trace start and end of a code suite.\n'    
 '\n'    
 '# Release Log\n'    
 '\n'    
 '\n'    
 '\n'    
 '*Release 20211208*:\n'    
 '@trace moved to cs.pyfunc, other minor changes.\n'    
 '\n'    
 '*Release 20200318*:\n'    
 'Remove use of cs.obj.O, universally supplanted by types.SimpleNamespace.\n'    
 '\n'    
 '*Release 20181231*:\n'    
 '* New TimingOutLock for locating deadlock points, grew from debugging '    
 'cs.vt.index.\n'    
 '* Other minor changes.\n'    
 '\n'    
 '*Release 20171231*:\n'    
 '* Update imports for recentchanges.\n'    
 '* New context manager TraceSuite to trace start and end of a code suite.\n'    
 '\n'    
 '*Release 20160918*:\n'    
 'selftest(): fix parameter ordering to match unittest.\n'    
 '\n'    
 '*Release 20160828*:\n'    
 'Update metadata with "install_requires" instead of "requires".\n'    
 '\n'    
 '*Release 20160827*:\n'    
 '* New openfiles() to return selected pathnames of open files via lsof(8).\n'    
 '* New selftest() to invoke unittests with benefits.\n'    
 '* DebugShell, a cmd.Cmd subclass for debugging - current use case calls this '    
 'with self.__dict__ in a test case tearDwon.\n'    
 '* debug_object_shell: convenience wrapper for DebugShell to call it on an '    
 "object's attributes.\n"    
 '\n'    
 '*Release 20150116*:\n'    
 'PyPI prep.'),
  install_requires = ['cs.logutils', 'cs.obj', 'cs.pfx', 'cs.py.stack', 'cs.py3', 'cs.seq', 'cs.x'],
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.debug'],
)
