// Generated by CoffeeScript 1.12.7
(function() {
  var EditorModel, Post, controls_width, is_touch_device, make_textarea_center, posts_host, raw_lang, sync_gateway;

  posts_host = '/__web_editor_posts' + location.search;

  sync_gateway = '/__file_manager_api' + location.search;

  controls_width = 235;

  this.canvas_allowed = Boolean(document.createElement('canvas').getContext);

  raw_lang = window.navigator.language || window.navigator.userLanguage || window.navigator.browserLanguage || window.navigator.Language;

  this.lang = raw_lang.toLowerCase().replace('-', '_');

  if (this.lang === 'zh_cn') {
    this.simple_help = '欢迎使用 FarBox 的在线Editor，这是第一篇文章。 \n\n第一行是使用 key: value 形式的，表示对文章的特殊定义，比如 Date: 2014-10-20 22:40 或者 Tags: Hello，当然，没有也没有关系。 \n\FarBox 支持 Markdown语法，当然，不知道 Markdown 是什么，直接写也没有关系。 \n\n如果需要插入图片，直接拖入到编辑区域就可以了。';
  } else {
    this.simple_help = 'Welcome to FarBox online Web Editor, this is your first post. \n\nContents in first line like key: value, means the metadata of current post, like Date: 2014-10-20 22:40 or Tags: Hello. Of course, a post without metadata, it\'s ok. \n\nFarBox supports Markdown, but if you do not know Markdown, just write, it just works. \n\nIf you want to insert an image, just drag it into the textarea.';
  }

  $.fn.shake = function(options) {
    var margin, margin_total, onComplete, onStart, selector, settings, speed;
    selector = this;
    settings = $.extend({
      'speed': 100,
      'margin': 20,
      'onComplete': false,
      'onStart': false
    }, options);
    speed = settings['speed'];
    margin = settings['margin'];
    margin_total = parseInt(margin) + parseInt(margin);
    onComplete = settings['onComplete'];
    onStart = settings['onStart'];
    if (onStart) {
      eval(onStart);
    }
    return $(selector).animate({
      marginLeft: margin
    }, speed / 2, function() {
      return $(selector).animate({
        marginLeft: '-' + margin_total
      }, speed, function() {
        return $(selector).animate({
          marginLeft: '' + margin_total
        }, speed, function() {
          return $(selector).animate({
            marginLeft: '-' + margin_total
          }, speed, function() {
            return $(selector).animate({
              marginLeft: '' + margin_total
            }, speed, function() {
              return $(selector).animate({
                marginLeft: '-' + margin_total
              }, speed, function() {
                return $(selector).animate({
                  marginLeft: '-0'
                }, speed, function() {
                  if (onComplete) {
                    return eval(onComplete);
                  }
                });
              });
            });
          });
        });
      });
    });
  };

  is_touch_device = function() {
    return 'ontouchstart' in window;
  };

  Post = function(raw_post, editor) {
    var c, i, len, path_parts, prereged_title, raw_content, ref, title_reg;
    if (raw_post.raw_path) {
      path_parts = raw_post.raw_path.split('/');
      this.path = path_parts.slice(1).join('/');
    } else {
      this.path = raw_post.path;
    }
    this.title = ko.observable(raw_post.title);
    raw_content = raw_post['raw_content'] || '';
    prereged_title = raw_post.title;
    ref = ['$', '\\', '{', '}', '[', ']', '(', ')', '^', '.', '*', '+', '?', '|'];
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      prereged_title = prereged_title.replace(c, '\\' + c);
    }
    title_reg = new RegExp('(?:^|([\r\n]))Title: ?' + prereged_title + ' *[\r\n]', 'i');
    this.content = raw_content.replace(title_reg, '$1');
    this.edit = (function(_this) {
      return function() {
        var current_post_dom, index, t_dom, to_tail;
        if (is_touch_device() || $(window).width() < 321) {
          editor.hide_controls();
        }
        t_dom = $('#textarea');
        if (editor.current_post()) {
          editor.current_post()['content'] = t_dom.val();
          editor._sync(editor.get_path(), editor.get_content());
        }
        if (!$.trim(_this.content)) {
          _this.content = 'Date: ' + $.format.date(new Date(), 'yyyy-MM-dd HH:mm') + '\n\n';
          if (editor.posts().length === 1) {
            _this.content += simple_help;
          }
          to_tail = true;
        } else {
          to_tail = false;
        }
        t_dom.val(_this.content);
        t_dom.focus();
        if (to_tail) {
          _this.to_text_tail();
        } else {
          _this.to_text_first_line_end();
        }
        $('#posts li a.current').removeClass('current');
        index = $.inArray(_this, editor.posts());
        current_post_dom = $($('#posts li a')[index]);
        current_post_dom.addClass('current');
        return editor.current_post(_this);
      };
    })(this);
    this.to_text_tail = function() {
      var obj;
      obj = $('#textarea')[0];
      return obj.selectionStart = obj.selectionEnd = obj.value.length;
    };
    this.to_text_first_line_end = function() {
      var obj;
      obj = $('#textarea')[0];
      if (obj.value.indexOf('\n')) {
        return obj.selectionStart = obj.selectionEnd = obj.value.indexOf('\n');
      } else {
        return obj.selectionStart = obj.selectionEnd = obj.value.length;
      }
    };
    this.remove = (function(_this) {
      return function() {
        if (confirm("are you sure to delete this post?")) {
          return _this.do_remove();
        }
      };
    })(this);
    this.do_remove = (function(_this) {
      return function() {
        var current;
        $.post(sync_gateway, {
          'path': _this.path,
          'is_deleted': true
        });
        editor.posts.remove(_this);
        if (editor.posts().length) {
          if (_this.path === editor.get_path()) {
            current = editor.posts()[0];
            return current.edit();
          }
        } else {
          return editor.create_first_post();
        }
      };
    })(this);
    return this;
  };

  EditorModel = function() {
    var controls, self;
    self = this;
    controls = $('#controls');
    this.posts = ko.observableArray([]);
    this.current_post = ko.observable({});
    this.current_title = ko.observable('');
    this.need_sync = ko.observable(false);
    this.sync_per_seconds = 20;
    this.show_tip_info = ko.observable(false);
    this.tip_info = ko.observable('Save');
    this.wait_to_sync_precess = ko.observable(0);
    this.load_posts = (function(_this) {
      return function() {
        return $.getJSON(posts_host, {}, function(posts) {
          var i, len, post;
          for (i = 0, len = posts.length; i < len; i++) {
            post = posts[i];
            _this.posts.push(new Post(post, self));
          }
          if (_this.posts().length) {
            return _this.posts()[0].edit();
          } else {
            return _this.create_first_post();
          }
        });
      };
    })(this);
    this.create_first_post = (function(_this) {
      return function() {
        var new_post, path, title;
        title = $.format.date(new Date(), 'yyyy-MM-dd');
        path = title + '.txt';
        new_post = new Post({
          path: path,
          title: title
        }, self);
        _this.posts.unshift(new_post);
        return new_post.edit(true);
      };
    })(this);
    this.open_new_window = function() {
      $('#new_window').css('display', 'block');
      $('#window_bg').css('background', '#000');
      $('#window_bg').css('opacity', '0.6');
      $('#new_window input').val('');
      return $('#new_window input').focus();
    };
    this.hide_new_window = function() {
      return $('#new_window').css('display', 'none');
    };
    this.create_new_one = (function(_this) {
      return function() {
        var new_path, new_post, paths, title;
        new_path = $.trim($('#new_path').val());
        if (new_path) {
          if (!new_path.match(/\.(md|markdown|txt|mk)$/gi)) {
            new_path = new_path + '.txt';
          }
          paths = $.map(_this.posts(), function(post) {
            return post.path;
          });
          if ($.inArray(new_path, paths) === -1) {
            title = new_path.replace(/\.(md|markdown|txt|mk)$/gi, '');
            new_post = new Post({
              path: new_path,
              title: title
            }, self);
            _this.posts.unshift(new_post);
            new_post.edit();
            _this.hide_new_window();
          } else {
            $('#new_window_body').shake();
          }
        } else {
          $('#new_window_body').shake();
        }
        return $('#new_window input').focus();
      };
    })(this);
    this.show_controls = function() {
      if (is_touch_device()) {
        $('#show_controls_button').css('display', 'none');
        controls.css('display', 'block');
      }
      if (controls.position().left <= -controls_width) {
        controls.animate({
          left: 0,
          opacity: 1
        }, 350, 'swing', make_textarea_center);
      }
      if ($.browser.msie) {
        return $('#textarea').blur();
      }
    };
    this.hide_controls = function() {
      if (is_touch_device() || $(window).width() < 321) {
        controls.css('display', 'none');
        controls.css('left', -controls_width);
        $('#show_controls_button').css('display', 'block');
        return false;
      }
      if (controls.position().left === 0) {
        controls.animate({
          left: -controls_width,
          opacity: 0.3
        }, 500, 'swing', make_textarea_center);
      }
      return $('#textarea').focus();
    };
    this.toggle_controls = function() {
      var button_left, hide_controls_button;
      hide_controls_button = $('#hide_controls');
      button_left = hide_controls_button.offset().left;
      if (button_left > -10) {
        return self.hide_controls();
      } else {
        return self.show_controls();
      }
    };
    if (!is_touch_device()) {
      controls.mouseenter(this.show_controls);
    }
    if (is_touch_device()) {
      this.hide_controls();
    }
    this.get_content = (function(_this) {
      return function() {
        var content, raw_content, title, title_value;
        title = $.trim($('#title').val());
        title_value = 'Title: ' + title + '\n';
        raw_content = $.trim($('#textarea').val());
        if (raw_content.match(/^\s*---\s*[\r\n]/)) {
          content = raw_content.replace(/^\s*---\s*[\r\n]/, '---\n' + title_value);
        } else {
          content = title_value + raw_content;
        }
        return content;
      };
    })(this);
    this.get_path = (function(_this) {
      return function() {
        return _this.current_post().path;
      };
    })(this);
    this.sync = (function(_this) {
      return function(e) {
        var diff_seconds;
        if (!_this.keep_sync_binded) {
          _this.keep_sync_binded = true;
          setInterval(_this.keep_sync, 1000);
          _this.last_sync_at = new Date();
          _this.need_sync(true);
        }
        if (!_this.need_sync()) {
          _this.last_sync_at = new Date();
        }
        _this.need_sync(true);
        _this.show_tip_info(true);
        diff_seconds = _this.sync_per_seconds - (new Date() - _this.last_sync_at) / 1000;
        _this.wait_to_sync_precess(100 * (1 - diff_seconds / _this.sync_per_seconds) + '%');
        if (diff_seconds > 0) {
          return false;
        } else {
          return _this._sync();
        }
      };
    })(this);
    this.keep_sync = (function(_this) {
      return function() {
        if (!_this.need_sync()) {
          return false;
        } else {
          return _this.sync();
        }
      };
    })(this);
    this._sync = (function(_this) {
      return function(path, content) {
        var data;
        if (typeof path !== 'string') {
          path = '';
        }
        if (typeof content !== 'string') {
          content = '';
        }
        if (!_this.need_sync()) {
          return false;
        } else {
          _this.last_sync_at = new Date();
          _this.need_sync(false);
          $('#textarea').focus();
        }
        _this.tip_info('Saving...');
        path = path || _this.get_path();
        content = content || _this.get_content();
        data = {
          path: path,
          raw_content: content
        };
        return $.post(sync_gateway, data, function() {
          _this.tip_info('Save');
          if (!_this.need_sync()) {
            return _this.show_tip_info(false);
          }
        });
      };
    })(this);
    this.insert_image_allowed = (function(_this) {
      return function() {
        var dom;
        if (!canvas_allowed) {
          return false;
        }
        dom = $('#textarea');
        $(dom)[0].addEventListener('drop', function(event) {
          var file, files, i, len, reader;
          files = event.dataTransfer.files;
          for (i = 0, len = files.length; i < len; i++) {
            file = files[i];
            if (file.type.indexOf('image') === -1) {
              continue;
            }
            reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function(ev) {
              return _this.upload_image(ev.target.result);
            };
          }
          return event.preventDefault();
        }, false);
        return $(dom)[0].addEventListener('dragover', function(event) {
          return event.preventDefault();
        }, false);
      };
    })(this);
    this.canvas = document.createElement('canvas');
    if (canvas_allowed) {
      this.cx = this.canvas.getContext('2d');
    } else {
      this.cx = null;
    }
    this.upload_image = (function(_this) {
      return function(file) {
        var img;
        if (!canvas_allowed) {
          return false;
        }
        img = new Image();
        img.src = file;
        return $(img).one('load', function() {
          var cursorPos, dom, h, height, height_r, image_path, max_r, old_value, request_data, text_after, text_before, thumb_height, thumb_width, to_insert, w, width, width_r;
          width = this.naturalWidth || this.width;
          height = this.naturalHeight || this.height;
          thumb_height = 2560;
          thumb_width = 1280;
          width_r = width / thumb_width;
          height_r = height / thumb_height;
          max_r = Math.max(width_r, height_r);
          w = max_r > 1 ? width / max_r : width;
          h = max_r > 1 ? height / max_r : height;
          self.canvas.width = w;
          self.canvas.height = h;
          self.cx.drawImage(this, 0, 0, w, h);
          image_path = '/_image' + $.format.date(new Date(), '/yyyy-MM-dd/HH-mm-ss') + '.jpg';
          request_data = {
            path: image_path,
            base64: self.canvas.toDataURL('image/jpeg', 0.96)
          };
          Essage.show({
            message: 'Image Uploading, Wait or keep writing...',
            status: 'success'
          }, 30000);
          $.post(sync_gateway, request_data, function(response_data, status) {
            if (status === 'success') {
              return Essage.show({
                message: 'Image Uploaded, Done!',
                status: 'success'
              }, 5000);
            }
          });
          to_insert = '![Image](' + image_path + ')\n';
          dom = $('#textarea');
          cursorPos = dom.prop('selectionStart');
          old_value = dom.val();
          text_before = old_value.substring(0, cursorPos);
          text_after = old_value.substring(cursorPos, old_value.length);
          dom.val(text_before + to_insert + text_after);
          return dom.focus();
        });
      };
    })(this);
    return this;
  };

  make_textarea_center = function() {
    var controls, dom, padding, textarea_width, title_dom;
    textarea_width = 780;
    dom = $('#textarea');
    title_dom = $('#title');
    if (is_touch_device() || $(window).width() < textarea_width) {
      dom.css('width', '96%');
      dom.css('margin', ' 0 auto');
      title_dom.css('padding', '0');
      title_dom.css('width', '96%');
      return title_dom.css('left', '2%');
    } else {
      padding = ($(document).width() - textarea_width) / 2;
      controls = $('#controls');
      if (controls.position().left === 0) {
        padding -= controls_width / 2;
      }
      dom.css({
        "padding-right": padding + 'px',
        'width': textarea_width + padding + 'px'
      });
      title_dom.css({
        "right": padding + 'px',
        'width': textarea_width + 'px'
      });
      if ($.browser.mozilla && $.browser.version && $.browser.version.indexOf('32.') !== -1) {
        return dom.css({
          'width': textarea_width + 'px'
        });
      }
    }
  };

  this.hide_wechat_parts = function() {
    var onBridgeReady;
    onBridgeReady = function() {
      WeixinJSBridge.call('hideToolbar');
      return WeixinJSBridge.call('hideOptionMenu');
    };
    if (typeof WeixinJSBridge === "undefined") {
      if (document.addEventListener) {
        return document.addEventListener('WeixinJSBridgeReady', onBridgeReady, false);
      } else if (document.attachEvent) {
        document.attachEvent('WeixinJSBridgeReady', onBridgeReady);
        return document.attachEvent('onWeixinJSBridgeReady', onBridgeReady);
      }
    } else {
      return onBridgeReady();
    }
  };

  this.run_editor = (function(_this) {
    return function() {
      var editor_model;
      editor_model = new EditorModel();
      _this.editor = editor_model;
      window.onresize = make_textarea_center;
      return $(document).ready(function() {
        var text_dom, title_dom;
        text_dom = $('#textarea');
        title_dom = $('#title');
        if (is_touch_device()) {
          $('#contorls').css('opacity', 0);
          $('#show_controls_button').css('display', 'block');
        }
        make_textarea_center();
        ko.applyBindings(editor_model);
        editor_model.load_posts();
        editor_model.insert_image_allowed();
        text_dom.scroll(function() {
          if (text_dom.scrollTop() > 25) {
            return title_dom.css('display', 'none');
          } else {
            return title_dom.css('display', 'block');
          }
        });
        title_dom.keyup(function(event) {
          editor_model.current_post().title(title_dom.val());
          if (event.which === 13) {
            return text_dom.focus();
          }
        });
        window.onbeforeunload = (function(_this) {
          return function() {
            if (editor_model.need_sync()) {
              return 'Contents not saved yet, Please wait for a moment!';
            }
            return null;
          };
        })(this);
        $(window).keydown((function(_this) {
          return function() {
            var ref, ref1;
            if (((ref = event.which) === 83 || ref === 115) && (event.ctrlKey || event.metaKey)) {
              event.preventDefault();
              editor._sync();
              return false;
            }
            if (((ref1 = event.which) === 69 || ref1 === 101) && (event.ctrlKey || event.metaKey)) {
              event.preventDefault();
              editor.toggle_controls();
              return false;
            }
          };
        })(this));
        return $(document).on('input propertychange', 'textarea', (function(_this) {
          return function() {
            return editor.sync();
          };
        })(this));
      });
    };
  })(this);

}).call(this);
