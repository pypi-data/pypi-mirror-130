// Generated by CoffeeScript 1.8.0
(function() {
  this.remove_dom_list_item = function(dom) {
    var action_dom, list_item_dom;
    action_dom = $(dom);
    list_item_dom = action_dom.parents('.dom_list_item');
    list_item_dom.remove();
    return false;
  };

  this.add_dom_list_item = function(dom) {
    var action_dom, list_dom, new_item_dom, template_dom;
    action_dom = $(dom);
    list_dom = action_dom.parents('.dom_list');
    template_dom = list_dom.find('.template');
    new_item_dom = template_dom.clone();
    new_item_dom.removeClass('template');
    new_item_dom.insertBefore(template_dom);
    new_item_dom.css('display', 'block');
    if (typeof init_image_fields !== "undefined" && init_image_fields !== null) {
      init_image_fields();
    }
    return false;
  };

  this.to_json = function(obj) {
    var result;
    if (typeof JSON !== "undefined" && JSON !== null) {
      result = JSON.stringify(obj, null, 4);
    } else {
      result = $.toJSON(obj);
    }
    return result;
  };

  this.auto_set_key_value = function(obj, key, value) {
    var key1, key2, key_parts;
    if (!key) {
      return;
    }
    if (key.indexOf('.') !== -1) {
      key_parts = key.split(".");
      key1 = key_parts[0];
      key2 = key_parts[1];
      if (!obj[key1]) {
        obj[key1] = {};
      }
      return obj[key1][key2] = value;
    } else {
      return obj[key] = value;
    }
  };

  this.auto_obj_by_auto_key = function(obj) {
    var key, new_obj, value;
    new_obj = {};
    for (key in obj) {
      value = obj[key];
      auto_set_key_value(new_obj, key, value);
    }
    return new_obj;
  };

  this.dom_to_data = function(dom, as_list) {
    var data, dom_finders, dom_found, finder, key, value, value_dom, _i, _len, _ref;
    dom = $(dom);
    if (!dom.length) {
      return null;
    }
    value_dom = null;
    dom_finders = ['img.form_image_dom', '.form_file_dom', 'textarea', 'select', 'input'];
    for (_i = 0, _len = dom_finders.length; _i < _len; _i++) {
      finder = dom_finders[_i];
      dom_found = dom.find(finder);
      if (dom_found.length) {
        value_dom = dom_found;
        break;
      }
    }
    if (!value_dom) {
      if ((_ref = dom[0].tagName) === 'INPUT' || _ref === 'TEXTAREA' || _ref === 'SELECT') {
        value_dom = dom;
      }
    }
    if (!value_dom) {
      return null;
    }
    key = value_dom.attr('name');
    if (value_dom.hasClass('form_image_dom') || value_dom.hasClass('form_file_dom')) {
      value = value_dom.attr('data-filepath');
    } else {
      value = value_dom.val();
    }
    if (!key) {
      return null;
    }
    if (as_list) {
      return [key, value];
    } else {
      data = {};
      data[key] = value;
      return data;
    }
  };

  this.list_dom_to_data = function(list_dom) {
    var data_list;
    list_dom = $(list_dom);
    data_list = [];
    list_dom.find('.dom_list_item').each(function() {
      var data, item_dom;
      item_dom = $(this);
      data = {};
      item_dom.find('.field').each(function() {
        var element_data;
        element_data = dom_to_data(this);
        if (element_data) {
          return $.extend(data, element_data);
        }
      });
      if (!item_dom.hasClass('template')) {
        data = auto_obj_by_auto_key(data);
        return data_list.push(data);
      }
    });
    return data_list;
  };

  this.get_form_extra_data = function(form_dom) {
    var data, key, list_dom, _i, _len, _ref;
    form_dom = $(form_dom);
    data = {};
    _ref = form_dom.find('.field .dom_list');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      list_dom = _ref[_i];
      list_dom = $(list_dom);
      key = list_dom.attr("data-value");
      auto_set_key_value(data, key, list_dom_to_data(list_dom));
    }
    for (key in data) {
      data[key + '@json'] = to_json(data[key]);
    }
    return data;
  };

  $(document).ready(function() {
    try {
      return $('.dom_list_body').sortable();
    } catch (_error) {}
  });

}).call(this);
