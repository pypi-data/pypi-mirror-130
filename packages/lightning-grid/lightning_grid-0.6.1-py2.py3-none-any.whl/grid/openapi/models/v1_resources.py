# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grid.openapi.configuration import Configuration


class V1Resources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'str',
        'extra': 'dict(str, str)',
        'gpu': 'str',
        'storage_gb': 'str'
    }

    attribute_map = {
        'cpu': 'cpu',
        'extra': 'extra',
        'gpu': 'gpu',
        'storage_gb': 'storageGb'
    }

    def __init__(self, cpu=None, extra=None, gpu=None, storage_gb=None, _configuration=None):  # noqa: E501
        """V1Resources - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu = None
        self._extra = None
        self._gpu = None
        self._storage_gb = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if extra is not None:
            self.extra = extra
        if gpu is not None:
            self.gpu = gpu
        if storage_gb is not None:
            self.storage_gb = storage_gb

    @property
    def cpu(self):
        """Gets the cpu of this V1Resources.  # noqa: E501


        :return: The cpu of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this V1Resources.


        :param cpu: The cpu of this V1Resources.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def extra(self):
        """Gets the extra of this V1Resources.  # noqa: E501


        :return: The extra of this V1Resources.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this V1Resources.


        :param extra: The extra of this V1Resources.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra = extra

    @property
    def gpu(self):
        """Gets the gpu of this V1Resources.  # noqa: E501


        :return: The gpu of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this V1Resources.


        :param gpu: The gpu of this V1Resources.  # noqa: E501
        :type: str
        """

        self._gpu = gpu

    @property
    def storage_gb(self):
        """Gets the storage_gb of this V1Resources.  # noqa: E501


        :return: The storage_gb of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._storage_gb

    @storage_gb.setter
    def storage_gb(self, storage_gb):
        """Sets the storage_gb of this V1Resources.


        :param storage_gb: The storage_gb of this V1Resources.  # noqa: E501
        :type: str
        """

        self._storage_gb = storage_gb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Resources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Resources):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1Resources):
            return True

        return self.to_dict() != other.to_dict()
