# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grid.openapi.configuration import Configuration


class Externalv1DatastoreSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'size_mib': 'int',
        'source': 'str',
        'uploaded_at': 'datetime',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'size_mib': 'sizeMib',
        'source': 'source',
        'uploaded_at': 'uploadedAt',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, cluster_id=None, size_mib=None, source=None, uploaded_at=None, user_id=None, version=None, _configuration=None):  # noqa: E501
        """Externalv1DatastoreSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_id = None
        self._size_mib = None
        self._source = None
        self._uploaded_at = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        if size_mib is not None:
            self.size_mib = size_mib
        if source is not None:
            self.source = source
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The cluster_id of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Externalv1DatastoreSpec.


        :param cluster_id: The cluster_id of this Externalv1DatastoreSpec.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def size_mib(self):
        """Gets the size_mib of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The size_mib of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: int
        """
        return self._size_mib

    @size_mib.setter
    def size_mib(self, size_mib):
        """Sets the size_mib of this Externalv1DatastoreSpec.


        :param size_mib: The size_mib of this Externalv1DatastoreSpec.  # noqa: E501
        :type: int
        """

        self._size_mib = size_mib

    @property
    def source(self):
        """Gets the source of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The source of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Externalv1DatastoreSpec.


        :param source: The source of this Externalv1DatastoreSpec.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The uploaded_at of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this Externalv1DatastoreSpec.


        :param uploaded_at: The uploaded_at of this Externalv1DatastoreSpec.  # noqa: E501
        :type: datetime
        """

        self._uploaded_at = uploaded_at

    @property
    def user_id(self):
        """Gets the user_id of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The user_id of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Externalv1DatastoreSpec.


        :param user_id: The user_id of this Externalv1DatastoreSpec.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The version of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Externalv1DatastoreSpec.


        :param version: The version of this Externalv1DatastoreSpec.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Externalv1DatastoreSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Externalv1DatastoreSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Externalv1DatastoreSpec):
            return True

        return self.to_dict() != other.to_dict()
