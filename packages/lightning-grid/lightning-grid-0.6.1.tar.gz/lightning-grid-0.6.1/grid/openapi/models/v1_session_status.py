# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grid.openapi.configuration import Configuration


class V1SessionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destroyed_timestamp': 'datetime',
        'jupyter_lab_token': 'str',
        'jupyter_lab_url': 'str',
        'last_state_status_transition_timestamp': 'datetime',
        'phase': 'V1SessionState',
        'ssh_url': 'str',
        'start_timestamp': 'datetime',
        'stop_timestamp': 'datetime',
        'total_run_time_seconds': 'str'
    }

    attribute_map = {
        'destroyed_timestamp': 'destroyedTimestamp',
        'jupyter_lab_token': 'jupyterLabToken',
        'jupyter_lab_url': 'jupyterLabUrl',
        'last_state_status_transition_timestamp': 'lastStateStatusTransitionTimestamp',
        'phase': 'phase',
        'ssh_url': 'sshUrl',
        'start_timestamp': 'startTimestamp',
        'stop_timestamp': 'stopTimestamp',
        'total_run_time_seconds': 'totalRunTimeSeconds'
    }

    def __init__(self, destroyed_timestamp=None, jupyter_lab_token=None, jupyter_lab_url=None, last_state_status_transition_timestamp=None, phase=None, ssh_url=None, start_timestamp=None, stop_timestamp=None, total_run_time_seconds=None, _configuration=None):  # noqa: E501
        """V1SessionStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._destroyed_timestamp = None
        self._jupyter_lab_token = None
        self._jupyter_lab_url = None
        self._last_state_status_transition_timestamp = None
        self._phase = None
        self._ssh_url = None
        self._start_timestamp = None
        self._stop_timestamp = None
        self._total_run_time_seconds = None
        self.discriminator = None

        if destroyed_timestamp is not None:
            self.destroyed_timestamp = destroyed_timestamp
        if jupyter_lab_token is not None:
            self.jupyter_lab_token = jupyter_lab_token
        if jupyter_lab_url is not None:
            self.jupyter_lab_url = jupyter_lab_url
        if last_state_status_transition_timestamp is not None:
            self.last_state_status_transition_timestamp = last_state_status_transition_timestamp
        if phase is not None:
            self.phase = phase
        if ssh_url is not None:
            self.ssh_url = ssh_url
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if stop_timestamp is not None:
            self.stop_timestamp = stop_timestamp
        if total_run_time_seconds is not None:
            self.total_run_time_seconds = total_run_time_seconds

    @property
    def destroyed_timestamp(self):
        """Gets the destroyed_timestamp of this V1SessionStatus.  # noqa: E501


        :return: The destroyed_timestamp of this V1SessionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._destroyed_timestamp

    @destroyed_timestamp.setter
    def destroyed_timestamp(self, destroyed_timestamp):
        """Sets the destroyed_timestamp of this V1SessionStatus.


        :param destroyed_timestamp: The destroyed_timestamp of this V1SessionStatus.  # noqa: E501
        :type: datetime
        """

        self._destroyed_timestamp = destroyed_timestamp

    @property
    def jupyter_lab_token(self):
        """Gets the jupyter_lab_token of this V1SessionStatus.  # noqa: E501


        :return: The jupyter_lab_token of this V1SessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._jupyter_lab_token

    @jupyter_lab_token.setter
    def jupyter_lab_token(self, jupyter_lab_token):
        """Sets the jupyter_lab_token of this V1SessionStatus.


        :param jupyter_lab_token: The jupyter_lab_token of this V1SessionStatus.  # noqa: E501
        :type: str
        """

        self._jupyter_lab_token = jupyter_lab_token

    @property
    def jupyter_lab_url(self):
        """Gets the jupyter_lab_url of this V1SessionStatus.  # noqa: E501


        :return: The jupyter_lab_url of this V1SessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._jupyter_lab_url

    @jupyter_lab_url.setter
    def jupyter_lab_url(self, jupyter_lab_url):
        """Sets the jupyter_lab_url of this V1SessionStatus.


        :param jupyter_lab_url: The jupyter_lab_url of this V1SessionStatus.  # noqa: E501
        :type: str
        """

        self._jupyter_lab_url = jupyter_lab_url

    @property
    def last_state_status_transition_timestamp(self):
        """Gets the last_state_status_transition_timestamp of this V1SessionStatus.  # noqa: E501


        :return: The last_state_status_transition_timestamp of this V1SessionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_state_status_transition_timestamp

    @last_state_status_transition_timestamp.setter
    def last_state_status_transition_timestamp(self, last_state_status_transition_timestamp):
        """Sets the last_state_status_transition_timestamp of this V1SessionStatus.


        :param last_state_status_transition_timestamp: The last_state_status_transition_timestamp of this V1SessionStatus.  # noqa: E501
        :type: datetime
        """

        self._last_state_status_transition_timestamp = last_state_status_transition_timestamp

    @property
    def phase(self):
        """Gets the phase of this V1SessionStatus.  # noqa: E501


        :return: The phase of this V1SessionStatus.  # noqa: E501
        :rtype: V1SessionState
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this V1SessionStatus.


        :param phase: The phase of this V1SessionStatus.  # noqa: E501
        :type: V1SessionState
        """

        self._phase = phase

    @property
    def ssh_url(self):
        """Gets the ssh_url of this V1SessionStatus.  # noqa: E501


        :return: The ssh_url of this V1SessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._ssh_url

    @ssh_url.setter
    def ssh_url(self, ssh_url):
        """Sets the ssh_url of this V1SessionStatus.


        :param ssh_url: The ssh_url of this V1SessionStatus.  # noqa: E501
        :type: str
        """

        self._ssh_url = ssh_url

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this V1SessionStatus.  # noqa: E501


        :return: The start_timestamp of this V1SessionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this V1SessionStatus.


        :param start_timestamp: The start_timestamp of this V1SessionStatus.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def stop_timestamp(self):
        """Gets the stop_timestamp of this V1SessionStatus.  # noqa: E501


        :return: The stop_timestamp of this V1SessionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_timestamp

    @stop_timestamp.setter
    def stop_timestamp(self, stop_timestamp):
        """Sets the stop_timestamp of this V1SessionStatus.


        :param stop_timestamp: The stop_timestamp of this V1SessionStatus.  # noqa: E501
        :type: datetime
        """

        self._stop_timestamp = stop_timestamp

    @property
    def total_run_time_seconds(self):
        """Gets the total_run_time_seconds of this V1SessionStatus.  # noqa: E501


        :return: The total_run_time_seconds of this V1SessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._total_run_time_seconds

    @total_run_time_seconds.setter
    def total_run_time_seconds(self, total_run_time_seconds):
        """Sets the total_run_time_seconds of this V1SessionStatus.


        :param total_run_time_seconds: The total_run_time_seconds of this V1SessionStatus.  # noqa: E501
        :type: str
        """

        self._total_run_time_seconds = total_run_time_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1SessionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1SessionStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1SessionStatus):
            return True

        return self.to_dict() != other.to_dict()
