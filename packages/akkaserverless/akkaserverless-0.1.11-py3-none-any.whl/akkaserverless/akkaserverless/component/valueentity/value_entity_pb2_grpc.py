# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from akkaserverless.akkaserverless.akkaserverless.akkaserverless.akkaserverless.akkaserverless.akkaserverless.component.valueentity import value_entity_pb2 as akkaserverless_dot_component_dot_valueentity_dot_value__entity__pb2


class ValueEntitiesStub(object):
    """Service that the SDK (in the user function) implements to make value
    entities available to the proxy
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handle = channel.stream_stream(
                '/akkaserverless.component.valueentity.ValueEntities/Handle',
                request_serializer=akkaserverless_dot_component_dot_valueentity_dot_value__entity__pb2.ValueEntityStreamIn.SerializeToString,
                response_deserializer=akkaserverless_dot_component_dot_valueentity_dot_value__entity__pb2.ValueEntityStreamOut.FromString,
                )


class ValueEntitiesServicer(object):
    """Service that the SDK (in the user function) implements to make value
    entities available to the proxy
    """

    def Handle(self, request_iterator, context):
        """One stream will be established per active entity. Once established, the
        first message sent will be Init, which contains the entity ID, and, a state
        if the entity has previously persisted one. Once the Init message is sent,
        one to many commands are sent to the entity. Each request coming in leads
        to a new command being sent to the entity. The entity is expected to reply
        to each command with exactly one reply message. The entity should process
        commands and reply to commands in the order they came in. When processing a
        command the entity can read and persist (update or delete) the state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ValueEntitiesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handle': grpc.stream_stream_rpc_method_handler(
                    servicer.Handle,
                    request_deserializer=akkaserverless_dot_component_dot_valueentity_dot_value__entity__pb2.ValueEntityStreamIn.FromString,
                    response_serializer=akkaserverless_dot_component_dot_valueentity_dot_value__entity__pb2.ValueEntityStreamOut.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'akkaserverless.component.valueentity.ValueEntities', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ValueEntities(object):
    """Service that the SDK (in the user function) implements to make value
    entities available to the proxy
    """

    @staticmethod
    def Handle(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/akkaserverless.component.valueentity.ValueEntities/Handle',
            akkaserverless_dot_component_dot_valueentity_dot_value__entity__pb2.ValueEntityStreamIn.SerializeToString,
            akkaserverless_dot_component_dot_valueentity_dot_value__entity__pb2.ValueEntityStreamOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
