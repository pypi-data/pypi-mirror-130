# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from akkaserverless.akkaserverless.protocol import discovery_pb2 as akkaserverless_dot_protocol_dot_discovery__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DiscoveryStub(object):
    """Service that the SDK (in the user function) implements to allow the proxy to
    discover which components are provided by this user function
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Discover = channel.unary_unary(
                '/akkaserverless.protocol.Discovery/Discover',
                request_serializer=akkaserverless_dot_protocol_dot_discovery__pb2.ProxyInfo.SerializeToString,
                response_deserializer=akkaserverless_dot_protocol_dot_discovery__pb2.Spec.FromString,
                )
        self.ReportError = channel.unary_unary(
                '/akkaserverless.protocol.Discovery/ReportError',
                request_serializer=akkaserverless_dot_protocol_dot_discovery__pb2.UserFunctionError.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ProxyTerminated = channel.unary_unary(
                '/akkaserverless.protocol.Discovery/ProxyTerminated',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/akkaserverless.protocol.Discovery/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class DiscoveryServicer(object):
    """Service that the SDK (in the user function) implements to allow the proxy to
    discover which components are provided by this user function
    """

    def Discover(self, request, context):
        """Discover what components the user function wishes to serve.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportError(self, request, context):
        """Report an error back to the user function. This will only be invoked to
        tell the user function that it has done something wrong, eg, violated the
        protocol, tried to use a component type that isn't supported, or attempted
        to forward to a component that doesn't exist, etc. These messages should be
        logged clearly for debugging purposes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProxyTerminated(self, request, context):
        """When the Akka Serverless proxy is shutting down it sends this signal at the end
        of the shutdown process. The user function container should preferably delay
        its own shutdown until the proxy has terminated to be able to drain requests in
        flight from the proxy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check for the user function to detect if it stops, crashes or becomes unresponsive
        and the proxy needs to restart it. The SDK should respond in a timely fashion if healthy
        or fail the request if not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiscoveryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Discover': grpc.unary_unary_rpc_method_handler(
                    servicer.Discover,
                    request_deserializer=akkaserverless_dot_protocol_dot_discovery__pb2.ProxyInfo.FromString,
                    response_serializer=akkaserverless_dot_protocol_dot_discovery__pb2.Spec.SerializeToString,
            ),
            'ReportError': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportError,
                    request_deserializer=akkaserverless_dot_protocol_dot_discovery__pb2.UserFunctionError.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ProxyTerminated': grpc.unary_unary_rpc_method_handler(
                    servicer.ProxyTerminated,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'akkaserverless.protocol.Discovery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Discovery(object):
    """Service that the SDK (in the user function) implements to allow the proxy to
    discover which components are provided by this user function
    """

    @staticmethod
    def Discover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/akkaserverless.protocol.Discovery/Discover',
            akkaserverless_dot_protocol_dot_discovery__pb2.ProxyInfo.SerializeToString,
            akkaserverless_dot_protocol_dot_discovery__pb2.Spec.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/akkaserverless.protocol.Discovery/ReportError',
            akkaserverless_dot_protocol_dot_discovery__pb2.UserFunctionError.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProxyTerminated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/akkaserverless.protocol.Discovery/ProxyTerminated',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/akkaserverless.protocol.Discovery/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
