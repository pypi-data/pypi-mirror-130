# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from akkaserverless.akkaserverless.component.eventsourcedentity import event_sourced_entity_pb2 as akkaserverless_dot_component_dot_eventsourcedentity_dot_event__sourced__entity__pb2


class EventSourcedEntitiesStub(object):
    """Service that the SDK (in the user function) implements to make event-sourced
    entities available to the proxy
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handle = channel.stream_stream(
                '/akkaserverless.component.eventsourcedentity.EventSourcedEntities/Handle',
                request_serializer=akkaserverless_dot_component_dot_eventsourcedentity_dot_event__sourced__entity__pb2.EventSourcedStreamIn.SerializeToString,
                response_deserializer=akkaserverless_dot_component_dot_eventsourcedentity_dot_event__sourced__entity__pb2.EventSourcedStreamOut.FromString,
                )


class EventSourcedEntitiesServicer(object):
    """Service that the SDK (in the user function) implements to make event-sourced
    entities available to the proxy
    """

    def Handle(self, request_iterator, context):
        """The stream. One stream will be established per active entity. Once
        established, the first message sent will be Init, which contains the entity
        ID, and, if the entity has previously persisted a snapshot, it will contain
        that snapshot. It will then send zero to many event messages, one for each
        event previously persisted. The entity is expected to apply these to its
        state in a deterministic fashion. Once all the events are sent, one to many
        commands are sent, with new commands being sent as new requests for the
        entity come in. The entity is expected to reply to each command with
        exactly one reply message. The entity should reply in order, and any events
        that the entity requests to be persisted the entity should handle itself,
        applying them to its own state, as if they had arrived as events when the
        event stream was being replayed on load.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventSourcedEntitiesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handle': grpc.stream_stream_rpc_method_handler(
                    servicer.Handle,
                    request_deserializer=akkaserverless_dot_component_dot_eventsourcedentity_dot_event__sourced__entity__pb2.EventSourcedStreamIn.FromString,
                    response_serializer=akkaserverless_dot_component_dot_eventsourcedentity_dot_event__sourced__entity__pb2.EventSourcedStreamOut.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'akkaserverless.component.eventsourcedentity.EventSourcedEntities', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventSourcedEntities(object):
    """Service that the SDK (in the user function) implements to make event-sourced
    entities available to the proxy
    """

    @staticmethod
    def Handle(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/akkaserverless.component.eventsourcedentity.EventSourcedEntities/Handle',
            akkaserverless_dot_component_dot_eventsourcedentity_dot_event__sourced__entity__pb2.EventSourcedStreamIn.SerializeToString,
            akkaserverless_dot_component_dot_eventsourcedentity_dot_event__sourced__entity__pb2.EventSourcedStreamOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
