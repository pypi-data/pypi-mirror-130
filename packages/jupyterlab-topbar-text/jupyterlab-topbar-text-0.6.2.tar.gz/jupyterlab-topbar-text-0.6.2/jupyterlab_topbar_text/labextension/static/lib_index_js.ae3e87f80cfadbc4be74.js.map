{"version":3,"file":"lib_index_js.ae3e87f80cfadbc4be74.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAA2E;AAC3B;AACe;AACtB;AACG;AAChB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,yEAAgB,EAAE,sDAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAM,GAAG,gBAAgB;AACxD;AACA;AACA;AACA;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,qEAAmB,IAAI,iEAAe,GAAG,eAAe;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,YAAY;AACtC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,8BAA8B,wCAAwC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,0BAA0B,mDAAM;AAChC;AACA,gBAAgB,uCAAuC;AACvD,oBAAoB,kEAAe;AACnC,8CAA8C,mEAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;AC1GzB;AACsH;AAC7B;AACzF,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,iDAAiD,kEAAkE;AACnH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;ACPvC;AACsH;AAC7B;AACW;AACpG,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F,0BAA0B,qFAAiC;AAC3D;AACA,mDAAmD,kEAAkE;AACrH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;ACTkD;AACzF,YAAuF;;AAEvF;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,sFAAO;;;;AAIxB,iEAAe,6FAAc,MAAM","sources":["webpack://jupyterlab-topbar-text/./lib/index.js","webpack://jupyterlab-topbar-text/./style/base.css","webpack://jupyterlab-topbar-text/./style/index.css","webpack://jupyterlab-topbar-text/./style/index.css?0140"],"sourcesContent":["import { Dialog, ICommandPalette, showDialog } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { Widget } from '@lumino/widgets';\nimport { ITopBar } from 'jupyterlab-topbar';\nimport '../style/index.css';\nconst TOPBAR_TEXT = 'jp-TopBar-Text';\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Edit TopBar Text\n     */\n    CommandIDs.editText = 'jupyterlab-topbar-text:edit-text';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the jupyterlab-topbar-text extension.\n */\nconst extension = {\n    id: 'jupyterlab-topbar-text:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, ISettingRegistry, ITopBar],\n    activate: async (app, palette, settingsRegistry, topBar) => {\n        const settings = await settingsRegistry.load(extension.id);\n        let text = settings.get('text').composite;\n        let editable = settings.get('editable').composite;\n        const textNode = document.createElement('div');\n        textNode.textContent = text;\n        const textWidget = new Widget({ node: textNode });\n        textWidget.addClass(TOPBAR_TEXT);\n        topBar.addItem('custom-text', textWidget);\n        function showUpdateTextDialog() {\n            const oldText = settings.get('text').composite;\n            showDialog({\n                title: 'Edit Top Bar Text',\n                body: new EditHandler(oldText),\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Save' })]\n            }).then(result => {\n                if (!result.button.accept) {\n                    return;\n                }\n                const text = result.value;\n                if (text === null) {\n                    return;\n                }\n                settingsRegistry.set(extension.id, 'text', text);\n                textNode.textContent = text;\n            });\n        }\n        app.contextMenu.addItem({\n            command: CommandIDs.editText,\n            selector: `.${TOPBAR_TEXT}`,\n            rank: 1\n        });\n        app.commands.addCommand(CommandIDs.editText, {\n            label: 'Edit Text',\n            execute: (args) => {\n                showUpdateTextDialog();\n            },\n            isEnabled: () => editable\n        });\n        if (palette) {\n            const category = 'Top Bar';\n            palette.addItem({ command: CommandIDs.editText, category });\n        }\n        app.restored.then(() => {\n            settings.changed.connect(async () => {\n                text = settings.get('text').composite;\n                editable = settings.get('editable').composite;\n                textNode.textContent = text;\n            });\n        });\n    }\n};\nclass EditHandler extends Widget {\n    constructor(oldPath) {\n        super({ node: Private.createEditNode(oldPath) });\n        const ext = PathExt.extname(oldPath);\n        const value = (this.inputNode.value = PathExt.basename(oldPath));\n        this.inputNode.setSelectionRange(0, value.length - ext.length);\n    }\n    get inputNode() {\n        return this.node.getElementsByTagName('input')[0];\n    }\n    getValue() {\n        return this.inputNode.value;\n    }\n}\nvar Private;\n(function (Private) {\n    function createEditNode(oldText) {\n        const body = document.createElement('div');\n        const existingLabel = document.createElement('label');\n        existingLabel.textContent = 'Old Text';\n        const existingPath = document.createElement('span');\n        existingPath.textContent = oldText;\n        const nameTitle = document.createElement('label');\n        nameTitle.textContent = 'New Text';\n        const name = document.createElement('input');\n        body.appendChild(existingLabel);\n        body.appendChild(existingPath);\n        body.appendChild(nameTitle);\n        body.appendChild(name);\n        return body;\n    }\n    Private.createEditNode = createEditNode;\n})(Private || (Private = {}));\nexport default extension;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}